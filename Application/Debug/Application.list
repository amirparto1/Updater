
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a68  08040188  08040188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08046bf0  08046bf0  00007bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046c48  08046c48  000080fc  2**0
                  CONTENTS
  4 .ARM          00000008  08046c48  08046c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08046c50  08046c50  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08046c50  08046c50  00007c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08046c54  08046c54  00007c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08046c58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080fc  2**0
                  CONTENTS
 10 .bss          00001c04  200000fc  200000fc  000080fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d00  20001d00  000080fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d457  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002987  00000000  00000000  00015583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00017f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000854  00000000  00000000  00018a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226d1  00000000  00000000  000192b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5a0  00000000  00000000  0003b985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3fc0  00000000  00000000  0004af25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010eee5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ccc  00000000  00000000  0010ef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00111bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040188 <__do_global_dtors_aux>:
 8040188:	b510      	push	{r4, lr}
 804018a:	4c05      	ldr	r4, [pc, #20]	@ (80401a0 <__do_global_dtors_aux+0x18>)
 804018c:	7823      	ldrb	r3, [r4, #0]
 804018e:	b933      	cbnz	r3, 804019e <__do_global_dtors_aux+0x16>
 8040190:	4b04      	ldr	r3, [pc, #16]	@ (80401a4 <__do_global_dtors_aux+0x1c>)
 8040192:	b113      	cbz	r3, 804019a <__do_global_dtors_aux+0x12>
 8040194:	4804      	ldr	r0, [pc, #16]	@ (80401a8 <__do_global_dtors_aux+0x20>)
 8040196:	f3af 8000 	nop.w
 804019a:	2301      	movs	r3, #1
 804019c:	7023      	strb	r3, [r4, #0]
 804019e:	bd10      	pop	{r4, pc}
 80401a0:	200000fc 	.word	0x200000fc
 80401a4:	00000000 	.word	0x00000000
 80401a8:	08046bd8 	.word	0x08046bd8

080401ac <frame_dummy>:
 80401ac:	b508      	push	{r3, lr}
 80401ae:	4b03      	ldr	r3, [pc, #12]	@ (80401bc <frame_dummy+0x10>)
 80401b0:	b11b      	cbz	r3, 80401ba <frame_dummy+0xe>
 80401b2:	4903      	ldr	r1, [pc, #12]	@ (80401c0 <frame_dummy+0x14>)
 80401b4:	4803      	ldr	r0, [pc, #12]	@ (80401c4 <frame_dummy+0x18>)
 80401b6:	f3af 8000 	nop.w
 80401ba:	bd08      	pop	{r3, pc}
 80401bc:	00000000 	.word	0x00000000
 80401c0:	20000100 	.word	0x20000100
 80401c4:	08046bd8 	.word	0x08046bd8

080401c8 <__aeabi_uldivmod>:
 80401c8:	b953      	cbnz	r3, 80401e0 <__aeabi_uldivmod+0x18>
 80401ca:	b94a      	cbnz	r2, 80401e0 <__aeabi_uldivmod+0x18>
 80401cc:	2900      	cmp	r1, #0
 80401ce:	bf08      	it	eq
 80401d0:	2800      	cmpeq	r0, #0
 80401d2:	bf1c      	itt	ne
 80401d4:	f04f 31ff 	movne.w	r1, #4294967295
 80401d8:	f04f 30ff 	movne.w	r0, #4294967295
 80401dc:	f000 b96a 	b.w	80404b4 <__aeabi_idiv0>
 80401e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80401e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80401e8:	f000 f806 	bl	80401f8 <__udivmoddi4>
 80401ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80401f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80401f4:	b004      	add	sp, #16
 80401f6:	4770      	bx	lr

080401f8 <__udivmoddi4>:
 80401f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80401fc:	9d08      	ldr	r5, [sp, #32]
 80401fe:	460c      	mov	r4, r1
 8040200:	2b00      	cmp	r3, #0
 8040202:	d14e      	bne.n	80402a2 <__udivmoddi4+0xaa>
 8040204:	4694      	mov	ip, r2
 8040206:	458c      	cmp	ip, r1
 8040208:	4686      	mov	lr, r0
 804020a:	fab2 f282 	clz	r2, r2
 804020e:	d962      	bls.n	80402d6 <__udivmoddi4+0xde>
 8040210:	b14a      	cbz	r2, 8040226 <__udivmoddi4+0x2e>
 8040212:	f1c2 0320 	rsb	r3, r2, #32
 8040216:	4091      	lsls	r1, r2
 8040218:	fa20 f303 	lsr.w	r3, r0, r3
 804021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8040220:	4319      	orrs	r1, r3
 8040222:	fa00 fe02 	lsl.w	lr, r0, r2
 8040226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804022a:	fa1f f68c 	uxth.w	r6, ip
 804022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8040232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8040236:	fb07 1114 	mls	r1, r7, r4, r1
 804023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804023e:	fb04 f106 	mul.w	r1, r4, r6
 8040242:	4299      	cmp	r1, r3
 8040244:	d90a      	bls.n	804025c <__udivmoddi4+0x64>
 8040246:	eb1c 0303 	adds.w	r3, ip, r3
 804024a:	f104 30ff 	add.w	r0, r4, #4294967295
 804024e:	f080 8112 	bcs.w	8040476 <__udivmoddi4+0x27e>
 8040252:	4299      	cmp	r1, r3
 8040254:	f240 810f 	bls.w	8040476 <__udivmoddi4+0x27e>
 8040258:	3c02      	subs	r4, #2
 804025a:	4463      	add	r3, ip
 804025c:	1a59      	subs	r1, r3, r1
 804025e:	fa1f f38e 	uxth.w	r3, lr
 8040262:	fbb1 f0f7 	udiv	r0, r1, r7
 8040266:	fb07 1110 	mls	r1, r7, r0, r1
 804026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804026e:	fb00 f606 	mul.w	r6, r0, r6
 8040272:	429e      	cmp	r6, r3
 8040274:	d90a      	bls.n	804028c <__udivmoddi4+0x94>
 8040276:	eb1c 0303 	adds.w	r3, ip, r3
 804027a:	f100 31ff 	add.w	r1, r0, #4294967295
 804027e:	f080 80fc 	bcs.w	804047a <__udivmoddi4+0x282>
 8040282:	429e      	cmp	r6, r3
 8040284:	f240 80f9 	bls.w	804047a <__udivmoddi4+0x282>
 8040288:	4463      	add	r3, ip
 804028a:	3802      	subs	r0, #2
 804028c:	1b9b      	subs	r3, r3, r6
 804028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8040292:	2100      	movs	r1, #0
 8040294:	b11d      	cbz	r5, 804029e <__udivmoddi4+0xa6>
 8040296:	40d3      	lsrs	r3, r2
 8040298:	2200      	movs	r2, #0
 804029a:	e9c5 3200 	strd	r3, r2, [r5]
 804029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402a2:	428b      	cmp	r3, r1
 80402a4:	d905      	bls.n	80402b2 <__udivmoddi4+0xba>
 80402a6:	b10d      	cbz	r5, 80402ac <__udivmoddi4+0xb4>
 80402a8:	e9c5 0100 	strd	r0, r1, [r5]
 80402ac:	2100      	movs	r1, #0
 80402ae:	4608      	mov	r0, r1
 80402b0:	e7f5      	b.n	804029e <__udivmoddi4+0xa6>
 80402b2:	fab3 f183 	clz	r1, r3
 80402b6:	2900      	cmp	r1, #0
 80402b8:	d146      	bne.n	8040348 <__udivmoddi4+0x150>
 80402ba:	42a3      	cmp	r3, r4
 80402bc:	d302      	bcc.n	80402c4 <__udivmoddi4+0xcc>
 80402be:	4290      	cmp	r0, r2
 80402c0:	f0c0 80f0 	bcc.w	80404a4 <__udivmoddi4+0x2ac>
 80402c4:	1a86      	subs	r6, r0, r2
 80402c6:	eb64 0303 	sbc.w	r3, r4, r3
 80402ca:	2001      	movs	r0, #1
 80402cc:	2d00      	cmp	r5, #0
 80402ce:	d0e6      	beq.n	804029e <__udivmoddi4+0xa6>
 80402d0:	e9c5 6300 	strd	r6, r3, [r5]
 80402d4:	e7e3      	b.n	804029e <__udivmoddi4+0xa6>
 80402d6:	2a00      	cmp	r2, #0
 80402d8:	f040 8090 	bne.w	80403fc <__udivmoddi4+0x204>
 80402dc:	eba1 040c 	sub.w	r4, r1, ip
 80402e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402e4:	fa1f f78c 	uxth.w	r7, ip
 80402e8:	2101      	movs	r1, #1
 80402ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80402ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80402f2:	fb08 4416 	mls	r4, r8, r6, r4
 80402f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80402fa:	fb07 f006 	mul.w	r0, r7, r6
 80402fe:	4298      	cmp	r0, r3
 8040300:	d908      	bls.n	8040314 <__udivmoddi4+0x11c>
 8040302:	eb1c 0303 	adds.w	r3, ip, r3
 8040306:	f106 34ff 	add.w	r4, r6, #4294967295
 804030a:	d202      	bcs.n	8040312 <__udivmoddi4+0x11a>
 804030c:	4298      	cmp	r0, r3
 804030e:	f200 80cd 	bhi.w	80404ac <__udivmoddi4+0x2b4>
 8040312:	4626      	mov	r6, r4
 8040314:	1a1c      	subs	r4, r3, r0
 8040316:	fa1f f38e 	uxth.w	r3, lr
 804031a:	fbb4 f0f8 	udiv	r0, r4, r8
 804031e:	fb08 4410 	mls	r4, r8, r0, r4
 8040322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8040326:	fb00 f707 	mul.w	r7, r0, r7
 804032a:	429f      	cmp	r7, r3
 804032c:	d908      	bls.n	8040340 <__udivmoddi4+0x148>
 804032e:	eb1c 0303 	adds.w	r3, ip, r3
 8040332:	f100 34ff 	add.w	r4, r0, #4294967295
 8040336:	d202      	bcs.n	804033e <__udivmoddi4+0x146>
 8040338:	429f      	cmp	r7, r3
 804033a:	f200 80b0 	bhi.w	804049e <__udivmoddi4+0x2a6>
 804033e:	4620      	mov	r0, r4
 8040340:	1bdb      	subs	r3, r3, r7
 8040342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040346:	e7a5      	b.n	8040294 <__udivmoddi4+0x9c>
 8040348:	f1c1 0620 	rsb	r6, r1, #32
 804034c:	408b      	lsls	r3, r1
 804034e:	fa22 f706 	lsr.w	r7, r2, r6
 8040352:	431f      	orrs	r7, r3
 8040354:	fa20 fc06 	lsr.w	ip, r0, r6
 8040358:	fa04 f301 	lsl.w	r3, r4, r1
 804035c:	ea43 030c 	orr.w	r3, r3, ip
 8040360:	40f4      	lsrs	r4, r6
 8040362:	fa00 f801 	lsl.w	r8, r0, r1
 8040366:	0c38      	lsrs	r0, r7, #16
 8040368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 804036c:	fbb4 fef0 	udiv	lr, r4, r0
 8040370:	fa1f fc87 	uxth.w	ip, r7
 8040374:	fb00 441e 	mls	r4, r0, lr, r4
 8040378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 804037c:	fb0e f90c 	mul.w	r9, lr, ip
 8040380:	45a1      	cmp	r9, r4
 8040382:	fa02 f201 	lsl.w	r2, r2, r1
 8040386:	d90a      	bls.n	804039e <__udivmoddi4+0x1a6>
 8040388:	193c      	adds	r4, r7, r4
 804038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 804038e:	f080 8084 	bcs.w	804049a <__udivmoddi4+0x2a2>
 8040392:	45a1      	cmp	r9, r4
 8040394:	f240 8081 	bls.w	804049a <__udivmoddi4+0x2a2>
 8040398:	f1ae 0e02 	sub.w	lr, lr, #2
 804039c:	443c      	add	r4, r7
 804039e:	eba4 0409 	sub.w	r4, r4, r9
 80403a2:	fa1f f983 	uxth.w	r9, r3
 80403a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80403aa:	fb00 4413 	mls	r4, r0, r3, r4
 80403ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80403b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80403b6:	45a4      	cmp	ip, r4
 80403b8:	d907      	bls.n	80403ca <__udivmoddi4+0x1d2>
 80403ba:	193c      	adds	r4, r7, r4
 80403bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80403c0:	d267      	bcs.n	8040492 <__udivmoddi4+0x29a>
 80403c2:	45a4      	cmp	ip, r4
 80403c4:	d965      	bls.n	8040492 <__udivmoddi4+0x29a>
 80403c6:	3b02      	subs	r3, #2
 80403c8:	443c      	add	r4, r7
 80403ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80403ce:	fba0 9302 	umull	r9, r3, r0, r2
 80403d2:	eba4 040c 	sub.w	r4, r4, ip
 80403d6:	429c      	cmp	r4, r3
 80403d8:	46ce      	mov	lr, r9
 80403da:	469c      	mov	ip, r3
 80403dc:	d351      	bcc.n	8040482 <__udivmoddi4+0x28a>
 80403de:	d04e      	beq.n	804047e <__udivmoddi4+0x286>
 80403e0:	b155      	cbz	r5, 80403f8 <__udivmoddi4+0x200>
 80403e2:	ebb8 030e 	subs.w	r3, r8, lr
 80403e6:	eb64 040c 	sbc.w	r4, r4, ip
 80403ea:	fa04 f606 	lsl.w	r6, r4, r6
 80403ee:	40cb      	lsrs	r3, r1
 80403f0:	431e      	orrs	r6, r3
 80403f2:	40cc      	lsrs	r4, r1
 80403f4:	e9c5 6400 	strd	r6, r4, [r5]
 80403f8:	2100      	movs	r1, #0
 80403fa:	e750      	b.n	804029e <__udivmoddi4+0xa6>
 80403fc:	f1c2 0320 	rsb	r3, r2, #32
 8040400:	fa20 f103 	lsr.w	r1, r0, r3
 8040404:	fa0c fc02 	lsl.w	ip, ip, r2
 8040408:	fa24 f303 	lsr.w	r3, r4, r3
 804040c:	4094      	lsls	r4, r2
 804040e:	430c      	orrs	r4, r1
 8040410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040414:	fa00 fe02 	lsl.w	lr, r0, r2
 8040418:	fa1f f78c 	uxth.w	r7, ip
 804041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8040420:	fb08 3110 	mls	r1, r8, r0, r3
 8040424:	0c23      	lsrs	r3, r4, #16
 8040426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804042a:	fb00 f107 	mul.w	r1, r0, r7
 804042e:	4299      	cmp	r1, r3
 8040430:	d908      	bls.n	8040444 <__udivmoddi4+0x24c>
 8040432:	eb1c 0303 	adds.w	r3, ip, r3
 8040436:	f100 36ff 	add.w	r6, r0, #4294967295
 804043a:	d22c      	bcs.n	8040496 <__udivmoddi4+0x29e>
 804043c:	4299      	cmp	r1, r3
 804043e:	d92a      	bls.n	8040496 <__udivmoddi4+0x29e>
 8040440:	3802      	subs	r0, #2
 8040442:	4463      	add	r3, ip
 8040444:	1a5b      	subs	r3, r3, r1
 8040446:	b2a4      	uxth	r4, r4
 8040448:	fbb3 f1f8 	udiv	r1, r3, r8
 804044c:	fb08 3311 	mls	r3, r8, r1, r3
 8040450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040454:	fb01 f307 	mul.w	r3, r1, r7
 8040458:	42a3      	cmp	r3, r4
 804045a:	d908      	bls.n	804046e <__udivmoddi4+0x276>
 804045c:	eb1c 0404 	adds.w	r4, ip, r4
 8040460:	f101 36ff 	add.w	r6, r1, #4294967295
 8040464:	d213      	bcs.n	804048e <__udivmoddi4+0x296>
 8040466:	42a3      	cmp	r3, r4
 8040468:	d911      	bls.n	804048e <__udivmoddi4+0x296>
 804046a:	3902      	subs	r1, #2
 804046c:	4464      	add	r4, ip
 804046e:	1ae4      	subs	r4, r4, r3
 8040470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040474:	e739      	b.n	80402ea <__udivmoddi4+0xf2>
 8040476:	4604      	mov	r4, r0
 8040478:	e6f0      	b.n	804025c <__udivmoddi4+0x64>
 804047a:	4608      	mov	r0, r1
 804047c:	e706      	b.n	804028c <__udivmoddi4+0x94>
 804047e:	45c8      	cmp	r8, r9
 8040480:	d2ae      	bcs.n	80403e0 <__udivmoddi4+0x1e8>
 8040482:	ebb9 0e02 	subs.w	lr, r9, r2
 8040486:	eb63 0c07 	sbc.w	ip, r3, r7
 804048a:	3801      	subs	r0, #1
 804048c:	e7a8      	b.n	80403e0 <__udivmoddi4+0x1e8>
 804048e:	4631      	mov	r1, r6
 8040490:	e7ed      	b.n	804046e <__udivmoddi4+0x276>
 8040492:	4603      	mov	r3, r0
 8040494:	e799      	b.n	80403ca <__udivmoddi4+0x1d2>
 8040496:	4630      	mov	r0, r6
 8040498:	e7d4      	b.n	8040444 <__udivmoddi4+0x24c>
 804049a:	46d6      	mov	lr, sl
 804049c:	e77f      	b.n	804039e <__udivmoddi4+0x1a6>
 804049e:	4463      	add	r3, ip
 80404a0:	3802      	subs	r0, #2
 80404a2:	e74d      	b.n	8040340 <__udivmoddi4+0x148>
 80404a4:	4606      	mov	r6, r0
 80404a6:	4623      	mov	r3, r4
 80404a8:	4608      	mov	r0, r1
 80404aa:	e70f      	b.n	80402cc <__udivmoddi4+0xd4>
 80404ac:	3e02      	subs	r6, #2
 80404ae:	4463      	add	r3, ip
 80404b0:	e730      	b.n	8040314 <__udivmoddi4+0x11c>
 80404b2:	bf00      	nop

080404b4 <__aeabi_idiv0>:
 80404b4:	4770      	bx	lr
 80404b6:	bf00      	nop

080404b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80404b8:	b580      	push	{r7, lr}
 80404ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80404bc:	f000 f982 	bl	80407c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80404c0:	f000 f81c 	bl	80404fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80404c4:	f000 f884 	bl	80405d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80404c8:	f005 fe76 	bl	80461b8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET );
 80404cc:	2201      	movs	r2, #1
 80404ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80404d2:	4809      	ldr	r0, [pc, #36]	@ (80404f8 <main+0x40>)
 80404d4:	f000 fcba 	bl	8040e4c <HAL_GPIO_WritePin>
	 HAL_Delay(1000);    //1 Sec delay
 80404d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80404dc:	f000 f9e4 	bl	80408a8 <HAL_Delay>
	 HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET );
 80404e0:	2200      	movs	r2, #0
 80404e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80404e6:	4804      	ldr	r0, [pc, #16]	@ (80404f8 <main+0x40>)
 80404e8:	f000 fcb0 	bl	8040e4c <HAL_GPIO_WritePin>
	 HAL_Delay(1000);  //1 Sec delay
 80404ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80404f0:	f000 f9da 	bl	80408a8 <HAL_Delay>
	 HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET );
 80404f4:	bf00      	nop
 80404f6:	e7e9      	b.n	80404cc <main+0x14>
 80404f8:	40020c00 	.word	0x40020c00

080404fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80404fc:	b580      	push	{r7, lr}
 80404fe:	b094      	sub	sp, #80	@ 0x50
 8040500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040502:	f107 0320 	add.w	r3, r7, #32
 8040506:	2230      	movs	r2, #48	@ 0x30
 8040508:	2100      	movs	r1, #0
 804050a:	4618      	mov	r0, r3
 804050c:	f006 fb38 	bl	8046b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040510:	f107 030c 	add.w	r3, r7, #12
 8040514:	2200      	movs	r2, #0
 8040516:	601a      	str	r2, [r3, #0]
 8040518:	605a      	str	r2, [r3, #4]
 804051a:	609a      	str	r2, [r3, #8]
 804051c:	60da      	str	r2, [r3, #12]
 804051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040520:	2300      	movs	r3, #0
 8040522:	60bb      	str	r3, [r7, #8]
 8040524:	4b28      	ldr	r3, [pc, #160]	@ (80405c8 <SystemClock_Config+0xcc>)
 8040526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040528:	4a27      	ldr	r2, [pc, #156]	@ (80405c8 <SystemClock_Config+0xcc>)
 804052a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804052e:	6413      	str	r3, [r2, #64]	@ 0x40
 8040530:	4b25      	ldr	r3, [pc, #148]	@ (80405c8 <SystemClock_Config+0xcc>)
 8040532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040538:	60bb      	str	r3, [r7, #8]
 804053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804053c:	2300      	movs	r3, #0
 804053e:	607b      	str	r3, [r7, #4]
 8040540:	4b22      	ldr	r3, [pc, #136]	@ (80405cc <SystemClock_Config+0xd0>)
 8040542:	681b      	ldr	r3, [r3, #0]
 8040544:	4a21      	ldr	r2, [pc, #132]	@ (80405cc <SystemClock_Config+0xd0>)
 8040546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 804054a:	6013      	str	r3, [r2, #0]
 804054c:	4b1f      	ldr	r3, [pc, #124]	@ (80405cc <SystemClock_Config+0xd0>)
 804054e:	681b      	ldr	r3, [r3, #0]
 8040550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040554:	607b      	str	r3, [r7, #4]
 8040556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8040558:	2301      	movs	r3, #1
 804055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804055c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8040560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040562:	2302      	movs	r3, #2
 8040564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 804056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 804056c:	2304      	movs	r3, #4
 804056e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8040570:	23a8      	movs	r3, #168	@ 0xa8
 8040572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8040574:	2302      	movs	r3, #2
 8040576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8040578:	2307      	movs	r3, #7
 804057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804057c:	f107 0320 	add.w	r3, r7, #32
 8040580:	4618      	mov	r0, r3
 8040582:	f001 fecf 	bl	8042324 <HAL_RCC_OscConfig>
 8040586:	4603      	mov	r3, r0
 8040588:	2b00      	cmp	r3, #0
 804058a:	d001      	beq.n	8040590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 804058c:	f000 f872 	bl	8040674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040590:	230f      	movs	r3, #15
 8040592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040594:	2302      	movs	r3, #2
 8040596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040598:	2300      	movs	r3, #0
 804059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 804059c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80405a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80405a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80405a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80405a8:	f107 030c 	add.w	r3, r7, #12
 80405ac:	2105      	movs	r1, #5
 80405ae:	4618      	mov	r0, r3
 80405b0:	f002 f930 	bl	8042814 <HAL_RCC_ClockConfig>
 80405b4:	4603      	mov	r3, r0
 80405b6:	2b00      	cmp	r3, #0
 80405b8:	d001      	beq.n	80405be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80405ba:	f000 f85b 	bl	8040674 <Error_Handler>
  }
}
 80405be:	bf00      	nop
 80405c0:	3750      	adds	r7, #80	@ 0x50
 80405c2:	46bd      	mov	sp, r7
 80405c4:	bd80      	pop	{r7, pc}
 80405c6:	bf00      	nop
 80405c8:	40023800 	.word	0x40023800
 80405cc:	40007000 	.word	0x40007000

080405d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80405d0:	b580      	push	{r7, lr}
 80405d2:	b088      	sub	sp, #32
 80405d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80405d6:	f107 030c 	add.w	r3, r7, #12
 80405da:	2200      	movs	r2, #0
 80405dc:	601a      	str	r2, [r3, #0]
 80405de:	605a      	str	r2, [r3, #4]
 80405e0:	609a      	str	r2, [r3, #8]
 80405e2:	60da      	str	r2, [r3, #12]
 80405e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80405e6:	2300      	movs	r3, #0
 80405e8:	60bb      	str	r3, [r7, #8]
 80405ea:	4b20      	ldr	r3, [pc, #128]	@ (804066c <MX_GPIO_Init+0x9c>)
 80405ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80405ee:	4a1f      	ldr	r2, [pc, #124]	@ (804066c <MX_GPIO_Init+0x9c>)
 80405f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80405f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80405f6:	4b1d      	ldr	r3, [pc, #116]	@ (804066c <MX_GPIO_Init+0x9c>)
 80405f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80405fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80405fe:	60bb      	str	r3, [r7, #8]
 8040600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040602:	2300      	movs	r3, #0
 8040604:	607b      	str	r3, [r7, #4]
 8040606:	4b19      	ldr	r3, [pc, #100]	@ (804066c <MX_GPIO_Init+0x9c>)
 8040608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804060a:	4a18      	ldr	r2, [pc, #96]	@ (804066c <MX_GPIO_Init+0x9c>)
 804060c:	f043 0308 	orr.w	r3, r3, #8
 8040610:	6313      	str	r3, [r2, #48]	@ 0x30
 8040612:	4b16      	ldr	r3, [pc, #88]	@ (804066c <MX_GPIO_Init+0x9c>)
 8040614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040616:	f003 0308 	and.w	r3, r3, #8
 804061a:	607b      	str	r3, [r7, #4]
 804061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804061e:	2300      	movs	r3, #0
 8040620:	603b      	str	r3, [r7, #0]
 8040622:	4b12      	ldr	r3, [pc, #72]	@ (804066c <MX_GPIO_Init+0x9c>)
 8040624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040626:	4a11      	ldr	r2, [pc, #68]	@ (804066c <MX_GPIO_Init+0x9c>)
 8040628:	f043 0301 	orr.w	r3, r3, #1
 804062c:	6313      	str	r3, [r2, #48]	@ 0x30
 804062e:	4b0f      	ldr	r3, [pc, #60]	@ (804066c <MX_GPIO_Init+0x9c>)
 8040630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040632:	f003 0301 	and.w	r3, r3, #1
 8040636:	603b      	str	r3, [r7, #0]
 8040638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 804063a:	2200      	movs	r2, #0
 804063c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8040640:	480b      	ldr	r0, [pc, #44]	@ (8040670 <MX_GPIO_Init+0xa0>)
 8040642:	f000 fc03 	bl	8040e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8040646:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 804064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804064c:	2301      	movs	r3, #1
 804064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040650:	2300      	movs	r3, #0
 8040652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040654:	2300      	movs	r3, #0
 8040656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040658:	f107 030c 	add.w	r3, r7, #12
 804065c:	4619      	mov	r1, r3
 804065e:	4804      	ldr	r0, [pc, #16]	@ (8040670 <MX_GPIO_Init+0xa0>)
 8040660:	f000 fa58 	bl	8040b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040664:	bf00      	nop
 8040666:	3720      	adds	r7, #32
 8040668:	46bd      	mov	sp, r7
 804066a:	bd80      	pop	{r7, pc}
 804066c:	40023800 	.word	0x40023800
 8040670:	40020c00 	.word	0x40020c00

08040674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040674:	b480      	push	{r7}
 8040676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040678:	b672      	cpsid	i
}
 804067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 804067c:	bf00      	nop
 804067e:	e7fd      	b.n	804067c <Error_Handler+0x8>

08040680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040680:	b480      	push	{r7}
 8040682:	b083      	sub	sp, #12
 8040684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040686:	2300      	movs	r3, #0
 8040688:	607b      	str	r3, [r7, #4]
 804068a:	4b10      	ldr	r3, [pc, #64]	@ (80406cc <HAL_MspInit+0x4c>)
 804068c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804068e:	4a0f      	ldr	r2, [pc, #60]	@ (80406cc <HAL_MspInit+0x4c>)
 8040690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040694:	6453      	str	r3, [r2, #68]	@ 0x44
 8040696:	4b0d      	ldr	r3, [pc, #52]	@ (80406cc <HAL_MspInit+0x4c>)
 8040698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804069a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 804069e:	607b      	str	r3, [r7, #4]
 80406a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80406a2:	2300      	movs	r3, #0
 80406a4:	603b      	str	r3, [r7, #0]
 80406a6:	4b09      	ldr	r3, [pc, #36]	@ (80406cc <HAL_MspInit+0x4c>)
 80406a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80406aa:	4a08      	ldr	r2, [pc, #32]	@ (80406cc <HAL_MspInit+0x4c>)
 80406ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80406b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80406b2:	4b06      	ldr	r3, [pc, #24]	@ (80406cc <HAL_MspInit+0x4c>)
 80406b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80406b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80406ba:	603b      	str	r3, [r7, #0]
 80406bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80406be:	bf00      	nop
 80406c0:	370c      	adds	r7, #12
 80406c2:	46bd      	mov	sp, r7
 80406c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406c8:	4770      	bx	lr
 80406ca:	bf00      	nop
 80406cc:	40023800 	.word	0x40023800

080406d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80406d0:	b480      	push	{r7}
 80406d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80406d4:	bf00      	nop
 80406d6:	e7fd      	b.n	80406d4 <NMI_Handler+0x4>

080406d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80406d8:	b480      	push	{r7}
 80406da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80406dc:	bf00      	nop
 80406de:	e7fd      	b.n	80406dc <HardFault_Handler+0x4>

080406e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80406e0:	b480      	push	{r7}
 80406e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80406e4:	bf00      	nop
 80406e6:	e7fd      	b.n	80406e4 <MemManage_Handler+0x4>

080406e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80406e8:	b480      	push	{r7}
 80406ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80406ec:	bf00      	nop
 80406ee:	e7fd      	b.n	80406ec <BusFault_Handler+0x4>

080406f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80406f0:	b480      	push	{r7}
 80406f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80406f4:	bf00      	nop
 80406f6:	e7fd      	b.n	80406f4 <UsageFault_Handler+0x4>

080406f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80406f8:	b480      	push	{r7}
 80406fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80406fc:	bf00      	nop
 80406fe:	46bd      	mov	sp, r7
 8040700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040704:	4770      	bx	lr

08040706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040706:	b480      	push	{r7}
 8040708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804070a:	bf00      	nop
 804070c:	46bd      	mov	sp, r7
 804070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040712:	4770      	bx	lr

08040714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040714:	b480      	push	{r7}
 8040716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040718:	bf00      	nop
 804071a:	46bd      	mov	sp, r7
 804071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040720:	4770      	bx	lr

08040722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040722:	b580      	push	{r7, lr}
 8040724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040726:	f000 f89f 	bl	8040868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804072a:	bf00      	nop
 804072c:	bd80      	pop	{r7, pc}
	...

08040730 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8040730:	b580      	push	{r7, lr}
 8040732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8040734:	4802      	ldr	r0, [pc, #8]	@ (8040740 <OTG_FS_IRQHandler+0x10>)
 8040736:	f000 fce6 	bl	8041106 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 804073a:	bf00      	nop
 804073c:	bd80      	pop	{r7, pc}
 804073e:	bf00      	nop
 8040740:	200015fc 	.word	0x200015fc

08040744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040744:	b480      	push	{r7}
 8040746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040748:	4b07      	ldr	r3, [pc, #28]	@ (8040768 <SystemInit+0x24>)
 804074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804074e:	4a06      	ldr	r2, [pc, #24]	@ (8040768 <SystemInit+0x24>)
 8040750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8040754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040758:	4b03      	ldr	r3, [pc, #12]	@ (8040768 <SystemInit+0x24>)
 804075a:	4a04      	ldr	r2, [pc, #16]	@ (804076c <SystemInit+0x28>)
 804075c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 804075e:	bf00      	nop
 8040760:	46bd      	mov	sp, r7
 8040762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040766:	4770      	bx	lr
 8040768:	e000ed00 	.word	0xe000ed00
 804076c:	08040000 	.word	0x08040000

08040770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8040770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80407a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8040774:	f7ff ffe6 	bl	8040744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040778:	480c      	ldr	r0, [pc, #48]	@ (80407ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 804077a:	490d      	ldr	r1, [pc, #52]	@ (80407b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 804077c:	4a0d      	ldr	r2, [pc, #52]	@ (80407b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 804077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040780:	e002      	b.n	8040788 <LoopCopyDataInit>

08040782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040786:	3304      	adds	r3, #4

08040788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 804078c:	d3f9      	bcc.n	8040782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804078e:	4a0a      	ldr	r2, [pc, #40]	@ (80407b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040790:	4c0a      	ldr	r4, [pc, #40]	@ (80407bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8040792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040794:	e001      	b.n	804079a <LoopFillZerobss>

08040796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040798:	3204      	adds	r2, #4

0804079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 804079c:	d3fb      	bcc.n	8040796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 804079e:	f006 f9f7 	bl	8046b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80407a2:	f7ff fe89 	bl	80404b8 <main>
  bx  lr    
 80407a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80407a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80407ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80407b0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80407b4:	08046c58 	.word	0x08046c58
  ldr r2, =_sbss
 80407b8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80407bc:	20001d00 	.word	0x20001d00

080407c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80407c0:	e7fe      	b.n	80407c0 <ADC_IRQHandler>
	...

080407c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80407c4:	b580      	push	{r7, lr}
 80407c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80407c8:	4b0e      	ldr	r3, [pc, #56]	@ (8040804 <HAL_Init+0x40>)
 80407ca:	681b      	ldr	r3, [r3, #0]
 80407cc:	4a0d      	ldr	r2, [pc, #52]	@ (8040804 <HAL_Init+0x40>)
 80407ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80407d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80407d4:	4b0b      	ldr	r3, [pc, #44]	@ (8040804 <HAL_Init+0x40>)
 80407d6:	681b      	ldr	r3, [r3, #0]
 80407d8:	4a0a      	ldr	r2, [pc, #40]	@ (8040804 <HAL_Init+0x40>)
 80407da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80407de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80407e0:	4b08      	ldr	r3, [pc, #32]	@ (8040804 <HAL_Init+0x40>)
 80407e2:	681b      	ldr	r3, [r3, #0]
 80407e4:	4a07      	ldr	r2, [pc, #28]	@ (8040804 <HAL_Init+0x40>)
 80407e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80407ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80407ec:	2003      	movs	r0, #3
 80407ee:	f000 f94f 	bl	8040a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80407f2:	200f      	movs	r0, #15
 80407f4:	f000 f808 	bl	8040808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80407f8:	f7ff ff42 	bl	8040680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80407fc:	2300      	movs	r3, #0
}
 80407fe:	4618      	mov	r0, r3
 8040800:	bd80      	pop	{r7, pc}
 8040802:	bf00      	nop
 8040804:	40023c00 	.word	0x40023c00

08040808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040808:	b580      	push	{r7, lr}
 804080a:	b082      	sub	sp, #8
 804080c:	af00      	add	r7, sp, #0
 804080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040810:	4b12      	ldr	r3, [pc, #72]	@ (804085c <HAL_InitTick+0x54>)
 8040812:	681a      	ldr	r2, [r3, #0]
 8040814:	4b12      	ldr	r3, [pc, #72]	@ (8040860 <HAL_InitTick+0x58>)
 8040816:	781b      	ldrb	r3, [r3, #0]
 8040818:	4619      	mov	r1, r3
 804081a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 804081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8040822:	fbb2 f3f3 	udiv	r3, r2, r3
 8040826:	4618      	mov	r0, r3
 8040828:	f000 f967 	bl	8040afa <HAL_SYSTICK_Config>
 804082c:	4603      	mov	r3, r0
 804082e:	2b00      	cmp	r3, #0
 8040830:	d001      	beq.n	8040836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040832:	2301      	movs	r3, #1
 8040834:	e00e      	b.n	8040854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040836:	687b      	ldr	r3, [r7, #4]
 8040838:	2b0f      	cmp	r3, #15
 804083a:	d80a      	bhi.n	8040852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 804083c:	2200      	movs	r2, #0
 804083e:	6879      	ldr	r1, [r7, #4]
 8040840:	f04f 30ff 	mov.w	r0, #4294967295
 8040844:	f000 f92f 	bl	8040aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040848:	4a06      	ldr	r2, [pc, #24]	@ (8040864 <HAL_InitTick+0x5c>)
 804084a:	687b      	ldr	r3, [r7, #4]
 804084c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 804084e:	2300      	movs	r3, #0
 8040850:	e000      	b.n	8040854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040852:	2301      	movs	r3, #1
}
 8040854:	4618      	mov	r0, r3
 8040856:	3708      	adds	r7, #8
 8040858:	46bd      	mov	sp, r7
 804085a:	bd80      	pop	{r7, pc}
 804085c:	20000000 	.word	0x20000000
 8040860:	20000008 	.word	0x20000008
 8040864:	20000004 	.word	0x20000004

08040868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040868:	b480      	push	{r7}
 804086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 804086c:	4b06      	ldr	r3, [pc, #24]	@ (8040888 <HAL_IncTick+0x20>)
 804086e:	781b      	ldrb	r3, [r3, #0]
 8040870:	461a      	mov	r2, r3
 8040872:	4b06      	ldr	r3, [pc, #24]	@ (804088c <HAL_IncTick+0x24>)
 8040874:	681b      	ldr	r3, [r3, #0]
 8040876:	4413      	add	r3, r2
 8040878:	4a04      	ldr	r2, [pc, #16]	@ (804088c <HAL_IncTick+0x24>)
 804087a:	6013      	str	r3, [r2, #0]
}
 804087c:	bf00      	nop
 804087e:	46bd      	mov	sp, r7
 8040880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040884:	4770      	bx	lr
 8040886:	bf00      	nop
 8040888:	20000008 	.word	0x20000008
 804088c:	20000118 	.word	0x20000118

08040890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040890:	b480      	push	{r7}
 8040892:	af00      	add	r7, sp, #0
  return uwTick;
 8040894:	4b03      	ldr	r3, [pc, #12]	@ (80408a4 <HAL_GetTick+0x14>)
 8040896:	681b      	ldr	r3, [r3, #0]
}
 8040898:	4618      	mov	r0, r3
 804089a:	46bd      	mov	sp, r7
 804089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408a0:	4770      	bx	lr
 80408a2:	bf00      	nop
 80408a4:	20000118 	.word	0x20000118

080408a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80408a8:	b580      	push	{r7, lr}
 80408aa:	b084      	sub	sp, #16
 80408ac:	af00      	add	r7, sp, #0
 80408ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80408b0:	f7ff ffee 	bl	8040890 <HAL_GetTick>
 80408b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80408b6:	687b      	ldr	r3, [r7, #4]
 80408b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80408ba:	68fb      	ldr	r3, [r7, #12]
 80408bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80408c0:	d005      	beq.n	80408ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80408c2:	4b0a      	ldr	r3, [pc, #40]	@ (80408ec <HAL_Delay+0x44>)
 80408c4:	781b      	ldrb	r3, [r3, #0]
 80408c6:	461a      	mov	r2, r3
 80408c8:	68fb      	ldr	r3, [r7, #12]
 80408ca:	4413      	add	r3, r2
 80408cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80408ce:	bf00      	nop
 80408d0:	f7ff ffde 	bl	8040890 <HAL_GetTick>
 80408d4:	4602      	mov	r2, r0
 80408d6:	68bb      	ldr	r3, [r7, #8]
 80408d8:	1ad3      	subs	r3, r2, r3
 80408da:	68fa      	ldr	r2, [r7, #12]
 80408dc:	429a      	cmp	r2, r3
 80408de:	d8f7      	bhi.n	80408d0 <HAL_Delay+0x28>
  {
  }
}
 80408e0:	bf00      	nop
 80408e2:	bf00      	nop
 80408e4:	3710      	adds	r7, #16
 80408e6:	46bd      	mov	sp, r7
 80408e8:	bd80      	pop	{r7, pc}
 80408ea:	bf00      	nop
 80408ec:	20000008 	.word	0x20000008

080408f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80408f0:	b480      	push	{r7}
 80408f2:	b085      	sub	sp, #20
 80408f4:	af00      	add	r7, sp, #0
 80408f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80408f8:	687b      	ldr	r3, [r7, #4]
 80408fa:	f003 0307 	and.w	r3, r3, #7
 80408fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040900:	4b0c      	ldr	r3, [pc, #48]	@ (8040934 <__NVIC_SetPriorityGrouping+0x44>)
 8040902:	68db      	ldr	r3, [r3, #12]
 8040904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040906:	68ba      	ldr	r2, [r7, #8]
 8040908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 804090c:	4013      	ands	r3, r2
 804090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040910:	68fb      	ldr	r3, [r7, #12]
 8040912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040914:	68bb      	ldr	r3, [r7, #8]
 8040916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 804091c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8040920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040922:	4a04      	ldr	r2, [pc, #16]	@ (8040934 <__NVIC_SetPriorityGrouping+0x44>)
 8040924:	68bb      	ldr	r3, [r7, #8]
 8040926:	60d3      	str	r3, [r2, #12]
}
 8040928:	bf00      	nop
 804092a:	3714      	adds	r7, #20
 804092c:	46bd      	mov	sp, r7
 804092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040932:	4770      	bx	lr
 8040934:	e000ed00 	.word	0xe000ed00

08040938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040938:	b480      	push	{r7}
 804093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804093c:	4b04      	ldr	r3, [pc, #16]	@ (8040950 <__NVIC_GetPriorityGrouping+0x18>)
 804093e:	68db      	ldr	r3, [r3, #12]
 8040940:	0a1b      	lsrs	r3, r3, #8
 8040942:	f003 0307 	and.w	r3, r3, #7
}
 8040946:	4618      	mov	r0, r3
 8040948:	46bd      	mov	sp, r7
 804094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804094e:	4770      	bx	lr
 8040950:	e000ed00 	.word	0xe000ed00

08040954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040954:	b480      	push	{r7}
 8040956:	b083      	sub	sp, #12
 8040958:	af00      	add	r7, sp, #0
 804095a:	4603      	mov	r3, r0
 804095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040962:	2b00      	cmp	r3, #0
 8040964:	db0b      	blt.n	804097e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040966:	79fb      	ldrb	r3, [r7, #7]
 8040968:	f003 021f 	and.w	r2, r3, #31
 804096c:	4907      	ldr	r1, [pc, #28]	@ (804098c <__NVIC_EnableIRQ+0x38>)
 804096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040972:	095b      	lsrs	r3, r3, #5
 8040974:	2001      	movs	r0, #1
 8040976:	fa00 f202 	lsl.w	r2, r0, r2
 804097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 804097e:	bf00      	nop
 8040980:	370c      	adds	r7, #12
 8040982:	46bd      	mov	sp, r7
 8040984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040988:	4770      	bx	lr
 804098a:	bf00      	nop
 804098c:	e000e100 	.word	0xe000e100

08040990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040990:	b480      	push	{r7}
 8040992:	b083      	sub	sp, #12
 8040994:	af00      	add	r7, sp, #0
 8040996:	4603      	mov	r3, r0
 8040998:	6039      	str	r1, [r7, #0]
 804099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80409a0:	2b00      	cmp	r3, #0
 80409a2:	db0a      	blt.n	80409ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80409a4:	683b      	ldr	r3, [r7, #0]
 80409a6:	b2da      	uxtb	r2, r3
 80409a8:	490c      	ldr	r1, [pc, #48]	@ (80409dc <__NVIC_SetPriority+0x4c>)
 80409aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80409ae:	0112      	lsls	r2, r2, #4
 80409b0:	b2d2      	uxtb	r2, r2
 80409b2:	440b      	add	r3, r1
 80409b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80409b8:	e00a      	b.n	80409d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80409ba:	683b      	ldr	r3, [r7, #0]
 80409bc:	b2da      	uxtb	r2, r3
 80409be:	4908      	ldr	r1, [pc, #32]	@ (80409e0 <__NVIC_SetPriority+0x50>)
 80409c0:	79fb      	ldrb	r3, [r7, #7]
 80409c2:	f003 030f 	and.w	r3, r3, #15
 80409c6:	3b04      	subs	r3, #4
 80409c8:	0112      	lsls	r2, r2, #4
 80409ca:	b2d2      	uxtb	r2, r2
 80409cc:	440b      	add	r3, r1
 80409ce:	761a      	strb	r2, [r3, #24]
}
 80409d0:	bf00      	nop
 80409d2:	370c      	adds	r7, #12
 80409d4:	46bd      	mov	sp, r7
 80409d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409da:	4770      	bx	lr
 80409dc:	e000e100 	.word	0xe000e100
 80409e0:	e000ed00 	.word	0xe000ed00

080409e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80409e4:	b480      	push	{r7}
 80409e6:	b089      	sub	sp, #36	@ 0x24
 80409e8:	af00      	add	r7, sp, #0
 80409ea:	60f8      	str	r0, [r7, #12]
 80409ec:	60b9      	str	r1, [r7, #8]
 80409ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80409f0:	68fb      	ldr	r3, [r7, #12]
 80409f2:	f003 0307 	and.w	r3, r3, #7
 80409f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80409f8:	69fb      	ldr	r3, [r7, #28]
 80409fa:	f1c3 0307 	rsb	r3, r3, #7
 80409fe:	2b04      	cmp	r3, #4
 8040a00:	bf28      	it	cs
 8040a02:	2304      	movcs	r3, #4
 8040a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040a06:	69fb      	ldr	r3, [r7, #28]
 8040a08:	3304      	adds	r3, #4
 8040a0a:	2b06      	cmp	r3, #6
 8040a0c:	d902      	bls.n	8040a14 <NVIC_EncodePriority+0x30>
 8040a0e:	69fb      	ldr	r3, [r7, #28]
 8040a10:	3b03      	subs	r3, #3
 8040a12:	e000      	b.n	8040a16 <NVIC_EncodePriority+0x32>
 8040a14:	2300      	movs	r3, #0
 8040a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040a18:	f04f 32ff 	mov.w	r2, #4294967295
 8040a1c:	69bb      	ldr	r3, [r7, #24]
 8040a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a22:	43da      	mvns	r2, r3
 8040a24:	68bb      	ldr	r3, [r7, #8]
 8040a26:	401a      	ands	r2, r3
 8040a28:	697b      	ldr	r3, [r7, #20]
 8040a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8040a30:	697b      	ldr	r3, [r7, #20]
 8040a32:	fa01 f303 	lsl.w	r3, r1, r3
 8040a36:	43d9      	mvns	r1, r3
 8040a38:	687b      	ldr	r3, [r7, #4]
 8040a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040a3c:	4313      	orrs	r3, r2
         );
}
 8040a3e:	4618      	mov	r0, r3
 8040a40:	3724      	adds	r7, #36	@ 0x24
 8040a42:	46bd      	mov	sp, r7
 8040a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a48:	4770      	bx	lr
	...

08040a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040a4c:	b580      	push	{r7, lr}
 8040a4e:	b082      	sub	sp, #8
 8040a50:	af00      	add	r7, sp, #0
 8040a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040a54:	687b      	ldr	r3, [r7, #4]
 8040a56:	3b01      	subs	r3, #1
 8040a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040a5c:	d301      	bcc.n	8040a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040a5e:	2301      	movs	r3, #1
 8040a60:	e00f      	b.n	8040a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040a62:	4a0a      	ldr	r2, [pc, #40]	@ (8040a8c <SysTick_Config+0x40>)
 8040a64:	687b      	ldr	r3, [r7, #4]
 8040a66:	3b01      	subs	r3, #1
 8040a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040a6a:	210f      	movs	r1, #15
 8040a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8040a70:	f7ff ff8e 	bl	8040990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040a74:	4b05      	ldr	r3, [pc, #20]	@ (8040a8c <SysTick_Config+0x40>)
 8040a76:	2200      	movs	r2, #0
 8040a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040a7a:	4b04      	ldr	r3, [pc, #16]	@ (8040a8c <SysTick_Config+0x40>)
 8040a7c:	2207      	movs	r2, #7
 8040a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040a80:	2300      	movs	r3, #0
}
 8040a82:	4618      	mov	r0, r3
 8040a84:	3708      	adds	r7, #8
 8040a86:	46bd      	mov	sp, r7
 8040a88:	bd80      	pop	{r7, pc}
 8040a8a:	bf00      	nop
 8040a8c:	e000e010 	.word	0xe000e010

08040a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040a90:	b580      	push	{r7, lr}
 8040a92:	b082      	sub	sp, #8
 8040a94:	af00      	add	r7, sp, #0
 8040a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040a98:	6878      	ldr	r0, [r7, #4]
 8040a9a:	f7ff ff29 	bl	80408f0 <__NVIC_SetPriorityGrouping>
}
 8040a9e:	bf00      	nop
 8040aa0:	3708      	adds	r7, #8
 8040aa2:	46bd      	mov	sp, r7
 8040aa4:	bd80      	pop	{r7, pc}

08040aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040aa6:	b580      	push	{r7, lr}
 8040aa8:	b086      	sub	sp, #24
 8040aaa:	af00      	add	r7, sp, #0
 8040aac:	4603      	mov	r3, r0
 8040aae:	60b9      	str	r1, [r7, #8]
 8040ab0:	607a      	str	r2, [r7, #4]
 8040ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040ab4:	2300      	movs	r3, #0
 8040ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040ab8:	f7ff ff3e 	bl	8040938 <__NVIC_GetPriorityGrouping>
 8040abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040abe:	687a      	ldr	r2, [r7, #4]
 8040ac0:	68b9      	ldr	r1, [r7, #8]
 8040ac2:	6978      	ldr	r0, [r7, #20]
 8040ac4:	f7ff ff8e 	bl	80409e4 <NVIC_EncodePriority>
 8040ac8:	4602      	mov	r2, r0
 8040aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040ace:	4611      	mov	r1, r2
 8040ad0:	4618      	mov	r0, r3
 8040ad2:	f7ff ff5d 	bl	8040990 <__NVIC_SetPriority>
}
 8040ad6:	bf00      	nop
 8040ad8:	3718      	adds	r7, #24
 8040ada:	46bd      	mov	sp, r7
 8040adc:	bd80      	pop	{r7, pc}

08040ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040ade:	b580      	push	{r7, lr}
 8040ae0:	b082      	sub	sp, #8
 8040ae2:	af00      	add	r7, sp, #0
 8040ae4:	4603      	mov	r3, r0
 8040ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040aec:	4618      	mov	r0, r3
 8040aee:	f7ff ff31 	bl	8040954 <__NVIC_EnableIRQ>
}
 8040af2:	bf00      	nop
 8040af4:	3708      	adds	r7, #8
 8040af6:	46bd      	mov	sp, r7
 8040af8:	bd80      	pop	{r7, pc}

08040afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040afa:	b580      	push	{r7, lr}
 8040afc:	b082      	sub	sp, #8
 8040afe:	af00      	add	r7, sp, #0
 8040b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040b02:	6878      	ldr	r0, [r7, #4]
 8040b04:	f7ff ffa2 	bl	8040a4c <SysTick_Config>
 8040b08:	4603      	mov	r3, r0
}
 8040b0a:	4618      	mov	r0, r3
 8040b0c:	3708      	adds	r7, #8
 8040b0e:	46bd      	mov	sp, r7
 8040b10:	bd80      	pop	{r7, pc}
	...

08040b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040b14:	b480      	push	{r7}
 8040b16:	b089      	sub	sp, #36	@ 0x24
 8040b18:	af00      	add	r7, sp, #0
 8040b1a:	6078      	str	r0, [r7, #4]
 8040b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8040b1e:	2300      	movs	r3, #0
 8040b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8040b22:	2300      	movs	r3, #0
 8040b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8040b26:	2300      	movs	r3, #0
 8040b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040b2a:	2300      	movs	r3, #0
 8040b2c:	61fb      	str	r3, [r7, #28]
 8040b2e:	e16b      	b.n	8040e08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8040b30:	2201      	movs	r2, #1
 8040b32:	69fb      	ldr	r3, [r7, #28]
 8040b34:	fa02 f303 	lsl.w	r3, r2, r3
 8040b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040b3a:	683b      	ldr	r3, [r7, #0]
 8040b3c:	681b      	ldr	r3, [r3, #0]
 8040b3e:	697a      	ldr	r2, [r7, #20]
 8040b40:	4013      	ands	r3, r2
 8040b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040b44:	693a      	ldr	r2, [r7, #16]
 8040b46:	697b      	ldr	r3, [r7, #20]
 8040b48:	429a      	cmp	r2, r3
 8040b4a:	f040 815a 	bne.w	8040e02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040b4e:	683b      	ldr	r3, [r7, #0]
 8040b50:	685b      	ldr	r3, [r3, #4]
 8040b52:	f003 0303 	and.w	r3, r3, #3
 8040b56:	2b01      	cmp	r3, #1
 8040b58:	d005      	beq.n	8040b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040b5a:	683b      	ldr	r3, [r7, #0]
 8040b5c:	685b      	ldr	r3, [r3, #4]
 8040b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040b62:	2b02      	cmp	r3, #2
 8040b64:	d130      	bne.n	8040bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040b66:	687b      	ldr	r3, [r7, #4]
 8040b68:	689b      	ldr	r3, [r3, #8]
 8040b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8040b6c:	69fb      	ldr	r3, [r7, #28]
 8040b6e:	005b      	lsls	r3, r3, #1
 8040b70:	2203      	movs	r2, #3
 8040b72:	fa02 f303 	lsl.w	r3, r2, r3
 8040b76:	43db      	mvns	r3, r3
 8040b78:	69ba      	ldr	r2, [r7, #24]
 8040b7a:	4013      	ands	r3, r2
 8040b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040b7e:	683b      	ldr	r3, [r7, #0]
 8040b80:	68da      	ldr	r2, [r3, #12]
 8040b82:	69fb      	ldr	r3, [r7, #28]
 8040b84:	005b      	lsls	r3, r3, #1
 8040b86:	fa02 f303 	lsl.w	r3, r2, r3
 8040b8a:	69ba      	ldr	r2, [r7, #24]
 8040b8c:	4313      	orrs	r3, r2
 8040b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040b90:	687b      	ldr	r3, [r7, #4]
 8040b92:	69ba      	ldr	r2, [r7, #24]
 8040b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040b96:	687b      	ldr	r3, [r7, #4]
 8040b98:	685b      	ldr	r3, [r3, #4]
 8040b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040b9c:	2201      	movs	r2, #1
 8040b9e:	69fb      	ldr	r3, [r7, #28]
 8040ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8040ba4:	43db      	mvns	r3, r3
 8040ba6:	69ba      	ldr	r2, [r7, #24]
 8040ba8:	4013      	ands	r3, r2
 8040baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040bac:	683b      	ldr	r3, [r7, #0]
 8040bae:	685b      	ldr	r3, [r3, #4]
 8040bb0:	091b      	lsrs	r3, r3, #4
 8040bb2:	f003 0201 	and.w	r2, r3, #1
 8040bb6:	69fb      	ldr	r3, [r7, #28]
 8040bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8040bbc:	69ba      	ldr	r2, [r7, #24]
 8040bbe:	4313      	orrs	r3, r2
 8040bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040bc2:	687b      	ldr	r3, [r7, #4]
 8040bc4:	69ba      	ldr	r2, [r7, #24]
 8040bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040bc8:	683b      	ldr	r3, [r7, #0]
 8040bca:	685b      	ldr	r3, [r3, #4]
 8040bcc:	f003 0303 	and.w	r3, r3, #3
 8040bd0:	2b03      	cmp	r3, #3
 8040bd2:	d017      	beq.n	8040c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040bd4:	687b      	ldr	r3, [r7, #4]
 8040bd6:	68db      	ldr	r3, [r3, #12]
 8040bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8040bda:	69fb      	ldr	r3, [r7, #28]
 8040bdc:	005b      	lsls	r3, r3, #1
 8040bde:	2203      	movs	r2, #3
 8040be0:	fa02 f303 	lsl.w	r3, r2, r3
 8040be4:	43db      	mvns	r3, r3
 8040be6:	69ba      	ldr	r2, [r7, #24]
 8040be8:	4013      	ands	r3, r2
 8040bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040bec:	683b      	ldr	r3, [r7, #0]
 8040bee:	689a      	ldr	r2, [r3, #8]
 8040bf0:	69fb      	ldr	r3, [r7, #28]
 8040bf2:	005b      	lsls	r3, r3, #1
 8040bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8040bf8:	69ba      	ldr	r2, [r7, #24]
 8040bfa:	4313      	orrs	r3, r2
 8040bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040bfe:	687b      	ldr	r3, [r7, #4]
 8040c00:	69ba      	ldr	r2, [r7, #24]
 8040c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040c04:	683b      	ldr	r3, [r7, #0]
 8040c06:	685b      	ldr	r3, [r3, #4]
 8040c08:	f003 0303 	and.w	r3, r3, #3
 8040c0c:	2b02      	cmp	r3, #2
 8040c0e:	d123      	bne.n	8040c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040c10:	69fb      	ldr	r3, [r7, #28]
 8040c12:	08da      	lsrs	r2, r3, #3
 8040c14:	687b      	ldr	r3, [r7, #4]
 8040c16:	3208      	adds	r2, #8
 8040c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8040c1e:	69fb      	ldr	r3, [r7, #28]
 8040c20:	f003 0307 	and.w	r3, r3, #7
 8040c24:	009b      	lsls	r3, r3, #2
 8040c26:	220f      	movs	r2, #15
 8040c28:	fa02 f303 	lsl.w	r3, r2, r3
 8040c2c:	43db      	mvns	r3, r3
 8040c2e:	69ba      	ldr	r2, [r7, #24]
 8040c30:	4013      	ands	r3, r2
 8040c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8040c34:	683b      	ldr	r3, [r7, #0]
 8040c36:	691a      	ldr	r2, [r3, #16]
 8040c38:	69fb      	ldr	r3, [r7, #28]
 8040c3a:	f003 0307 	and.w	r3, r3, #7
 8040c3e:	009b      	lsls	r3, r3, #2
 8040c40:	fa02 f303 	lsl.w	r3, r2, r3
 8040c44:	69ba      	ldr	r2, [r7, #24]
 8040c46:	4313      	orrs	r3, r2
 8040c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8040c4a:	69fb      	ldr	r3, [r7, #28]
 8040c4c:	08da      	lsrs	r2, r3, #3
 8040c4e:	687b      	ldr	r3, [r7, #4]
 8040c50:	3208      	adds	r2, #8
 8040c52:	69b9      	ldr	r1, [r7, #24]
 8040c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040c58:	687b      	ldr	r3, [r7, #4]
 8040c5a:	681b      	ldr	r3, [r3, #0]
 8040c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8040c5e:	69fb      	ldr	r3, [r7, #28]
 8040c60:	005b      	lsls	r3, r3, #1
 8040c62:	2203      	movs	r2, #3
 8040c64:	fa02 f303 	lsl.w	r3, r2, r3
 8040c68:	43db      	mvns	r3, r3
 8040c6a:	69ba      	ldr	r2, [r7, #24]
 8040c6c:	4013      	ands	r3, r2
 8040c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040c70:	683b      	ldr	r3, [r7, #0]
 8040c72:	685b      	ldr	r3, [r3, #4]
 8040c74:	f003 0203 	and.w	r2, r3, #3
 8040c78:	69fb      	ldr	r3, [r7, #28]
 8040c7a:	005b      	lsls	r3, r3, #1
 8040c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8040c80:	69ba      	ldr	r2, [r7, #24]
 8040c82:	4313      	orrs	r3, r2
 8040c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040c86:	687b      	ldr	r3, [r7, #4]
 8040c88:	69ba      	ldr	r2, [r7, #24]
 8040c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8040c8c:	683b      	ldr	r3, [r7, #0]
 8040c8e:	685b      	ldr	r3, [r3, #4]
 8040c90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8040c94:	2b00      	cmp	r3, #0
 8040c96:	f000 80b4 	beq.w	8040e02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040c9a:	2300      	movs	r3, #0
 8040c9c:	60fb      	str	r3, [r7, #12]
 8040c9e:	4b60      	ldr	r3, [pc, #384]	@ (8040e20 <HAL_GPIO_Init+0x30c>)
 8040ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8040e20 <HAL_GPIO_Init+0x30c>)
 8040ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8040caa:	4b5d      	ldr	r3, [pc, #372]	@ (8040e20 <HAL_GPIO_Init+0x30c>)
 8040cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040cb2:	60fb      	str	r3, [r7, #12]
 8040cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8040cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8040e24 <HAL_GPIO_Init+0x310>)
 8040cb8:	69fb      	ldr	r3, [r7, #28]
 8040cba:	089b      	lsrs	r3, r3, #2
 8040cbc:	3302      	adds	r3, #2
 8040cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8040cc4:	69fb      	ldr	r3, [r7, #28]
 8040cc6:	f003 0303 	and.w	r3, r3, #3
 8040cca:	009b      	lsls	r3, r3, #2
 8040ccc:	220f      	movs	r2, #15
 8040cce:	fa02 f303 	lsl.w	r3, r2, r3
 8040cd2:	43db      	mvns	r3, r3
 8040cd4:	69ba      	ldr	r2, [r7, #24]
 8040cd6:	4013      	ands	r3, r2
 8040cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8040cda:	687b      	ldr	r3, [r7, #4]
 8040cdc:	4a52      	ldr	r2, [pc, #328]	@ (8040e28 <HAL_GPIO_Init+0x314>)
 8040cde:	4293      	cmp	r3, r2
 8040ce0:	d02b      	beq.n	8040d3a <HAL_GPIO_Init+0x226>
 8040ce2:	687b      	ldr	r3, [r7, #4]
 8040ce4:	4a51      	ldr	r2, [pc, #324]	@ (8040e2c <HAL_GPIO_Init+0x318>)
 8040ce6:	4293      	cmp	r3, r2
 8040ce8:	d025      	beq.n	8040d36 <HAL_GPIO_Init+0x222>
 8040cea:	687b      	ldr	r3, [r7, #4]
 8040cec:	4a50      	ldr	r2, [pc, #320]	@ (8040e30 <HAL_GPIO_Init+0x31c>)
 8040cee:	4293      	cmp	r3, r2
 8040cf0:	d01f      	beq.n	8040d32 <HAL_GPIO_Init+0x21e>
 8040cf2:	687b      	ldr	r3, [r7, #4]
 8040cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8040e34 <HAL_GPIO_Init+0x320>)
 8040cf6:	4293      	cmp	r3, r2
 8040cf8:	d019      	beq.n	8040d2e <HAL_GPIO_Init+0x21a>
 8040cfa:	687b      	ldr	r3, [r7, #4]
 8040cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8040e38 <HAL_GPIO_Init+0x324>)
 8040cfe:	4293      	cmp	r3, r2
 8040d00:	d013      	beq.n	8040d2a <HAL_GPIO_Init+0x216>
 8040d02:	687b      	ldr	r3, [r7, #4]
 8040d04:	4a4d      	ldr	r2, [pc, #308]	@ (8040e3c <HAL_GPIO_Init+0x328>)
 8040d06:	4293      	cmp	r3, r2
 8040d08:	d00d      	beq.n	8040d26 <HAL_GPIO_Init+0x212>
 8040d0a:	687b      	ldr	r3, [r7, #4]
 8040d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8040e40 <HAL_GPIO_Init+0x32c>)
 8040d0e:	4293      	cmp	r3, r2
 8040d10:	d007      	beq.n	8040d22 <HAL_GPIO_Init+0x20e>
 8040d12:	687b      	ldr	r3, [r7, #4]
 8040d14:	4a4b      	ldr	r2, [pc, #300]	@ (8040e44 <HAL_GPIO_Init+0x330>)
 8040d16:	4293      	cmp	r3, r2
 8040d18:	d101      	bne.n	8040d1e <HAL_GPIO_Init+0x20a>
 8040d1a:	2307      	movs	r3, #7
 8040d1c:	e00e      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d1e:	2308      	movs	r3, #8
 8040d20:	e00c      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d22:	2306      	movs	r3, #6
 8040d24:	e00a      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d26:	2305      	movs	r3, #5
 8040d28:	e008      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d2a:	2304      	movs	r3, #4
 8040d2c:	e006      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d2e:	2303      	movs	r3, #3
 8040d30:	e004      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d32:	2302      	movs	r3, #2
 8040d34:	e002      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d36:	2301      	movs	r3, #1
 8040d38:	e000      	b.n	8040d3c <HAL_GPIO_Init+0x228>
 8040d3a:	2300      	movs	r3, #0
 8040d3c:	69fa      	ldr	r2, [r7, #28]
 8040d3e:	f002 0203 	and.w	r2, r2, #3
 8040d42:	0092      	lsls	r2, r2, #2
 8040d44:	4093      	lsls	r3, r2
 8040d46:	69ba      	ldr	r2, [r7, #24]
 8040d48:	4313      	orrs	r3, r2
 8040d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8040d4c:	4935      	ldr	r1, [pc, #212]	@ (8040e24 <HAL_GPIO_Init+0x310>)
 8040d4e:	69fb      	ldr	r3, [r7, #28]
 8040d50:	089b      	lsrs	r3, r3, #2
 8040d52:	3302      	adds	r3, #2
 8040d54:	69ba      	ldr	r2, [r7, #24]
 8040d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040d5c:	689b      	ldr	r3, [r3, #8]
 8040d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040d60:	693b      	ldr	r3, [r7, #16]
 8040d62:	43db      	mvns	r3, r3
 8040d64:	69ba      	ldr	r2, [r7, #24]
 8040d66:	4013      	ands	r3, r2
 8040d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8040d6a:	683b      	ldr	r3, [r7, #0]
 8040d6c:	685b      	ldr	r3, [r3, #4]
 8040d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040d72:	2b00      	cmp	r3, #0
 8040d74:	d003      	beq.n	8040d7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8040d76:	69ba      	ldr	r2, [r7, #24]
 8040d78:	693b      	ldr	r3, [r7, #16]
 8040d7a:	4313      	orrs	r3, r2
 8040d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040d7e:	4a32      	ldr	r2, [pc, #200]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040d80:	69bb      	ldr	r3, [r7, #24]
 8040d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040d84:	4b30      	ldr	r3, [pc, #192]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040d86:	68db      	ldr	r3, [r3, #12]
 8040d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040d8a:	693b      	ldr	r3, [r7, #16]
 8040d8c:	43db      	mvns	r3, r3
 8040d8e:	69ba      	ldr	r2, [r7, #24]
 8040d90:	4013      	ands	r3, r2
 8040d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8040d94:	683b      	ldr	r3, [r7, #0]
 8040d96:	685b      	ldr	r3, [r3, #4]
 8040d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040d9c:	2b00      	cmp	r3, #0
 8040d9e:	d003      	beq.n	8040da8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8040da0:	69ba      	ldr	r2, [r7, #24]
 8040da2:	693b      	ldr	r3, [r7, #16]
 8040da4:	4313      	orrs	r3, r2
 8040da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040da8:	4a27      	ldr	r2, [pc, #156]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040daa:	69bb      	ldr	r3, [r7, #24]
 8040dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040dae:	4b26      	ldr	r3, [pc, #152]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040db0:	685b      	ldr	r3, [r3, #4]
 8040db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040db4:	693b      	ldr	r3, [r7, #16]
 8040db6:	43db      	mvns	r3, r3
 8040db8:	69ba      	ldr	r2, [r7, #24]
 8040dba:	4013      	ands	r3, r2
 8040dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8040dbe:	683b      	ldr	r3, [r7, #0]
 8040dc0:	685b      	ldr	r3, [r3, #4]
 8040dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040dc6:	2b00      	cmp	r3, #0
 8040dc8:	d003      	beq.n	8040dd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8040dca:	69ba      	ldr	r2, [r7, #24]
 8040dcc:	693b      	ldr	r3, [r7, #16]
 8040dce:	4313      	orrs	r3, r2
 8040dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8040dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040dd4:	69bb      	ldr	r3, [r7, #24]
 8040dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040dda:	681b      	ldr	r3, [r3, #0]
 8040ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040dde:	693b      	ldr	r3, [r7, #16]
 8040de0:	43db      	mvns	r3, r3
 8040de2:	69ba      	ldr	r2, [r7, #24]
 8040de4:	4013      	ands	r3, r2
 8040de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8040de8:	683b      	ldr	r3, [r7, #0]
 8040dea:	685b      	ldr	r3, [r3, #4]
 8040dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040df0:	2b00      	cmp	r3, #0
 8040df2:	d003      	beq.n	8040dfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8040df4:	69ba      	ldr	r2, [r7, #24]
 8040df6:	693b      	ldr	r3, [r7, #16]
 8040df8:	4313      	orrs	r3, r2
 8040dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8040dfc:	4a12      	ldr	r2, [pc, #72]	@ (8040e48 <HAL_GPIO_Init+0x334>)
 8040dfe:	69bb      	ldr	r3, [r7, #24]
 8040e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040e02:	69fb      	ldr	r3, [r7, #28]
 8040e04:	3301      	adds	r3, #1
 8040e06:	61fb      	str	r3, [r7, #28]
 8040e08:	69fb      	ldr	r3, [r7, #28]
 8040e0a:	2b0f      	cmp	r3, #15
 8040e0c:	f67f ae90 	bls.w	8040b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8040e10:	bf00      	nop
 8040e12:	bf00      	nop
 8040e14:	3724      	adds	r7, #36	@ 0x24
 8040e16:	46bd      	mov	sp, r7
 8040e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e1c:	4770      	bx	lr
 8040e1e:	bf00      	nop
 8040e20:	40023800 	.word	0x40023800
 8040e24:	40013800 	.word	0x40013800
 8040e28:	40020000 	.word	0x40020000
 8040e2c:	40020400 	.word	0x40020400
 8040e30:	40020800 	.word	0x40020800
 8040e34:	40020c00 	.word	0x40020c00
 8040e38:	40021000 	.word	0x40021000
 8040e3c:	40021400 	.word	0x40021400
 8040e40:	40021800 	.word	0x40021800
 8040e44:	40021c00 	.word	0x40021c00
 8040e48:	40013c00 	.word	0x40013c00

08040e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040e4c:	b480      	push	{r7}
 8040e4e:	b083      	sub	sp, #12
 8040e50:	af00      	add	r7, sp, #0
 8040e52:	6078      	str	r0, [r7, #4]
 8040e54:	460b      	mov	r3, r1
 8040e56:	807b      	strh	r3, [r7, #2]
 8040e58:	4613      	mov	r3, r2
 8040e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8040e5c:	787b      	ldrb	r3, [r7, #1]
 8040e5e:	2b00      	cmp	r3, #0
 8040e60:	d003      	beq.n	8040e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8040e62:	887a      	ldrh	r2, [r7, #2]
 8040e64:	687b      	ldr	r3, [r7, #4]
 8040e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8040e68:	e003      	b.n	8040e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8040e6a:	887b      	ldrh	r3, [r7, #2]
 8040e6c:	041a      	lsls	r2, r3, #16
 8040e6e:	687b      	ldr	r3, [r7, #4]
 8040e70:	619a      	str	r2, [r3, #24]
}
 8040e72:	bf00      	nop
 8040e74:	370c      	adds	r7, #12
 8040e76:	46bd      	mov	sp, r7
 8040e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e7c:	4770      	bx	lr

08040e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8040e7e:	b580      	push	{r7, lr}
 8040e80:	b086      	sub	sp, #24
 8040e82:	af02      	add	r7, sp, #8
 8040e84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8040e86:	687b      	ldr	r3, [r7, #4]
 8040e88:	2b00      	cmp	r3, #0
 8040e8a:	d101      	bne.n	8040e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8040e8c:	2301      	movs	r3, #1
 8040e8e:	e101      	b.n	8041094 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8040e90:	687b      	ldr	r3, [r7, #4]
 8040e92:	681b      	ldr	r3, [r3, #0]
 8040e94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8040e96:	687b      	ldr	r3, [r7, #4]
 8040e98:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8040e9c:	b2db      	uxtb	r3, r3
 8040e9e:	2b00      	cmp	r3, #0
 8040ea0:	d106      	bne.n	8040eb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8040ea2:	687b      	ldr	r3, [r7, #4]
 8040ea4:	2200      	movs	r2, #0
 8040ea6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8040eaa:	6878      	ldr	r0, [r7, #4]
 8040eac:	f005 fb54 	bl	8046558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8040eb0:	687b      	ldr	r3, [r7, #4]
 8040eb2:	2203      	movs	r2, #3
 8040eb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8040eb8:	68bb      	ldr	r3, [r7, #8]
 8040eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8040ebe:	d102      	bne.n	8040ec6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8040ec0:	687b      	ldr	r3, [r7, #4]
 8040ec2:	2200      	movs	r2, #0
 8040ec4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8040ec6:	687b      	ldr	r3, [r7, #4]
 8040ec8:	681b      	ldr	r3, [r3, #0]
 8040eca:	4618      	mov	r0, r3
 8040ecc:	f001 ffb1 	bl	8042e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8040ed0:	687b      	ldr	r3, [r7, #4]
 8040ed2:	6818      	ldr	r0, [r3, #0]
 8040ed4:	687b      	ldr	r3, [r7, #4]
 8040ed6:	7c1a      	ldrb	r2, [r3, #16]
 8040ed8:	f88d 2000 	strb.w	r2, [sp]
 8040edc:	3304      	adds	r3, #4
 8040ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8040ee0:	f001 fe90 	bl	8042c04 <USB_CoreInit>
 8040ee4:	4603      	mov	r3, r0
 8040ee6:	2b00      	cmp	r3, #0
 8040ee8:	d005      	beq.n	8040ef6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8040eea:	687b      	ldr	r3, [r7, #4]
 8040eec:	2202      	movs	r2, #2
 8040eee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8040ef2:	2301      	movs	r3, #1
 8040ef4:	e0ce      	b.n	8041094 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8040ef6:	687b      	ldr	r3, [r7, #4]
 8040ef8:	681b      	ldr	r3, [r3, #0]
 8040efa:	2100      	movs	r1, #0
 8040efc:	4618      	mov	r0, r3
 8040efe:	f001 ffa9 	bl	8042e54 <USB_SetCurrentMode>
 8040f02:	4603      	mov	r3, r0
 8040f04:	2b00      	cmp	r3, #0
 8040f06:	d005      	beq.n	8040f14 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8040f08:	687b      	ldr	r3, [r7, #4]
 8040f0a:	2202      	movs	r2, #2
 8040f0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8040f10:	2301      	movs	r3, #1
 8040f12:	e0bf      	b.n	8041094 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8040f14:	2300      	movs	r3, #0
 8040f16:	73fb      	strb	r3, [r7, #15]
 8040f18:	e04a      	b.n	8040fb0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8040f1a:	7bfa      	ldrb	r2, [r7, #15]
 8040f1c:	6879      	ldr	r1, [r7, #4]
 8040f1e:	4613      	mov	r3, r2
 8040f20:	00db      	lsls	r3, r3, #3
 8040f22:	4413      	add	r3, r2
 8040f24:	009b      	lsls	r3, r3, #2
 8040f26:	440b      	add	r3, r1
 8040f28:	3315      	adds	r3, #21
 8040f2a:	2201      	movs	r2, #1
 8040f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8040f2e:	7bfa      	ldrb	r2, [r7, #15]
 8040f30:	6879      	ldr	r1, [r7, #4]
 8040f32:	4613      	mov	r3, r2
 8040f34:	00db      	lsls	r3, r3, #3
 8040f36:	4413      	add	r3, r2
 8040f38:	009b      	lsls	r3, r3, #2
 8040f3a:	440b      	add	r3, r1
 8040f3c:	3314      	adds	r3, #20
 8040f3e:	7bfa      	ldrb	r2, [r7, #15]
 8040f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8040f42:	7bfa      	ldrb	r2, [r7, #15]
 8040f44:	7bfb      	ldrb	r3, [r7, #15]
 8040f46:	b298      	uxth	r0, r3
 8040f48:	6879      	ldr	r1, [r7, #4]
 8040f4a:	4613      	mov	r3, r2
 8040f4c:	00db      	lsls	r3, r3, #3
 8040f4e:	4413      	add	r3, r2
 8040f50:	009b      	lsls	r3, r3, #2
 8040f52:	440b      	add	r3, r1
 8040f54:	332e      	adds	r3, #46	@ 0x2e
 8040f56:	4602      	mov	r2, r0
 8040f58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8040f5a:	7bfa      	ldrb	r2, [r7, #15]
 8040f5c:	6879      	ldr	r1, [r7, #4]
 8040f5e:	4613      	mov	r3, r2
 8040f60:	00db      	lsls	r3, r3, #3
 8040f62:	4413      	add	r3, r2
 8040f64:	009b      	lsls	r3, r3, #2
 8040f66:	440b      	add	r3, r1
 8040f68:	3318      	adds	r3, #24
 8040f6a:	2200      	movs	r2, #0
 8040f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8040f6e:	7bfa      	ldrb	r2, [r7, #15]
 8040f70:	6879      	ldr	r1, [r7, #4]
 8040f72:	4613      	mov	r3, r2
 8040f74:	00db      	lsls	r3, r3, #3
 8040f76:	4413      	add	r3, r2
 8040f78:	009b      	lsls	r3, r3, #2
 8040f7a:	440b      	add	r3, r1
 8040f7c:	331c      	adds	r3, #28
 8040f7e:	2200      	movs	r2, #0
 8040f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8040f82:	7bfa      	ldrb	r2, [r7, #15]
 8040f84:	6879      	ldr	r1, [r7, #4]
 8040f86:	4613      	mov	r3, r2
 8040f88:	00db      	lsls	r3, r3, #3
 8040f8a:	4413      	add	r3, r2
 8040f8c:	009b      	lsls	r3, r3, #2
 8040f8e:	440b      	add	r3, r1
 8040f90:	3320      	adds	r3, #32
 8040f92:	2200      	movs	r2, #0
 8040f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8040f96:	7bfa      	ldrb	r2, [r7, #15]
 8040f98:	6879      	ldr	r1, [r7, #4]
 8040f9a:	4613      	mov	r3, r2
 8040f9c:	00db      	lsls	r3, r3, #3
 8040f9e:	4413      	add	r3, r2
 8040fa0:	009b      	lsls	r3, r3, #2
 8040fa2:	440b      	add	r3, r1
 8040fa4:	3324      	adds	r3, #36	@ 0x24
 8040fa6:	2200      	movs	r2, #0
 8040fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8040faa:	7bfb      	ldrb	r3, [r7, #15]
 8040fac:	3301      	adds	r3, #1
 8040fae:	73fb      	strb	r3, [r7, #15]
 8040fb0:	687b      	ldr	r3, [r7, #4]
 8040fb2:	791b      	ldrb	r3, [r3, #4]
 8040fb4:	7bfa      	ldrb	r2, [r7, #15]
 8040fb6:	429a      	cmp	r2, r3
 8040fb8:	d3af      	bcc.n	8040f1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8040fba:	2300      	movs	r3, #0
 8040fbc:	73fb      	strb	r3, [r7, #15]
 8040fbe:	e044      	b.n	804104a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8040fc0:	7bfa      	ldrb	r2, [r7, #15]
 8040fc2:	6879      	ldr	r1, [r7, #4]
 8040fc4:	4613      	mov	r3, r2
 8040fc6:	00db      	lsls	r3, r3, #3
 8040fc8:	4413      	add	r3, r2
 8040fca:	009b      	lsls	r3, r3, #2
 8040fcc:	440b      	add	r3, r1
 8040fce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8040fd2:	2200      	movs	r2, #0
 8040fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8040fd6:	7bfa      	ldrb	r2, [r7, #15]
 8040fd8:	6879      	ldr	r1, [r7, #4]
 8040fda:	4613      	mov	r3, r2
 8040fdc:	00db      	lsls	r3, r3, #3
 8040fde:	4413      	add	r3, r2
 8040fe0:	009b      	lsls	r3, r3, #2
 8040fe2:	440b      	add	r3, r1
 8040fe4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8040fe8:	7bfa      	ldrb	r2, [r7, #15]
 8040fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8040fec:	7bfa      	ldrb	r2, [r7, #15]
 8040fee:	6879      	ldr	r1, [r7, #4]
 8040ff0:	4613      	mov	r3, r2
 8040ff2:	00db      	lsls	r3, r3, #3
 8040ff4:	4413      	add	r3, r2
 8040ff6:	009b      	lsls	r3, r3, #2
 8040ff8:	440b      	add	r3, r1
 8040ffa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8040ffe:	2200      	movs	r2, #0
 8041000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041002:	7bfa      	ldrb	r2, [r7, #15]
 8041004:	6879      	ldr	r1, [r7, #4]
 8041006:	4613      	mov	r3, r2
 8041008:	00db      	lsls	r3, r3, #3
 804100a:	4413      	add	r3, r2
 804100c:	009b      	lsls	r3, r3, #2
 804100e:	440b      	add	r3, r1
 8041010:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8041014:	2200      	movs	r2, #0
 8041016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8041018:	7bfa      	ldrb	r2, [r7, #15]
 804101a:	6879      	ldr	r1, [r7, #4]
 804101c:	4613      	mov	r3, r2
 804101e:	00db      	lsls	r3, r3, #3
 8041020:	4413      	add	r3, r2
 8041022:	009b      	lsls	r3, r3, #2
 8041024:	440b      	add	r3, r1
 8041026:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 804102a:	2200      	movs	r2, #0
 804102c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 804102e:	7bfa      	ldrb	r2, [r7, #15]
 8041030:	6879      	ldr	r1, [r7, #4]
 8041032:	4613      	mov	r3, r2
 8041034:	00db      	lsls	r3, r3, #3
 8041036:	4413      	add	r3, r2
 8041038:	009b      	lsls	r3, r3, #2
 804103a:	440b      	add	r3, r1
 804103c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8041040:	2200      	movs	r2, #0
 8041042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041044:	7bfb      	ldrb	r3, [r7, #15]
 8041046:	3301      	adds	r3, #1
 8041048:	73fb      	strb	r3, [r7, #15]
 804104a:	687b      	ldr	r3, [r7, #4]
 804104c:	791b      	ldrb	r3, [r3, #4]
 804104e:	7bfa      	ldrb	r2, [r7, #15]
 8041050:	429a      	cmp	r2, r3
 8041052:	d3b5      	bcc.n	8040fc0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041054:	687b      	ldr	r3, [r7, #4]
 8041056:	6818      	ldr	r0, [r3, #0]
 8041058:	687b      	ldr	r3, [r7, #4]
 804105a:	7c1a      	ldrb	r2, [r3, #16]
 804105c:	f88d 2000 	strb.w	r2, [sp]
 8041060:	3304      	adds	r3, #4
 8041062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041064:	f001 ff42 	bl	8042eec <USB_DevInit>
 8041068:	4603      	mov	r3, r0
 804106a:	2b00      	cmp	r3, #0
 804106c:	d005      	beq.n	804107a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 804106e:	687b      	ldr	r3, [r7, #4]
 8041070:	2202      	movs	r2, #2
 8041072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041076:	2301      	movs	r3, #1
 8041078:	e00c      	b.n	8041094 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 804107a:	687b      	ldr	r3, [r7, #4]
 804107c:	2200      	movs	r2, #0
 804107e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8041080:	687b      	ldr	r3, [r7, #4]
 8041082:	2201      	movs	r2, #1
 8041084:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8041088:	687b      	ldr	r3, [r7, #4]
 804108a:	681b      	ldr	r3, [r3, #0]
 804108c:	4618      	mov	r0, r3
 804108e:	f002 ff8c 	bl	8043faa <USB_DevDisconnect>

  return HAL_OK;
 8041092:	2300      	movs	r3, #0
}
 8041094:	4618      	mov	r0, r3
 8041096:	3710      	adds	r7, #16
 8041098:	46bd      	mov	sp, r7
 804109a:	bd80      	pop	{r7, pc}

0804109c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 804109c:	b580      	push	{r7, lr}
 804109e:	b084      	sub	sp, #16
 80410a0:	af00      	add	r7, sp, #0
 80410a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80410a4:	687b      	ldr	r3, [r7, #4]
 80410a6:	681b      	ldr	r3, [r3, #0]
 80410a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80410aa:	687b      	ldr	r3, [r7, #4]
 80410ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80410b0:	2b01      	cmp	r3, #1
 80410b2:	d101      	bne.n	80410b8 <HAL_PCD_Start+0x1c>
 80410b4:	2302      	movs	r3, #2
 80410b6:	e022      	b.n	80410fe <HAL_PCD_Start+0x62>
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	2201      	movs	r2, #1
 80410bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80410c0:	68fb      	ldr	r3, [r7, #12]
 80410c2:	68db      	ldr	r3, [r3, #12]
 80410c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80410c8:	2b00      	cmp	r3, #0
 80410ca:	d009      	beq.n	80410e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80410cc:	687b      	ldr	r3, [r7, #4]
 80410ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80410d0:	2b01      	cmp	r3, #1
 80410d2:	d105      	bne.n	80410e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80410d4:	68fb      	ldr	r3, [r7, #12]
 80410d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80410d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80410dc:	68fb      	ldr	r3, [r7, #12]
 80410de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	681b      	ldr	r3, [r3, #0]
 80410e4:	4618      	mov	r0, r3
 80410e6:	f001 fe93 	bl	8042e10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	681b      	ldr	r3, [r3, #0]
 80410ee:	4618      	mov	r0, r3
 80410f0:	f002 ff3a 	bl	8043f68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80410f4:	687b      	ldr	r3, [r7, #4]
 80410f6:	2200      	movs	r2, #0
 80410f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80410fc:	2300      	movs	r3, #0
}
 80410fe:	4618      	mov	r0, r3
 8041100:	3710      	adds	r7, #16
 8041102:	46bd      	mov	sp, r7
 8041104:	bd80      	pop	{r7, pc}

08041106 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8041106:	b590      	push	{r4, r7, lr}
 8041108:	b08d      	sub	sp, #52	@ 0x34
 804110a:	af00      	add	r7, sp, #0
 804110c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 804110e:	687b      	ldr	r3, [r7, #4]
 8041110:	681b      	ldr	r3, [r3, #0]
 8041112:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041114:	6a3b      	ldr	r3, [r7, #32]
 8041116:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8041118:	687b      	ldr	r3, [r7, #4]
 804111a:	681b      	ldr	r3, [r3, #0]
 804111c:	4618      	mov	r0, r3
 804111e:	f002 fff8 	bl	8044112 <USB_GetMode>
 8041122:	4603      	mov	r3, r0
 8041124:	2b00      	cmp	r3, #0
 8041126:	f040 848c 	bne.w	8041a42 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 804112a:	687b      	ldr	r3, [r7, #4]
 804112c:	681b      	ldr	r3, [r3, #0]
 804112e:	4618      	mov	r0, r3
 8041130:	f002 ff5c 	bl	8043fec <USB_ReadInterrupts>
 8041134:	4603      	mov	r3, r0
 8041136:	2b00      	cmp	r3, #0
 8041138:	f000 8482 	beq.w	8041a40 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 804113c:	69fb      	ldr	r3, [r7, #28]
 804113e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041142:	689b      	ldr	r3, [r3, #8]
 8041144:	0a1b      	lsrs	r3, r3, #8
 8041146:	f3c3 020d 	ubfx	r2, r3, #0, #14
 804114a:	687b      	ldr	r3, [r7, #4]
 804114c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8041150:	687b      	ldr	r3, [r7, #4]
 8041152:	681b      	ldr	r3, [r3, #0]
 8041154:	4618      	mov	r0, r3
 8041156:	f002 ff49 	bl	8043fec <USB_ReadInterrupts>
 804115a:	4603      	mov	r3, r0
 804115c:	f003 0302 	and.w	r3, r3, #2
 8041160:	2b02      	cmp	r3, #2
 8041162:	d107      	bne.n	8041174 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8041164:	687b      	ldr	r3, [r7, #4]
 8041166:	681b      	ldr	r3, [r3, #0]
 8041168:	695a      	ldr	r2, [r3, #20]
 804116a:	687b      	ldr	r3, [r7, #4]
 804116c:	681b      	ldr	r3, [r3, #0]
 804116e:	f002 0202 	and.w	r2, r2, #2
 8041172:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8041174:	687b      	ldr	r3, [r7, #4]
 8041176:	681b      	ldr	r3, [r3, #0]
 8041178:	4618      	mov	r0, r3
 804117a:	f002 ff37 	bl	8043fec <USB_ReadInterrupts>
 804117e:	4603      	mov	r3, r0
 8041180:	f003 0310 	and.w	r3, r3, #16
 8041184:	2b10      	cmp	r3, #16
 8041186:	d161      	bne.n	804124c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041188:	687b      	ldr	r3, [r7, #4]
 804118a:	681b      	ldr	r3, [r3, #0]
 804118c:	699a      	ldr	r2, [r3, #24]
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	681b      	ldr	r3, [r3, #0]
 8041192:	f022 0210 	bic.w	r2, r2, #16
 8041196:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8041198:	6a3b      	ldr	r3, [r7, #32]
 804119a:	6a1b      	ldr	r3, [r3, #32]
 804119c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 804119e:	69bb      	ldr	r3, [r7, #24]
 80411a0:	f003 020f 	and.w	r2, r3, #15
 80411a4:	4613      	mov	r3, r2
 80411a6:	00db      	lsls	r3, r3, #3
 80411a8:	4413      	add	r3, r2
 80411aa:	009b      	lsls	r3, r3, #2
 80411ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80411b0:	687a      	ldr	r2, [r7, #4]
 80411b2:	4413      	add	r3, r2
 80411b4:	3304      	adds	r3, #4
 80411b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80411b8:	69bb      	ldr	r3, [r7, #24]
 80411ba:	0c5b      	lsrs	r3, r3, #17
 80411bc:	f003 030f 	and.w	r3, r3, #15
 80411c0:	2b02      	cmp	r3, #2
 80411c2:	d124      	bne.n	804120e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80411c4:	69ba      	ldr	r2, [r7, #24]
 80411c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80411ca:	4013      	ands	r3, r2
 80411cc:	2b00      	cmp	r3, #0
 80411ce:	d035      	beq.n	804123c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80411d0:	697b      	ldr	r3, [r7, #20]
 80411d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80411d4:	69bb      	ldr	r3, [r7, #24]
 80411d6:	091b      	lsrs	r3, r3, #4
 80411d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80411da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80411de:	b29b      	uxth	r3, r3
 80411e0:	461a      	mov	r2, r3
 80411e2:	6a38      	ldr	r0, [r7, #32]
 80411e4:	f002 fd6e 	bl	8043cc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80411e8:	697b      	ldr	r3, [r7, #20]
 80411ea:	68da      	ldr	r2, [r3, #12]
 80411ec:	69bb      	ldr	r3, [r7, #24]
 80411ee:	091b      	lsrs	r3, r3, #4
 80411f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80411f4:	441a      	add	r2, r3
 80411f6:	697b      	ldr	r3, [r7, #20]
 80411f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80411fa:	697b      	ldr	r3, [r7, #20]
 80411fc:	695a      	ldr	r2, [r3, #20]
 80411fe:	69bb      	ldr	r3, [r7, #24]
 8041200:	091b      	lsrs	r3, r3, #4
 8041202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041206:	441a      	add	r2, r3
 8041208:	697b      	ldr	r3, [r7, #20]
 804120a:	615a      	str	r2, [r3, #20]
 804120c:	e016      	b.n	804123c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 804120e:	69bb      	ldr	r3, [r7, #24]
 8041210:	0c5b      	lsrs	r3, r3, #17
 8041212:	f003 030f 	and.w	r3, r3, #15
 8041216:	2b06      	cmp	r3, #6
 8041218:	d110      	bne.n	804123c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 804121a:	687b      	ldr	r3, [r7, #4]
 804121c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041220:	2208      	movs	r2, #8
 8041222:	4619      	mov	r1, r3
 8041224:	6a38      	ldr	r0, [r7, #32]
 8041226:	f002 fd4d 	bl	8043cc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 804122a:	697b      	ldr	r3, [r7, #20]
 804122c:	695a      	ldr	r2, [r3, #20]
 804122e:	69bb      	ldr	r3, [r7, #24]
 8041230:	091b      	lsrs	r3, r3, #4
 8041232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041236:	441a      	add	r2, r3
 8041238:	697b      	ldr	r3, [r7, #20]
 804123a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 804123c:	687b      	ldr	r3, [r7, #4]
 804123e:	681b      	ldr	r3, [r3, #0]
 8041240:	699a      	ldr	r2, [r3, #24]
 8041242:	687b      	ldr	r3, [r7, #4]
 8041244:	681b      	ldr	r3, [r3, #0]
 8041246:	f042 0210 	orr.w	r2, r2, #16
 804124a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 804124c:	687b      	ldr	r3, [r7, #4]
 804124e:	681b      	ldr	r3, [r3, #0]
 8041250:	4618      	mov	r0, r3
 8041252:	f002 fecb 	bl	8043fec <USB_ReadInterrupts>
 8041256:	4603      	mov	r3, r0
 8041258:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 804125c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8041260:	f040 80a7 	bne.w	80413b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8041264:	2300      	movs	r3, #0
 8041266:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8041268:	687b      	ldr	r3, [r7, #4]
 804126a:	681b      	ldr	r3, [r3, #0]
 804126c:	4618      	mov	r0, r3
 804126e:	f002 fed0 	bl	8044012 <USB_ReadDevAllOutEpInterrupt>
 8041272:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8041274:	e099      	b.n	80413aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8041276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041278:	f003 0301 	and.w	r3, r3, #1
 804127c:	2b00      	cmp	r3, #0
 804127e:	f000 808e 	beq.w	804139e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041282:	687b      	ldr	r3, [r7, #4]
 8041284:	681b      	ldr	r3, [r3, #0]
 8041286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041288:	b2d2      	uxtb	r2, r2
 804128a:	4611      	mov	r1, r2
 804128c:	4618      	mov	r0, r3
 804128e:	f002 fef4 	bl	804407a <USB_ReadDevOutEPInterrupt>
 8041292:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8041294:	693b      	ldr	r3, [r7, #16]
 8041296:	f003 0301 	and.w	r3, r3, #1
 804129a:	2b00      	cmp	r3, #0
 804129c:	d00c      	beq.n	80412b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 804129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80412a0:	015a      	lsls	r2, r3, #5
 80412a2:	69fb      	ldr	r3, [r7, #28]
 80412a4:	4413      	add	r3, r2
 80412a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80412aa:	461a      	mov	r2, r3
 80412ac:	2301      	movs	r3, #1
 80412ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80412b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80412b2:	6878      	ldr	r0, [r7, #4]
 80412b4:	f000 fea4 	bl	8042000 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80412b8:	693b      	ldr	r3, [r7, #16]
 80412ba:	f003 0308 	and.w	r3, r3, #8
 80412be:	2b00      	cmp	r3, #0
 80412c0:	d00c      	beq.n	80412dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80412c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80412c4:	015a      	lsls	r2, r3, #5
 80412c6:	69fb      	ldr	r3, [r7, #28]
 80412c8:	4413      	add	r3, r2
 80412ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80412ce:	461a      	mov	r2, r3
 80412d0:	2308      	movs	r3, #8
 80412d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80412d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80412d6:	6878      	ldr	r0, [r7, #4]
 80412d8:	f000 ff7a 	bl	80421d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80412dc:	693b      	ldr	r3, [r7, #16]
 80412de:	f003 0310 	and.w	r3, r3, #16
 80412e2:	2b00      	cmp	r3, #0
 80412e4:	d008      	beq.n	80412f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80412e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80412e8:	015a      	lsls	r2, r3, #5
 80412ea:	69fb      	ldr	r3, [r7, #28]
 80412ec:	4413      	add	r3, r2
 80412ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80412f2:	461a      	mov	r2, r3
 80412f4:	2310      	movs	r3, #16
 80412f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80412f8:	693b      	ldr	r3, [r7, #16]
 80412fa:	f003 0302 	and.w	r3, r3, #2
 80412fe:	2b00      	cmp	r3, #0
 8041300:	d030      	beq.n	8041364 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8041302:	6a3b      	ldr	r3, [r7, #32]
 8041304:	695b      	ldr	r3, [r3, #20]
 8041306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804130a:	2b80      	cmp	r3, #128	@ 0x80
 804130c:	d109      	bne.n	8041322 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 804130e:	69fb      	ldr	r3, [r7, #28]
 8041310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041314:	685b      	ldr	r3, [r3, #4]
 8041316:	69fa      	ldr	r2, [r7, #28]
 8041318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804131c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8041320:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8041322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041324:	4613      	mov	r3, r2
 8041326:	00db      	lsls	r3, r3, #3
 8041328:	4413      	add	r3, r2
 804132a:	009b      	lsls	r3, r3, #2
 804132c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041330:	687a      	ldr	r2, [r7, #4]
 8041332:	4413      	add	r3, r2
 8041334:	3304      	adds	r3, #4
 8041336:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8041338:	697b      	ldr	r3, [r7, #20]
 804133a:	78db      	ldrb	r3, [r3, #3]
 804133c:	2b01      	cmp	r3, #1
 804133e:	d108      	bne.n	8041352 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8041340:	697b      	ldr	r3, [r7, #20]
 8041342:	2200      	movs	r2, #0
 8041344:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8041346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041348:	b2db      	uxtb	r3, r3
 804134a:	4619      	mov	r1, r3
 804134c:	6878      	ldr	r0, [r7, #4]
 804134e:	f005 fa09 	bl	8046764 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8041352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041354:	015a      	lsls	r2, r3, #5
 8041356:	69fb      	ldr	r3, [r7, #28]
 8041358:	4413      	add	r3, r2
 804135a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804135e:	461a      	mov	r2, r3
 8041360:	2302      	movs	r3, #2
 8041362:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8041364:	693b      	ldr	r3, [r7, #16]
 8041366:	f003 0320 	and.w	r3, r3, #32
 804136a:	2b00      	cmp	r3, #0
 804136c:	d008      	beq.n	8041380 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 804136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041370:	015a      	lsls	r2, r3, #5
 8041372:	69fb      	ldr	r3, [r7, #28]
 8041374:	4413      	add	r3, r2
 8041376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804137a:	461a      	mov	r2, r3
 804137c:	2320      	movs	r3, #32
 804137e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8041380:	693b      	ldr	r3, [r7, #16]
 8041382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041386:	2b00      	cmp	r3, #0
 8041388:	d009      	beq.n	804139e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 804138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804138c:	015a      	lsls	r2, r3, #5
 804138e:	69fb      	ldr	r3, [r7, #28]
 8041390:	4413      	add	r3, r2
 8041392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041396:	461a      	mov	r2, r3
 8041398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 804139c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 804139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80413a0:	3301      	adds	r3, #1
 80413a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80413a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80413a6:	085b      	lsrs	r3, r3, #1
 80413a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80413aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80413ac:	2b00      	cmp	r3, #0
 80413ae:	f47f af62 	bne.w	8041276 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80413b2:	687b      	ldr	r3, [r7, #4]
 80413b4:	681b      	ldr	r3, [r3, #0]
 80413b6:	4618      	mov	r0, r3
 80413b8:	f002 fe18 	bl	8043fec <USB_ReadInterrupts>
 80413bc:	4603      	mov	r3, r0
 80413be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80413c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80413c6:	f040 80db 	bne.w	8041580 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80413ca:	687b      	ldr	r3, [r7, #4]
 80413cc:	681b      	ldr	r3, [r3, #0]
 80413ce:	4618      	mov	r0, r3
 80413d0:	f002 fe39 	bl	8044046 <USB_ReadDevAllInEpInterrupt>
 80413d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80413d6:	2300      	movs	r3, #0
 80413d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80413da:	e0cd      	b.n	8041578 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80413dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80413de:	f003 0301 	and.w	r3, r3, #1
 80413e2:	2b00      	cmp	r3, #0
 80413e4:	f000 80c2 	beq.w	804156c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80413e8:	687b      	ldr	r3, [r7, #4]
 80413ea:	681b      	ldr	r3, [r3, #0]
 80413ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80413ee:	b2d2      	uxtb	r2, r2
 80413f0:	4611      	mov	r1, r2
 80413f2:	4618      	mov	r0, r3
 80413f4:	f002 fe5f 	bl	80440b6 <USB_ReadDevInEPInterrupt>
 80413f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80413fa:	693b      	ldr	r3, [r7, #16]
 80413fc:	f003 0301 	and.w	r3, r3, #1
 8041400:	2b00      	cmp	r3, #0
 8041402:	d057      	beq.n	80414b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041406:	f003 030f 	and.w	r3, r3, #15
 804140a:	2201      	movs	r2, #1
 804140c:	fa02 f303 	lsl.w	r3, r2, r3
 8041410:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041412:	69fb      	ldr	r3, [r7, #28]
 8041414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 804141a:	68fb      	ldr	r3, [r7, #12]
 804141c:	43db      	mvns	r3, r3
 804141e:	69f9      	ldr	r1, [r7, #28]
 8041420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8041424:	4013      	ands	r3, r2
 8041426:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8041428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804142a:	015a      	lsls	r2, r3, #5
 804142c:	69fb      	ldr	r3, [r7, #28]
 804142e:	4413      	add	r3, r2
 8041430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041434:	461a      	mov	r2, r3
 8041436:	2301      	movs	r3, #1
 8041438:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 804143a:	687b      	ldr	r3, [r7, #4]
 804143c:	799b      	ldrb	r3, [r3, #6]
 804143e:	2b01      	cmp	r3, #1
 8041440:	d132      	bne.n	80414a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8041442:	6879      	ldr	r1, [r7, #4]
 8041444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041446:	4613      	mov	r3, r2
 8041448:	00db      	lsls	r3, r3, #3
 804144a:	4413      	add	r3, r2
 804144c:	009b      	lsls	r3, r3, #2
 804144e:	440b      	add	r3, r1
 8041450:	3320      	adds	r3, #32
 8041452:	6819      	ldr	r1, [r3, #0]
 8041454:	6878      	ldr	r0, [r7, #4]
 8041456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041458:	4613      	mov	r3, r2
 804145a:	00db      	lsls	r3, r3, #3
 804145c:	4413      	add	r3, r2
 804145e:	009b      	lsls	r3, r3, #2
 8041460:	4403      	add	r3, r0
 8041462:	331c      	adds	r3, #28
 8041464:	681b      	ldr	r3, [r3, #0]
 8041466:	4419      	add	r1, r3
 8041468:	6878      	ldr	r0, [r7, #4]
 804146a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804146c:	4613      	mov	r3, r2
 804146e:	00db      	lsls	r3, r3, #3
 8041470:	4413      	add	r3, r2
 8041472:	009b      	lsls	r3, r3, #2
 8041474:	4403      	add	r3, r0
 8041476:	3320      	adds	r3, #32
 8041478:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 804147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804147c:	2b00      	cmp	r3, #0
 804147e:	d113      	bne.n	80414a8 <HAL_PCD_IRQHandler+0x3a2>
 8041480:	6879      	ldr	r1, [r7, #4]
 8041482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041484:	4613      	mov	r3, r2
 8041486:	00db      	lsls	r3, r3, #3
 8041488:	4413      	add	r3, r2
 804148a:	009b      	lsls	r3, r3, #2
 804148c:	440b      	add	r3, r1
 804148e:	3324      	adds	r3, #36	@ 0x24
 8041490:	681b      	ldr	r3, [r3, #0]
 8041492:	2b00      	cmp	r3, #0
 8041494:	d108      	bne.n	80414a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8041496:	687b      	ldr	r3, [r7, #4]
 8041498:	6818      	ldr	r0, [r3, #0]
 804149a:	687b      	ldr	r3, [r7, #4]
 804149c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80414a0:	461a      	mov	r2, r3
 80414a2:	2101      	movs	r1, #1
 80414a4:	f002 fe66 	bl	8044174 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80414a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80414aa:	b2db      	uxtb	r3, r3
 80414ac:	4619      	mov	r1, r3
 80414ae:	6878      	ldr	r0, [r7, #4]
 80414b0:	f005 f8d3 	bl	804665a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80414b4:	693b      	ldr	r3, [r7, #16]
 80414b6:	f003 0308 	and.w	r3, r3, #8
 80414ba:	2b00      	cmp	r3, #0
 80414bc:	d008      	beq.n	80414d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80414be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80414c0:	015a      	lsls	r2, r3, #5
 80414c2:	69fb      	ldr	r3, [r7, #28]
 80414c4:	4413      	add	r3, r2
 80414c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80414ca:	461a      	mov	r2, r3
 80414cc:	2308      	movs	r3, #8
 80414ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80414d0:	693b      	ldr	r3, [r7, #16]
 80414d2:	f003 0310 	and.w	r3, r3, #16
 80414d6:	2b00      	cmp	r3, #0
 80414d8:	d008      	beq.n	80414ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80414da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80414dc:	015a      	lsls	r2, r3, #5
 80414de:	69fb      	ldr	r3, [r7, #28]
 80414e0:	4413      	add	r3, r2
 80414e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80414e6:	461a      	mov	r2, r3
 80414e8:	2310      	movs	r3, #16
 80414ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80414ec:	693b      	ldr	r3, [r7, #16]
 80414ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80414f2:	2b00      	cmp	r3, #0
 80414f4:	d008      	beq.n	8041508 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80414f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80414f8:	015a      	lsls	r2, r3, #5
 80414fa:	69fb      	ldr	r3, [r7, #28]
 80414fc:	4413      	add	r3, r2
 80414fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041502:	461a      	mov	r2, r3
 8041504:	2340      	movs	r3, #64	@ 0x40
 8041506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8041508:	693b      	ldr	r3, [r7, #16]
 804150a:	f003 0302 	and.w	r3, r3, #2
 804150e:	2b00      	cmp	r3, #0
 8041510:	d023      	beq.n	804155a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8041512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041514:	6a38      	ldr	r0, [r7, #32]
 8041516:	f001 fe4d 	bl	80431b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 804151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804151c:	4613      	mov	r3, r2
 804151e:	00db      	lsls	r3, r3, #3
 8041520:	4413      	add	r3, r2
 8041522:	009b      	lsls	r3, r3, #2
 8041524:	3310      	adds	r3, #16
 8041526:	687a      	ldr	r2, [r7, #4]
 8041528:	4413      	add	r3, r2
 804152a:	3304      	adds	r3, #4
 804152c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 804152e:	697b      	ldr	r3, [r7, #20]
 8041530:	78db      	ldrb	r3, [r3, #3]
 8041532:	2b01      	cmp	r3, #1
 8041534:	d108      	bne.n	8041548 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8041536:	697b      	ldr	r3, [r7, #20]
 8041538:	2200      	movs	r2, #0
 804153a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 804153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804153e:	b2db      	uxtb	r3, r3
 8041540:	4619      	mov	r1, r3
 8041542:	6878      	ldr	r0, [r7, #4]
 8041544:	f005 f920 	bl	8046788 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8041548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804154a:	015a      	lsls	r2, r3, #5
 804154c:	69fb      	ldr	r3, [r7, #28]
 804154e:	4413      	add	r3, r2
 8041550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041554:	461a      	mov	r2, r3
 8041556:	2302      	movs	r3, #2
 8041558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 804155a:	693b      	ldr	r3, [r7, #16]
 804155c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041560:	2b00      	cmp	r3, #0
 8041562:	d003      	beq.n	804156c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8041564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041566:	6878      	ldr	r0, [r7, #4]
 8041568:	f000 fcbd 	bl	8041ee6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 804156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804156e:	3301      	adds	r3, #1
 8041570:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8041572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041574:	085b      	lsrs	r3, r3, #1
 8041576:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8041578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804157a:	2b00      	cmp	r3, #0
 804157c:	f47f af2e 	bne.w	80413dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8041580:	687b      	ldr	r3, [r7, #4]
 8041582:	681b      	ldr	r3, [r3, #0]
 8041584:	4618      	mov	r0, r3
 8041586:	f002 fd31 	bl	8043fec <USB_ReadInterrupts>
 804158a:	4603      	mov	r3, r0
 804158c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8041590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8041594:	d122      	bne.n	80415dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8041596:	69fb      	ldr	r3, [r7, #28]
 8041598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804159c:	685b      	ldr	r3, [r3, #4]
 804159e:	69fa      	ldr	r2, [r7, #28]
 80415a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80415a4:	f023 0301 	bic.w	r3, r3, #1
 80415a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80415aa:	687b      	ldr	r3, [r7, #4]
 80415ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80415b0:	2b01      	cmp	r3, #1
 80415b2:	d108      	bne.n	80415c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80415b4:	687b      	ldr	r3, [r7, #4]
 80415b6:	2200      	movs	r2, #0
 80415b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80415bc:	2100      	movs	r1, #0
 80415be:	6878      	ldr	r0, [r7, #4]
 80415c0:	f000 fea4 	bl	804230c <HAL_PCDEx_LPM_Callback>
 80415c4:	e002      	b.n	80415cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80415c6:	6878      	ldr	r0, [r7, #4]
 80415c8:	f005 f8be 	bl	8046748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80415cc:	687b      	ldr	r3, [r7, #4]
 80415ce:	681b      	ldr	r3, [r3, #0]
 80415d0:	695a      	ldr	r2, [r3, #20]
 80415d2:	687b      	ldr	r3, [r7, #4]
 80415d4:	681b      	ldr	r3, [r3, #0]
 80415d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80415da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80415dc:	687b      	ldr	r3, [r7, #4]
 80415de:	681b      	ldr	r3, [r3, #0]
 80415e0:	4618      	mov	r0, r3
 80415e2:	f002 fd03 	bl	8043fec <USB_ReadInterrupts>
 80415e6:	4603      	mov	r3, r0
 80415e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80415ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80415f0:	d112      	bne.n	8041618 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80415f2:	69fb      	ldr	r3, [r7, #28]
 80415f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80415f8:	689b      	ldr	r3, [r3, #8]
 80415fa:	f003 0301 	and.w	r3, r3, #1
 80415fe:	2b01      	cmp	r3, #1
 8041600:	d102      	bne.n	8041608 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8041602:	6878      	ldr	r0, [r7, #4]
 8041604:	f005 f87a 	bl	80466fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8041608:	687b      	ldr	r3, [r7, #4]
 804160a:	681b      	ldr	r3, [r3, #0]
 804160c:	695a      	ldr	r2, [r3, #20]
 804160e:	687b      	ldr	r3, [r7, #4]
 8041610:	681b      	ldr	r3, [r3, #0]
 8041612:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8041616:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8041618:	687b      	ldr	r3, [r7, #4]
 804161a:	681b      	ldr	r3, [r3, #0]
 804161c:	4618      	mov	r0, r3
 804161e:	f002 fce5 	bl	8043fec <USB_ReadInterrupts>
 8041622:	4603      	mov	r3, r0
 8041624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8041628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804162c:	f040 80b7 	bne.w	804179e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8041630:	69fb      	ldr	r3, [r7, #28]
 8041632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041636:	685b      	ldr	r3, [r3, #4]
 8041638:	69fa      	ldr	r2, [r7, #28]
 804163a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804163e:	f023 0301 	bic.w	r3, r3, #1
 8041642:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8041644:	687b      	ldr	r3, [r7, #4]
 8041646:	681b      	ldr	r3, [r3, #0]
 8041648:	2110      	movs	r1, #16
 804164a:	4618      	mov	r0, r3
 804164c:	f001 fdb2 	bl	80431b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041650:	2300      	movs	r3, #0
 8041652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8041654:	e046      	b.n	80416e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8041656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8041658:	015a      	lsls	r2, r3, #5
 804165a:	69fb      	ldr	r3, [r7, #28]
 804165c:	4413      	add	r3, r2
 804165e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041662:	461a      	mov	r2, r3
 8041664:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8041668:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 804166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804166c:	015a      	lsls	r2, r3, #5
 804166e:	69fb      	ldr	r3, [r7, #28]
 8041670:	4413      	add	r3, r2
 8041672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041676:	681b      	ldr	r3, [r3, #0]
 8041678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804167a:	0151      	lsls	r1, r2, #5
 804167c:	69fa      	ldr	r2, [r7, #28]
 804167e:	440a      	add	r2, r1
 8041680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8041684:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8041688:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 804168a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804168c:	015a      	lsls	r2, r3, #5
 804168e:	69fb      	ldr	r3, [r7, #28]
 8041690:	4413      	add	r3, r2
 8041692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041696:	461a      	mov	r2, r3
 8041698:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804169c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 804169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80416a0:	015a      	lsls	r2, r3, #5
 80416a2:	69fb      	ldr	r3, [r7, #28]
 80416a4:	4413      	add	r3, r2
 80416a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80416aa:	681b      	ldr	r3, [r3, #0]
 80416ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80416ae:	0151      	lsls	r1, r2, #5
 80416b0:	69fa      	ldr	r2, [r7, #28]
 80416b2:	440a      	add	r2, r1
 80416b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80416b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80416bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80416be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80416c0:	015a      	lsls	r2, r3, #5
 80416c2:	69fb      	ldr	r3, [r7, #28]
 80416c4:	4413      	add	r3, r2
 80416c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80416ca:	681b      	ldr	r3, [r3, #0]
 80416cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80416ce:	0151      	lsls	r1, r2, #5
 80416d0:	69fa      	ldr	r2, [r7, #28]
 80416d2:	440a      	add	r2, r1
 80416d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80416d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80416dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80416de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80416e0:	3301      	adds	r3, #1
 80416e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80416e4:	687b      	ldr	r3, [r7, #4]
 80416e6:	791b      	ldrb	r3, [r3, #4]
 80416e8:	461a      	mov	r2, r3
 80416ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80416ec:	4293      	cmp	r3, r2
 80416ee:	d3b2      	bcc.n	8041656 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80416f0:	69fb      	ldr	r3, [r7, #28]
 80416f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80416f6:	69db      	ldr	r3, [r3, #28]
 80416f8:	69fa      	ldr	r2, [r7, #28]
 80416fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80416fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8041702:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8041704:	687b      	ldr	r3, [r7, #4]
 8041706:	7bdb      	ldrb	r3, [r3, #15]
 8041708:	2b00      	cmp	r3, #0
 804170a:	d016      	beq.n	804173a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 804170c:	69fb      	ldr	r3, [r7, #28]
 804170e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8041716:	69fa      	ldr	r2, [r7, #28]
 8041718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804171c:	f043 030b 	orr.w	r3, r3, #11
 8041720:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8041724:	69fb      	ldr	r3, [r7, #28]
 8041726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804172a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804172c:	69fa      	ldr	r2, [r7, #28]
 804172e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041732:	f043 030b 	orr.w	r3, r3, #11
 8041736:	6453      	str	r3, [r2, #68]	@ 0x44
 8041738:	e015      	b.n	8041766 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 804173a:	69fb      	ldr	r3, [r7, #28]
 804173c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041740:	695b      	ldr	r3, [r3, #20]
 8041742:	69fa      	ldr	r2, [r7, #28]
 8041744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041748:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 804174c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8041750:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8041752:	69fb      	ldr	r3, [r7, #28]
 8041754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041758:	691b      	ldr	r3, [r3, #16]
 804175a:	69fa      	ldr	r2, [r7, #28]
 804175c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041760:	f043 030b 	orr.w	r3, r3, #11
 8041764:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8041766:	69fb      	ldr	r3, [r7, #28]
 8041768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804176c:	681b      	ldr	r3, [r3, #0]
 804176e:	69fa      	ldr	r2, [r7, #28]
 8041770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041774:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8041778:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804177a:	687b      	ldr	r3, [r7, #4]
 804177c:	6818      	ldr	r0, [r3, #0]
 804177e:	687b      	ldr	r3, [r7, #4]
 8041780:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8041782:	687b      	ldr	r3, [r7, #4]
 8041784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8041788:	461a      	mov	r2, r3
 804178a:	f002 fcf3 	bl	8044174 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	681b      	ldr	r3, [r3, #0]
 8041792:	695a      	ldr	r2, [r3, #20]
 8041794:	687b      	ldr	r3, [r7, #4]
 8041796:	681b      	ldr	r3, [r3, #0]
 8041798:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 804179c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	681b      	ldr	r3, [r3, #0]
 80417a2:	4618      	mov	r0, r3
 80417a4:	f002 fc22 	bl	8043fec <USB_ReadInterrupts>
 80417a8:	4603      	mov	r3, r0
 80417aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80417ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80417b2:	d123      	bne.n	80417fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	681b      	ldr	r3, [r3, #0]
 80417b8:	4618      	mov	r0, r3
 80417ba:	f002 fcb8 	bl	804412e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80417be:	687b      	ldr	r3, [r7, #4]
 80417c0:	681b      	ldr	r3, [r3, #0]
 80417c2:	4618      	mov	r0, r3
 80417c4:	f001 fd6f 	bl	80432a6 <USB_GetDevSpeed>
 80417c8:	4603      	mov	r3, r0
 80417ca:	461a      	mov	r2, r3
 80417cc:	687b      	ldr	r3, [r7, #4]
 80417ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80417d0:	687b      	ldr	r3, [r7, #4]
 80417d2:	681c      	ldr	r4, [r3, #0]
 80417d4:	f001 fa0a 	bl	8042bec <HAL_RCC_GetHCLKFreq>
 80417d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80417da:	687b      	ldr	r3, [r7, #4]
 80417dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80417de:	461a      	mov	r2, r3
 80417e0:	4620      	mov	r0, r4
 80417e2:	f001 fa73 	bl	8042ccc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80417e6:	6878      	ldr	r0, [r7, #4]
 80417e8:	f004 ff5f 	bl	80466aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80417ec:	687b      	ldr	r3, [r7, #4]
 80417ee:	681b      	ldr	r3, [r3, #0]
 80417f0:	695a      	ldr	r2, [r3, #20]
 80417f2:	687b      	ldr	r3, [r7, #4]
 80417f4:	681b      	ldr	r3, [r3, #0]
 80417f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80417fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80417fc:	687b      	ldr	r3, [r7, #4]
 80417fe:	681b      	ldr	r3, [r3, #0]
 8041800:	4618      	mov	r0, r3
 8041802:	f002 fbf3 	bl	8043fec <USB_ReadInterrupts>
 8041806:	4603      	mov	r3, r0
 8041808:	f003 0308 	and.w	r3, r3, #8
 804180c:	2b08      	cmp	r3, #8
 804180e:	d10a      	bne.n	8041826 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8041810:	6878      	ldr	r0, [r7, #4]
 8041812:	f004 ff3c 	bl	804668e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8041816:	687b      	ldr	r3, [r7, #4]
 8041818:	681b      	ldr	r3, [r3, #0]
 804181a:	695a      	ldr	r2, [r3, #20]
 804181c:	687b      	ldr	r3, [r7, #4]
 804181e:	681b      	ldr	r3, [r3, #0]
 8041820:	f002 0208 	and.w	r2, r2, #8
 8041824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8041826:	687b      	ldr	r3, [r7, #4]
 8041828:	681b      	ldr	r3, [r3, #0]
 804182a:	4618      	mov	r0, r3
 804182c:	f002 fbde 	bl	8043fec <USB_ReadInterrupts>
 8041830:	4603      	mov	r3, r0
 8041832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041836:	2b80      	cmp	r3, #128	@ 0x80
 8041838:	d123      	bne.n	8041882 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 804183a:	6a3b      	ldr	r3, [r7, #32]
 804183c:	699b      	ldr	r3, [r3, #24]
 804183e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8041842:	6a3b      	ldr	r3, [r7, #32]
 8041844:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8041846:	2301      	movs	r3, #1
 8041848:	627b      	str	r3, [r7, #36]	@ 0x24
 804184a:	e014      	b.n	8041876 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 804184c:	6879      	ldr	r1, [r7, #4]
 804184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041850:	4613      	mov	r3, r2
 8041852:	00db      	lsls	r3, r3, #3
 8041854:	4413      	add	r3, r2
 8041856:	009b      	lsls	r3, r3, #2
 8041858:	440b      	add	r3, r1
 804185a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 804185e:	781b      	ldrb	r3, [r3, #0]
 8041860:	2b01      	cmp	r3, #1
 8041862:	d105      	bne.n	8041870 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8041864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041866:	b2db      	uxtb	r3, r3
 8041868:	4619      	mov	r1, r3
 804186a:	6878      	ldr	r0, [r7, #4]
 804186c:	f000 fb0a 	bl	8041e84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8041870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041872:	3301      	adds	r3, #1
 8041874:	627b      	str	r3, [r7, #36]	@ 0x24
 8041876:	687b      	ldr	r3, [r7, #4]
 8041878:	791b      	ldrb	r3, [r3, #4]
 804187a:	461a      	mov	r2, r3
 804187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804187e:	4293      	cmp	r3, r2
 8041880:	d3e4      	bcc.n	804184c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8041882:	687b      	ldr	r3, [r7, #4]
 8041884:	681b      	ldr	r3, [r3, #0]
 8041886:	4618      	mov	r0, r3
 8041888:	f002 fbb0 	bl	8043fec <USB_ReadInterrupts>
 804188c:	4603      	mov	r3, r0
 804188e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8041892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8041896:	d13c      	bne.n	8041912 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8041898:	2301      	movs	r3, #1
 804189a:	627b      	str	r3, [r7, #36]	@ 0x24
 804189c:	e02b      	b.n	80418f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 804189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80418a0:	015a      	lsls	r2, r3, #5
 80418a2:	69fb      	ldr	r3, [r7, #28]
 80418a4:	4413      	add	r3, r2
 80418a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80418aa:	681b      	ldr	r3, [r3, #0]
 80418ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80418ae:	6879      	ldr	r1, [r7, #4]
 80418b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80418b2:	4613      	mov	r3, r2
 80418b4:	00db      	lsls	r3, r3, #3
 80418b6:	4413      	add	r3, r2
 80418b8:	009b      	lsls	r3, r3, #2
 80418ba:	440b      	add	r3, r1
 80418bc:	3318      	adds	r3, #24
 80418be:	781b      	ldrb	r3, [r3, #0]
 80418c0:	2b01      	cmp	r3, #1
 80418c2:	d115      	bne.n	80418f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80418c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80418c6:	2b00      	cmp	r3, #0
 80418c8:	da12      	bge.n	80418f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80418ca:	6879      	ldr	r1, [r7, #4]
 80418cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80418ce:	4613      	mov	r3, r2
 80418d0:	00db      	lsls	r3, r3, #3
 80418d2:	4413      	add	r3, r2
 80418d4:	009b      	lsls	r3, r3, #2
 80418d6:	440b      	add	r3, r1
 80418d8:	3317      	adds	r3, #23
 80418da:	2201      	movs	r2, #1
 80418dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80418de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80418e0:	b2db      	uxtb	r3, r3
 80418e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80418e6:	b2db      	uxtb	r3, r3
 80418e8:	4619      	mov	r1, r3
 80418ea:	6878      	ldr	r0, [r7, #4]
 80418ec:	f000 faca 	bl	8041e84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80418f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80418f2:	3301      	adds	r3, #1
 80418f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80418f6:	687b      	ldr	r3, [r7, #4]
 80418f8:	791b      	ldrb	r3, [r3, #4]
 80418fa:	461a      	mov	r2, r3
 80418fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80418fe:	4293      	cmp	r3, r2
 8041900:	d3cd      	bcc.n	804189e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8041902:	687b      	ldr	r3, [r7, #4]
 8041904:	681b      	ldr	r3, [r3, #0]
 8041906:	695a      	ldr	r2, [r3, #20]
 8041908:	687b      	ldr	r3, [r7, #4]
 804190a:	681b      	ldr	r3, [r3, #0]
 804190c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8041910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8041912:	687b      	ldr	r3, [r7, #4]
 8041914:	681b      	ldr	r3, [r3, #0]
 8041916:	4618      	mov	r0, r3
 8041918:	f002 fb68 	bl	8043fec <USB_ReadInterrupts>
 804191c:	4603      	mov	r3, r0
 804191e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8041926:	d156      	bne.n	80419d6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8041928:	2301      	movs	r3, #1
 804192a:	627b      	str	r3, [r7, #36]	@ 0x24
 804192c:	e045      	b.n	80419ba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 804192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041930:	015a      	lsls	r2, r3, #5
 8041932:	69fb      	ldr	r3, [r7, #28]
 8041934:	4413      	add	r3, r2
 8041936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804193a:	681b      	ldr	r3, [r3, #0]
 804193c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 804193e:	6879      	ldr	r1, [r7, #4]
 8041940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041942:	4613      	mov	r3, r2
 8041944:	00db      	lsls	r3, r3, #3
 8041946:	4413      	add	r3, r2
 8041948:	009b      	lsls	r3, r3, #2
 804194a:	440b      	add	r3, r1
 804194c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8041950:	781b      	ldrb	r3, [r3, #0]
 8041952:	2b01      	cmp	r3, #1
 8041954:	d12e      	bne.n	80419b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8041956:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8041958:	2b00      	cmp	r3, #0
 804195a:	da2b      	bge.n	80419b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 804195c:	69bb      	ldr	r3, [r7, #24]
 804195e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8041968:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 804196c:	429a      	cmp	r2, r3
 804196e:	d121      	bne.n	80419b4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8041970:	6879      	ldr	r1, [r7, #4]
 8041972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041974:	4613      	mov	r3, r2
 8041976:	00db      	lsls	r3, r3, #3
 8041978:	4413      	add	r3, r2
 804197a:	009b      	lsls	r3, r3, #2
 804197c:	440b      	add	r3, r1
 804197e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8041982:	2201      	movs	r2, #1
 8041984:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8041986:	6a3b      	ldr	r3, [r7, #32]
 8041988:	699b      	ldr	r3, [r3, #24]
 804198a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 804198e:	6a3b      	ldr	r3, [r7, #32]
 8041990:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8041992:	6a3b      	ldr	r3, [r7, #32]
 8041994:	695b      	ldr	r3, [r3, #20]
 8041996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804199a:	2b00      	cmp	r3, #0
 804199c:	d10a      	bne.n	80419b4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 804199e:	69fb      	ldr	r3, [r7, #28]
 80419a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80419a4:	685b      	ldr	r3, [r3, #4]
 80419a6:	69fa      	ldr	r2, [r7, #28]
 80419a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80419ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80419b0:	6053      	str	r3, [r2, #4]
            break;
 80419b2:	e008      	b.n	80419c6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80419b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80419b6:	3301      	adds	r3, #1
 80419b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80419ba:	687b      	ldr	r3, [r7, #4]
 80419bc:	791b      	ldrb	r3, [r3, #4]
 80419be:	461a      	mov	r2, r3
 80419c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80419c2:	4293      	cmp	r3, r2
 80419c4:	d3b3      	bcc.n	804192e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80419c6:	687b      	ldr	r3, [r7, #4]
 80419c8:	681b      	ldr	r3, [r3, #0]
 80419ca:	695a      	ldr	r2, [r3, #20]
 80419cc:	687b      	ldr	r3, [r7, #4]
 80419ce:	681b      	ldr	r3, [r3, #0]
 80419d0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80419d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80419d6:	687b      	ldr	r3, [r7, #4]
 80419d8:	681b      	ldr	r3, [r3, #0]
 80419da:	4618      	mov	r0, r3
 80419dc:	f002 fb06 	bl	8043fec <USB_ReadInterrupts>
 80419e0:	4603      	mov	r3, r0
 80419e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80419e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80419ea:	d10a      	bne.n	8041a02 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80419ec:	6878      	ldr	r0, [r7, #4]
 80419ee:	f004 fedd 	bl	80467ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80419f2:	687b      	ldr	r3, [r7, #4]
 80419f4:	681b      	ldr	r3, [r3, #0]
 80419f6:	695a      	ldr	r2, [r3, #20]
 80419f8:	687b      	ldr	r3, [r7, #4]
 80419fa:	681b      	ldr	r3, [r3, #0]
 80419fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8041a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8041a02:	687b      	ldr	r3, [r7, #4]
 8041a04:	681b      	ldr	r3, [r3, #0]
 8041a06:	4618      	mov	r0, r3
 8041a08:	f002 faf0 	bl	8043fec <USB_ReadInterrupts>
 8041a0c:	4603      	mov	r3, r0
 8041a0e:	f003 0304 	and.w	r3, r3, #4
 8041a12:	2b04      	cmp	r3, #4
 8041a14:	d115      	bne.n	8041a42 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8041a16:	687b      	ldr	r3, [r7, #4]
 8041a18:	681b      	ldr	r3, [r3, #0]
 8041a1a:	685b      	ldr	r3, [r3, #4]
 8041a1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8041a1e:	69bb      	ldr	r3, [r7, #24]
 8041a20:	f003 0304 	and.w	r3, r3, #4
 8041a24:	2b00      	cmp	r3, #0
 8041a26:	d002      	beq.n	8041a2e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8041a28:	6878      	ldr	r0, [r7, #4]
 8041a2a:	f004 fecd 	bl	80467c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8041a2e:	687b      	ldr	r3, [r7, #4]
 8041a30:	681b      	ldr	r3, [r3, #0]
 8041a32:	6859      	ldr	r1, [r3, #4]
 8041a34:	687b      	ldr	r3, [r7, #4]
 8041a36:	681b      	ldr	r3, [r3, #0]
 8041a38:	69ba      	ldr	r2, [r7, #24]
 8041a3a:	430a      	orrs	r2, r1
 8041a3c:	605a      	str	r2, [r3, #4]
 8041a3e:	e000      	b.n	8041a42 <HAL_PCD_IRQHandler+0x93c>
      return;
 8041a40:	bf00      	nop
    }
  }
}
 8041a42:	3734      	adds	r7, #52	@ 0x34
 8041a44:	46bd      	mov	sp, r7
 8041a46:	bd90      	pop	{r4, r7, pc}

08041a48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8041a48:	b580      	push	{r7, lr}
 8041a4a:	b082      	sub	sp, #8
 8041a4c:	af00      	add	r7, sp, #0
 8041a4e:	6078      	str	r0, [r7, #4]
 8041a50:	460b      	mov	r3, r1
 8041a52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8041a54:	687b      	ldr	r3, [r7, #4]
 8041a56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041a5a:	2b01      	cmp	r3, #1
 8041a5c:	d101      	bne.n	8041a62 <HAL_PCD_SetAddress+0x1a>
 8041a5e:	2302      	movs	r3, #2
 8041a60:	e012      	b.n	8041a88 <HAL_PCD_SetAddress+0x40>
 8041a62:	687b      	ldr	r3, [r7, #4]
 8041a64:	2201      	movs	r2, #1
 8041a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8041a6a:	687b      	ldr	r3, [r7, #4]
 8041a6c:	78fa      	ldrb	r2, [r7, #3]
 8041a6e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8041a70:	687b      	ldr	r3, [r7, #4]
 8041a72:	681b      	ldr	r3, [r3, #0]
 8041a74:	78fa      	ldrb	r2, [r7, #3]
 8041a76:	4611      	mov	r1, r2
 8041a78:	4618      	mov	r0, r3
 8041a7a:	f002 fa4f 	bl	8043f1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8041a7e:	687b      	ldr	r3, [r7, #4]
 8041a80:	2200      	movs	r2, #0
 8041a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041a86:	2300      	movs	r3, #0
}
 8041a88:	4618      	mov	r0, r3
 8041a8a:	3708      	adds	r7, #8
 8041a8c:	46bd      	mov	sp, r7
 8041a8e:	bd80      	pop	{r7, pc}

08041a90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8041a90:	b580      	push	{r7, lr}
 8041a92:	b084      	sub	sp, #16
 8041a94:	af00      	add	r7, sp, #0
 8041a96:	6078      	str	r0, [r7, #4]
 8041a98:	4608      	mov	r0, r1
 8041a9a:	4611      	mov	r1, r2
 8041a9c:	461a      	mov	r2, r3
 8041a9e:	4603      	mov	r3, r0
 8041aa0:	70fb      	strb	r3, [r7, #3]
 8041aa2:	460b      	mov	r3, r1
 8041aa4:	803b      	strh	r3, [r7, #0]
 8041aa6:	4613      	mov	r3, r2
 8041aa8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8041aaa:	2300      	movs	r3, #0
 8041aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8041aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041ab2:	2b00      	cmp	r3, #0
 8041ab4:	da0f      	bge.n	8041ad6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041ab6:	78fb      	ldrb	r3, [r7, #3]
 8041ab8:	f003 020f 	and.w	r2, r3, #15
 8041abc:	4613      	mov	r3, r2
 8041abe:	00db      	lsls	r3, r3, #3
 8041ac0:	4413      	add	r3, r2
 8041ac2:	009b      	lsls	r3, r3, #2
 8041ac4:	3310      	adds	r3, #16
 8041ac6:	687a      	ldr	r2, [r7, #4]
 8041ac8:	4413      	add	r3, r2
 8041aca:	3304      	adds	r3, #4
 8041acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041ace:	68fb      	ldr	r3, [r7, #12]
 8041ad0:	2201      	movs	r2, #1
 8041ad2:	705a      	strb	r2, [r3, #1]
 8041ad4:	e00f      	b.n	8041af6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041ad6:	78fb      	ldrb	r3, [r7, #3]
 8041ad8:	f003 020f 	and.w	r2, r3, #15
 8041adc:	4613      	mov	r3, r2
 8041ade:	00db      	lsls	r3, r3, #3
 8041ae0:	4413      	add	r3, r2
 8041ae2:	009b      	lsls	r3, r3, #2
 8041ae4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041ae8:	687a      	ldr	r2, [r7, #4]
 8041aea:	4413      	add	r3, r2
 8041aec:	3304      	adds	r3, #4
 8041aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041af0:	68fb      	ldr	r3, [r7, #12]
 8041af2:	2200      	movs	r2, #0
 8041af4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8041af6:	78fb      	ldrb	r3, [r7, #3]
 8041af8:	f003 030f 	and.w	r3, r3, #15
 8041afc:	b2da      	uxtb	r2, r3
 8041afe:	68fb      	ldr	r3, [r7, #12]
 8041b00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8041b02:	883b      	ldrh	r3, [r7, #0]
 8041b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8041b08:	68fb      	ldr	r3, [r7, #12]
 8041b0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8041b0c:	68fb      	ldr	r3, [r7, #12]
 8041b0e:	78ba      	ldrb	r2, [r7, #2]
 8041b10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8041b12:	68fb      	ldr	r3, [r7, #12]
 8041b14:	785b      	ldrb	r3, [r3, #1]
 8041b16:	2b00      	cmp	r3, #0
 8041b18:	d004      	beq.n	8041b24 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8041b1a:	68fb      	ldr	r3, [r7, #12]
 8041b1c:	781b      	ldrb	r3, [r3, #0]
 8041b1e:	461a      	mov	r2, r3
 8041b20:	68fb      	ldr	r3, [r7, #12]
 8041b22:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8041b24:	78bb      	ldrb	r3, [r7, #2]
 8041b26:	2b02      	cmp	r3, #2
 8041b28:	d102      	bne.n	8041b30 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8041b2a:	68fb      	ldr	r3, [r7, #12]
 8041b2c:	2200      	movs	r2, #0
 8041b2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041b36:	2b01      	cmp	r3, #1
 8041b38:	d101      	bne.n	8041b3e <HAL_PCD_EP_Open+0xae>
 8041b3a:	2302      	movs	r3, #2
 8041b3c:	e00e      	b.n	8041b5c <HAL_PCD_EP_Open+0xcc>
 8041b3e:	687b      	ldr	r3, [r7, #4]
 8041b40:	2201      	movs	r2, #1
 8041b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8041b46:	687b      	ldr	r3, [r7, #4]
 8041b48:	681b      	ldr	r3, [r3, #0]
 8041b4a:	68f9      	ldr	r1, [r7, #12]
 8041b4c:	4618      	mov	r0, r3
 8041b4e:	f001 fbcf 	bl	80432f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8041b52:	687b      	ldr	r3, [r7, #4]
 8041b54:	2200      	movs	r2, #0
 8041b56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8041b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8041b5c:	4618      	mov	r0, r3
 8041b5e:	3710      	adds	r7, #16
 8041b60:	46bd      	mov	sp, r7
 8041b62:	bd80      	pop	{r7, pc}

08041b64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041b64:	b580      	push	{r7, lr}
 8041b66:	b084      	sub	sp, #16
 8041b68:	af00      	add	r7, sp, #0
 8041b6a:	6078      	str	r0, [r7, #4]
 8041b6c:	460b      	mov	r3, r1
 8041b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8041b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041b74:	2b00      	cmp	r3, #0
 8041b76:	da0f      	bge.n	8041b98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041b78:	78fb      	ldrb	r3, [r7, #3]
 8041b7a:	f003 020f 	and.w	r2, r3, #15
 8041b7e:	4613      	mov	r3, r2
 8041b80:	00db      	lsls	r3, r3, #3
 8041b82:	4413      	add	r3, r2
 8041b84:	009b      	lsls	r3, r3, #2
 8041b86:	3310      	adds	r3, #16
 8041b88:	687a      	ldr	r2, [r7, #4]
 8041b8a:	4413      	add	r3, r2
 8041b8c:	3304      	adds	r3, #4
 8041b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041b90:	68fb      	ldr	r3, [r7, #12]
 8041b92:	2201      	movs	r2, #1
 8041b94:	705a      	strb	r2, [r3, #1]
 8041b96:	e00f      	b.n	8041bb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041b98:	78fb      	ldrb	r3, [r7, #3]
 8041b9a:	f003 020f 	and.w	r2, r3, #15
 8041b9e:	4613      	mov	r3, r2
 8041ba0:	00db      	lsls	r3, r3, #3
 8041ba2:	4413      	add	r3, r2
 8041ba4:	009b      	lsls	r3, r3, #2
 8041ba6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041baa:	687a      	ldr	r2, [r7, #4]
 8041bac:	4413      	add	r3, r2
 8041bae:	3304      	adds	r3, #4
 8041bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041bb2:	68fb      	ldr	r3, [r7, #12]
 8041bb4:	2200      	movs	r2, #0
 8041bb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8041bb8:	78fb      	ldrb	r3, [r7, #3]
 8041bba:	f003 030f 	and.w	r3, r3, #15
 8041bbe:	b2da      	uxtb	r2, r3
 8041bc0:	68fb      	ldr	r3, [r7, #12]
 8041bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8041bc4:	687b      	ldr	r3, [r7, #4]
 8041bc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041bca:	2b01      	cmp	r3, #1
 8041bcc:	d101      	bne.n	8041bd2 <HAL_PCD_EP_Close+0x6e>
 8041bce:	2302      	movs	r3, #2
 8041bd0:	e00e      	b.n	8041bf0 <HAL_PCD_EP_Close+0x8c>
 8041bd2:	687b      	ldr	r3, [r7, #4]
 8041bd4:	2201      	movs	r2, #1
 8041bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8041bda:	687b      	ldr	r3, [r7, #4]
 8041bdc:	681b      	ldr	r3, [r3, #0]
 8041bde:	68f9      	ldr	r1, [r7, #12]
 8041be0:	4618      	mov	r0, r3
 8041be2:	f001 fc0d 	bl	8043400 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8041be6:	687b      	ldr	r3, [r7, #4]
 8041be8:	2200      	movs	r2, #0
 8041bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8041bee:	2300      	movs	r3, #0
}
 8041bf0:	4618      	mov	r0, r3
 8041bf2:	3710      	adds	r7, #16
 8041bf4:	46bd      	mov	sp, r7
 8041bf6:	bd80      	pop	{r7, pc}

08041bf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8041bf8:	b580      	push	{r7, lr}
 8041bfa:	b086      	sub	sp, #24
 8041bfc:	af00      	add	r7, sp, #0
 8041bfe:	60f8      	str	r0, [r7, #12]
 8041c00:	607a      	str	r2, [r7, #4]
 8041c02:	603b      	str	r3, [r7, #0]
 8041c04:	460b      	mov	r3, r1
 8041c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041c08:	7afb      	ldrb	r3, [r7, #11]
 8041c0a:	f003 020f 	and.w	r2, r3, #15
 8041c0e:	4613      	mov	r3, r2
 8041c10:	00db      	lsls	r3, r3, #3
 8041c12:	4413      	add	r3, r2
 8041c14:	009b      	lsls	r3, r3, #2
 8041c16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041c1a:	68fa      	ldr	r2, [r7, #12]
 8041c1c:	4413      	add	r3, r2
 8041c1e:	3304      	adds	r3, #4
 8041c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8041c22:	697b      	ldr	r3, [r7, #20]
 8041c24:	687a      	ldr	r2, [r7, #4]
 8041c26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8041c28:	697b      	ldr	r3, [r7, #20]
 8041c2a:	683a      	ldr	r2, [r7, #0]
 8041c2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8041c2e:	697b      	ldr	r3, [r7, #20]
 8041c30:	2200      	movs	r2, #0
 8041c32:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8041c34:	697b      	ldr	r3, [r7, #20]
 8041c36:	2200      	movs	r2, #0
 8041c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041c3a:	7afb      	ldrb	r3, [r7, #11]
 8041c3c:	f003 030f 	and.w	r3, r3, #15
 8041c40:	b2da      	uxtb	r2, r3
 8041c42:	697b      	ldr	r3, [r7, #20]
 8041c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8041c46:	68fb      	ldr	r3, [r7, #12]
 8041c48:	799b      	ldrb	r3, [r3, #6]
 8041c4a:	2b01      	cmp	r3, #1
 8041c4c:	d102      	bne.n	8041c54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8041c4e:	687a      	ldr	r2, [r7, #4]
 8041c50:	697b      	ldr	r3, [r7, #20]
 8041c52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8041c54:	68fb      	ldr	r3, [r7, #12]
 8041c56:	6818      	ldr	r0, [r3, #0]
 8041c58:	68fb      	ldr	r3, [r7, #12]
 8041c5a:	799b      	ldrb	r3, [r3, #6]
 8041c5c:	461a      	mov	r2, r3
 8041c5e:	6979      	ldr	r1, [r7, #20]
 8041c60:	f001 fcaa 	bl	80435b8 <USB_EPStartXfer>

  return HAL_OK;
 8041c64:	2300      	movs	r3, #0
}
 8041c66:	4618      	mov	r0, r3
 8041c68:	3718      	adds	r7, #24
 8041c6a:	46bd      	mov	sp, r7
 8041c6c:	bd80      	pop	{r7, pc}

08041c6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8041c6e:	b480      	push	{r7}
 8041c70:	b083      	sub	sp, #12
 8041c72:	af00      	add	r7, sp, #0
 8041c74:	6078      	str	r0, [r7, #4]
 8041c76:	460b      	mov	r3, r1
 8041c78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8041c7a:	78fb      	ldrb	r3, [r7, #3]
 8041c7c:	f003 020f 	and.w	r2, r3, #15
 8041c80:	6879      	ldr	r1, [r7, #4]
 8041c82:	4613      	mov	r3, r2
 8041c84:	00db      	lsls	r3, r3, #3
 8041c86:	4413      	add	r3, r2
 8041c88:	009b      	lsls	r3, r3, #2
 8041c8a:	440b      	add	r3, r1
 8041c8c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8041c90:	681b      	ldr	r3, [r3, #0]
}
 8041c92:	4618      	mov	r0, r3
 8041c94:	370c      	adds	r7, #12
 8041c96:	46bd      	mov	sp, r7
 8041c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c9c:	4770      	bx	lr

08041c9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8041c9e:	b580      	push	{r7, lr}
 8041ca0:	b086      	sub	sp, #24
 8041ca2:	af00      	add	r7, sp, #0
 8041ca4:	60f8      	str	r0, [r7, #12]
 8041ca6:	607a      	str	r2, [r7, #4]
 8041ca8:	603b      	str	r3, [r7, #0]
 8041caa:	460b      	mov	r3, r1
 8041cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041cae:	7afb      	ldrb	r3, [r7, #11]
 8041cb0:	f003 020f 	and.w	r2, r3, #15
 8041cb4:	4613      	mov	r3, r2
 8041cb6:	00db      	lsls	r3, r3, #3
 8041cb8:	4413      	add	r3, r2
 8041cba:	009b      	lsls	r3, r3, #2
 8041cbc:	3310      	adds	r3, #16
 8041cbe:	68fa      	ldr	r2, [r7, #12]
 8041cc0:	4413      	add	r3, r2
 8041cc2:	3304      	adds	r3, #4
 8041cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8041cc6:	697b      	ldr	r3, [r7, #20]
 8041cc8:	687a      	ldr	r2, [r7, #4]
 8041cca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8041ccc:	697b      	ldr	r3, [r7, #20]
 8041cce:	683a      	ldr	r2, [r7, #0]
 8041cd0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8041cd2:	697b      	ldr	r3, [r7, #20]
 8041cd4:	2200      	movs	r2, #0
 8041cd6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8041cd8:	697b      	ldr	r3, [r7, #20]
 8041cda:	2201      	movs	r2, #1
 8041cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041cde:	7afb      	ldrb	r3, [r7, #11]
 8041ce0:	f003 030f 	and.w	r3, r3, #15
 8041ce4:	b2da      	uxtb	r2, r3
 8041ce6:	697b      	ldr	r3, [r7, #20]
 8041ce8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8041cea:	68fb      	ldr	r3, [r7, #12]
 8041cec:	799b      	ldrb	r3, [r3, #6]
 8041cee:	2b01      	cmp	r3, #1
 8041cf0:	d102      	bne.n	8041cf8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8041cf2:	687a      	ldr	r2, [r7, #4]
 8041cf4:	697b      	ldr	r3, [r7, #20]
 8041cf6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8041cf8:	68fb      	ldr	r3, [r7, #12]
 8041cfa:	6818      	ldr	r0, [r3, #0]
 8041cfc:	68fb      	ldr	r3, [r7, #12]
 8041cfe:	799b      	ldrb	r3, [r3, #6]
 8041d00:	461a      	mov	r2, r3
 8041d02:	6979      	ldr	r1, [r7, #20]
 8041d04:	f001 fc58 	bl	80435b8 <USB_EPStartXfer>

  return HAL_OK;
 8041d08:	2300      	movs	r3, #0
}
 8041d0a:	4618      	mov	r0, r3
 8041d0c:	3718      	adds	r7, #24
 8041d0e:	46bd      	mov	sp, r7
 8041d10:	bd80      	pop	{r7, pc}

08041d12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041d12:	b580      	push	{r7, lr}
 8041d14:	b084      	sub	sp, #16
 8041d16:	af00      	add	r7, sp, #0
 8041d18:	6078      	str	r0, [r7, #4]
 8041d1a:	460b      	mov	r3, r1
 8041d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8041d1e:	78fb      	ldrb	r3, [r7, #3]
 8041d20:	f003 030f 	and.w	r3, r3, #15
 8041d24:	687a      	ldr	r2, [r7, #4]
 8041d26:	7912      	ldrb	r2, [r2, #4]
 8041d28:	4293      	cmp	r3, r2
 8041d2a:	d901      	bls.n	8041d30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8041d2c:	2301      	movs	r3, #1
 8041d2e:	e04f      	b.n	8041dd0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8041d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041d34:	2b00      	cmp	r3, #0
 8041d36:	da0f      	bge.n	8041d58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041d38:	78fb      	ldrb	r3, [r7, #3]
 8041d3a:	f003 020f 	and.w	r2, r3, #15
 8041d3e:	4613      	mov	r3, r2
 8041d40:	00db      	lsls	r3, r3, #3
 8041d42:	4413      	add	r3, r2
 8041d44:	009b      	lsls	r3, r3, #2
 8041d46:	3310      	adds	r3, #16
 8041d48:	687a      	ldr	r2, [r7, #4]
 8041d4a:	4413      	add	r3, r2
 8041d4c:	3304      	adds	r3, #4
 8041d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041d50:	68fb      	ldr	r3, [r7, #12]
 8041d52:	2201      	movs	r2, #1
 8041d54:	705a      	strb	r2, [r3, #1]
 8041d56:	e00d      	b.n	8041d74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8041d58:	78fa      	ldrb	r2, [r7, #3]
 8041d5a:	4613      	mov	r3, r2
 8041d5c:	00db      	lsls	r3, r3, #3
 8041d5e:	4413      	add	r3, r2
 8041d60:	009b      	lsls	r3, r3, #2
 8041d62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041d66:	687a      	ldr	r2, [r7, #4]
 8041d68:	4413      	add	r3, r2
 8041d6a:	3304      	adds	r3, #4
 8041d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041d6e:	68fb      	ldr	r3, [r7, #12]
 8041d70:	2200      	movs	r2, #0
 8041d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8041d74:	68fb      	ldr	r3, [r7, #12]
 8041d76:	2201      	movs	r2, #1
 8041d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041d7a:	78fb      	ldrb	r3, [r7, #3]
 8041d7c:	f003 030f 	and.w	r3, r3, #15
 8041d80:	b2da      	uxtb	r2, r3
 8041d82:	68fb      	ldr	r3, [r7, #12]
 8041d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8041d86:	687b      	ldr	r3, [r7, #4]
 8041d88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041d8c:	2b01      	cmp	r3, #1
 8041d8e:	d101      	bne.n	8041d94 <HAL_PCD_EP_SetStall+0x82>
 8041d90:	2302      	movs	r3, #2
 8041d92:	e01d      	b.n	8041dd0 <HAL_PCD_EP_SetStall+0xbe>
 8041d94:	687b      	ldr	r3, [r7, #4]
 8041d96:	2201      	movs	r2, #1
 8041d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	681b      	ldr	r3, [r3, #0]
 8041da0:	68f9      	ldr	r1, [r7, #12]
 8041da2:	4618      	mov	r0, r3
 8041da4:	f001 ffe6 	bl	8043d74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8041da8:	78fb      	ldrb	r3, [r7, #3]
 8041daa:	f003 030f 	and.w	r3, r3, #15
 8041dae:	2b00      	cmp	r3, #0
 8041db0:	d109      	bne.n	8041dc6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8041db2:	687b      	ldr	r3, [r7, #4]
 8041db4:	6818      	ldr	r0, [r3, #0]
 8041db6:	687b      	ldr	r3, [r7, #4]
 8041db8:	7999      	ldrb	r1, [r3, #6]
 8041dba:	687b      	ldr	r3, [r7, #4]
 8041dbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041dc0:	461a      	mov	r2, r3
 8041dc2:	f002 f9d7 	bl	8044174 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8041dc6:	687b      	ldr	r3, [r7, #4]
 8041dc8:	2200      	movs	r2, #0
 8041dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041dce:	2300      	movs	r3, #0
}
 8041dd0:	4618      	mov	r0, r3
 8041dd2:	3710      	adds	r7, #16
 8041dd4:	46bd      	mov	sp, r7
 8041dd6:	bd80      	pop	{r7, pc}

08041dd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041dd8:	b580      	push	{r7, lr}
 8041dda:	b084      	sub	sp, #16
 8041ddc:	af00      	add	r7, sp, #0
 8041dde:	6078      	str	r0, [r7, #4]
 8041de0:	460b      	mov	r3, r1
 8041de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8041de4:	78fb      	ldrb	r3, [r7, #3]
 8041de6:	f003 030f 	and.w	r3, r3, #15
 8041dea:	687a      	ldr	r2, [r7, #4]
 8041dec:	7912      	ldrb	r2, [r2, #4]
 8041dee:	4293      	cmp	r3, r2
 8041df0:	d901      	bls.n	8041df6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8041df2:	2301      	movs	r3, #1
 8041df4:	e042      	b.n	8041e7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8041df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041dfa:	2b00      	cmp	r3, #0
 8041dfc:	da0f      	bge.n	8041e1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041dfe:	78fb      	ldrb	r3, [r7, #3]
 8041e00:	f003 020f 	and.w	r2, r3, #15
 8041e04:	4613      	mov	r3, r2
 8041e06:	00db      	lsls	r3, r3, #3
 8041e08:	4413      	add	r3, r2
 8041e0a:	009b      	lsls	r3, r3, #2
 8041e0c:	3310      	adds	r3, #16
 8041e0e:	687a      	ldr	r2, [r7, #4]
 8041e10:	4413      	add	r3, r2
 8041e12:	3304      	adds	r3, #4
 8041e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041e16:	68fb      	ldr	r3, [r7, #12]
 8041e18:	2201      	movs	r2, #1
 8041e1a:	705a      	strb	r2, [r3, #1]
 8041e1c:	e00f      	b.n	8041e3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041e1e:	78fb      	ldrb	r3, [r7, #3]
 8041e20:	f003 020f 	and.w	r2, r3, #15
 8041e24:	4613      	mov	r3, r2
 8041e26:	00db      	lsls	r3, r3, #3
 8041e28:	4413      	add	r3, r2
 8041e2a:	009b      	lsls	r3, r3, #2
 8041e2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041e30:	687a      	ldr	r2, [r7, #4]
 8041e32:	4413      	add	r3, r2
 8041e34:	3304      	adds	r3, #4
 8041e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041e38:	68fb      	ldr	r3, [r7, #12]
 8041e3a:	2200      	movs	r2, #0
 8041e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8041e3e:	68fb      	ldr	r3, [r7, #12]
 8041e40:	2200      	movs	r2, #0
 8041e42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041e44:	78fb      	ldrb	r3, [r7, #3]
 8041e46:	f003 030f 	and.w	r3, r3, #15
 8041e4a:	b2da      	uxtb	r2, r3
 8041e4c:	68fb      	ldr	r3, [r7, #12]
 8041e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8041e50:	687b      	ldr	r3, [r7, #4]
 8041e52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041e56:	2b01      	cmp	r3, #1
 8041e58:	d101      	bne.n	8041e5e <HAL_PCD_EP_ClrStall+0x86>
 8041e5a:	2302      	movs	r3, #2
 8041e5c:	e00e      	b.n	8041e7c <HAL_PCD_EP_ClrStall+0xa4>
 8041e5e:	687b      	ldr	r3, [r7, #4]
 8041e60:	2201      	movs	r2, #1
 8041e62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8041e66:	687b      	ldr	r3, [r7, #4]
 8041e68:	681b      	ldr	r3, [r3, #0]
 8041e6a:	68f9      	ldr	r1, [r7, #12]
 8041e6c:	4618      	mov	r0, r3
 8041e6e:	f001 ffef 	bl	8043e50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8041e72:	687b      	ldr	r3, [r7, #4]
 8041e74:	2200      	movs	r2, #0
 8041e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041e7a:	2300      	movs	r3, #0
}
 8041e7c:	4618      	mov	r0, r3
 8041e7e:	3710      	adds	r7, #16
 8041e80:	46bd      	mov	sp, r7
 8041e82:	bd80      	pop	{r7, pc}

08041e84 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041e84:	b580      	push	{r7, lr}
 8041e86:	b084      	sub	sp, #16
 8041e88:	af00      	add	r7, sp, #0
 8041e8a:	6078      	str	r0, [r7, #4]
 8041e8c:	460b      	mov	r3, r1
 8041e8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8041e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041e94:	2b00      	cmp	r3, #0
 8041e96:	da0c      	bge.n	8041eb2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041e98:	78fb      	ldrb	r3, [r7, #3]
 8041e9a:	f003 020f 	and.w	r2, r3, #15
 8041e9e:	4613      	mov	r3, r2
 8041ea0:	00db      	lsls	r3, r3, #3
 8041ea2:	4413      	add	r3, r2
 8041ea4:	009b      	lsls	r3, r3, #2
 8041ea6:	3310      	adds	r3, #16
 8041ea8:	687a      	ldr	r2, [r7, #4]
 8041eaa:	4413      	add	r3, r2
 8041eac:	3304      	adds	r3, #4
 8041eae:	60fb      	str	r3, [r7, #12]
 8041eb0:	e00c      	b.n	8041ecc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041eb2:	78fb      	ldrb	r3, [r7, #3]
 8041eb4:	f003 020f 	and.w	r2, r3, #15
 8041eb8:	4613      	mov	r3, r2
 8041eba:	00db      	lsls	r3, r3, #3
 8041ebc:	4413      	add	r3, r2
 8041ebe:	009b      	lsls	r3, r3, #2
 8041ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041ec4:	687a      	ldr	r2, [r7, #4]
 8041ec6:	4413      	add	r3, r2
 8041ec8:	3304      	adds	r3, #4
 8041eca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8041ecc:	687b      	ldr	r3, [r7, #4]
 8041ece:	681b      	ldr	r3, [r3, #0]
 8041ed0:	68f9      	ldr	r1, [r7, #12]
 8041ed2:	4618      	mov	r0, r3
 8041ed4:	f001 fe0e 	bl	8043af4 <USB_EPStopXfer>
 8041ed8:	4603      	mov	r3, r0
 8041eda:	72fb      	strb	r3, [r7, #11]

  return ret;
 8041edc:	7afb      	ldrb	r3, [r7, #11]
}
 8041ede:	4618      	mov	r0, r3
 8041ee0:	3710      	adds	r7, #16
 8041ee2:	46bd      	mov	sp, r7
 8041ee4:	bd80      	pop	{r7, pc}

08041ee6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8041ee6:	b580      	push	{r7, lr}
 8041ee8:	b08a      	sub	sp, #40	@ 0x28
 8041eea:	af02      	add	r7, sp, #8
 8041eec:	6078      	str	r0, [r7, #4]
 8041eee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041ef0:	687b      	ldr	r3, [r7, #4]
 8041ef2:	681b      	ldr	r3, [r3, #0]
 8041ef4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041ef6:	697b      	ldr	r3, [r7, #20]
 8041ef8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8041efa:	683a      	ldr	r2, [r7, #0]
 8041efc:	4613      	mov	r3, r2
 8041efe:	00db      	lsls	r3, r3, #3
 8041f00:	4413      	add	r3, r2
 8041f02:	009b      	lsls	r3, r3, #2
 8041f04:	3310      	adds	r3, #16
 8041f06:	687a      	ldr	r2, [r7, #4]
 8041f08:	4413      	add	r3, r2
 8041f0a:	3304      	adds	r3, #4
 8041f0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8041f0e:	68fb      	ldr	r3, [r7, #12]
 8041f10:	695a      	ldr	r2, [r3, #20]
 8041f12:	68fb      	ldr	r3, [r7, #12]
 8041f14:	691b      	ldr	r3, [r3, #16]
 8041f16:	429a      	cmp	r2, r3
 8041f18:	d901      	bls.n	8041f1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8041f1a:	2301      	movs	r3, #1
 8041f1c:	e06b      	b.n	8041ff6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8041f1e:	68fb      	ldr	r3, [r7, #12]
 8041f20:	691a      	ldr	r2, [r3, #16]
 8041f22:	68fb      	ldr	r3, [r7, #12]
 8041f24:	695b      	ldr	r3, [r3, #20]
 8041f26:	1ad3      	subs	r3, r2, r3
 8041f28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8041f2a:	68fb      	ldr	r3, [r7, #12]
 8041f2c:	689b      	ldr	r3, [r3, #8]
 8041f2e:	69fa      	ldr	r2, [r7, #28]
 8041f30:	429a      	cmp	r2, r3
 8041f32:	d902      	bls.n	8041f3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8041f34:	68fb      	ldr	r3, [r7, #12]
 8041f36:	689b      	ldr	r3, [r3, #8]
 8041f38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8041f3a:	69fb      	ldr	r3, [r7, #28]
 8041f3c:	3303      	adds	r3, #3
 8041f3e:	089b      	lsrs	r3, r3, #2
 8041f40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8041f42:	e02a      	b.n	8041f9a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8041f44:	68fb      	ldr	r3, [r7, #12]
 8041f46:	691a      	ldr	r2, [r3, #16]
 8041f48:	68fb      	ldr	r3, [r7, #12]
 8041f4a:	695b      	ldr	r3, [r3, #20]
 8041f4c:	1ad3      	subs	r3, r2, r3
 8041f4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8041f50:	68fb      	ldr	r3, [r7, #12]
 8041f52:	689b      	ldr	r3, [r3, #8]
 8041f54:	69fa      	ldr	r2, [r7, #28]
 8041f56:	429a      	cmp	r2, r3
 8041f58:	d902      	bls.n	8041f60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8041f5a:	68fb      	ldr	r3, [r7, #12]
 8041f5c:	689b      	ldr	r3, [r3, #8]
 8041f5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8041f60:	69fb      	ldr	r3, [r7, #28]
 8041f62:	3303      	adds	r3, #3
 8041f64:	089b      	lsrs	r3, r3, #2
 8041f66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8041f68:	68fb      	ldr	r3, [r7, #12]
 8041f6a:	68d9      	ldr	r1, [r3, #12]
 8041f6c:	683b      	ldr	r3, [r7, #0]
 8041f6e:	b2da      	uxtb	r2, r3
 8041f70:	69fb      	ldr	r3, [r7, #28]
 8041f72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8041f74:	687b      	ldr	r3, [r7, #4]
 8041f76:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8041f78:	9300      	str	r3, [sp, #0]
 8041f7a:	4603      	mov	r3, r0
 8041f7c:	6978      	ldr	r0, [r7, #20]
 8041f7e:	f001 fe63 	bl	8043c48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8041f82:	68fb      	ldr	r3, [r7, #12]
 8041f84:	68da      	ldr	r2, [r3, #12]
 8041f86:	69fb      	ldr	r3, [r7, #28]
 8041f88:	441a      	add	r2, r3
 8041f8a:	68fb      	ldr	r3, [r7, #12]
 8041f8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8041f8e:	68fb      	ldr	r3, [r7, #12]
 8041f90:	695a      	ldr	r2, [r3, #20]
 8041f92:	69fb      	ldr	r3, [r7, #28]
 8041f94:	441a      	add	r2, r3
 8041f96:	68fb      	ldr	r3, [r7, #12]
 8041f98:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8041f9a:	683b      	ldr	r3, [r7, #0]
 8041f9c:	015a      	lsls	r2, r3, #5
 8041f9e:	693b      	ldr	r3, [r7, #16]
 8041fa0:	4413      	add	r3, r2
 8041fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041fa6:	699b      	ldr	r3, [r3, #24]
 8041fa8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8041faa:	69ba      	ldr	r2, [r7, #24]
 8041fac:	429a      	cmp	r2, r3
 8041fae:	d809      	bhi.n	8041fc4 <PCD_WriteEmptyTxFifo+0xde>
 8041fb0:	68fb      	ldr	r3, [r7, #12]
 8041fb2:	695a      	ldr	r2, [r3, #20]
 8041fb4:	68fb      	ldr	r3, [r7, #12]
 8041fb6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8041fb8:	429a      	cmp	r2, r3
 8041fba:	d203      	bcs.n	8041fc4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8041fbc:	68fb      	ldr	r3, [r7, #12]
 8041fbe:	691b      	ldr	r3, [r3, #16]
 8041fc0:	2b00      	cmp	r3, #0
 8041fc2:	d1bf      	bne.n	8041f44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8041fc4:	68fb      	ldr	r3, [r7, #12]
 8041fc6:	691a      	ldr	r2, [r3, #16]
 8041fc8:	68fb      	ldr	r3, [r7, #12]
 8041fca:	695b      	ldr	r3, [r3, #20]
 8041fcc:	429a      	cmp	r2, r3
 8041fce:	d811      	bhi.n	8041ff4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041fd0:	683b      	ldr	r3, [r7, #0]
 8041fd2:	f003 030f 	and.w	r3, r3, #15
 8041fd6:	2201      	movs	r2, #1
 8041fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8041fdc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041fde:	693b      	ldr	r3, [r7, #16]
 8041fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041fe6:	68bb      	ldr	r3, [r7, #8]
 8041fe8:	43db      	mvns	r3, r3
 8041fea:	6939      	ldr	r1, [r7, #16]
 8041fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8041ff0:	4013      	ands	r3, r2
 8041ff2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8041ff4:	2300      	movs	r3, #0
}
 8041ff6:	4618      	mov	r0, r3
 8041ff8:	3720      	adds	r7, #32
 8041ffa:	46bd      	mov	sp, r7
 8041ffc:	bd80      	pop	{r7, pc}
	...

08042000 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042000:	b580      	push	{r7, lr}
 8042002:	b088      	sub	sp, #32
 8042004:	af00      	add	r7, sp, #0
 8042006:	6078      	str	r0, [r7, #4]
 8042008:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 804200a:	687b      	ldr	r3, [r7, #4]
 804200c:	681b      	ldr	r3, [r3, #0]
 804200e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042010:	69fb      	ldr	r3, [r7, #28]
 8042012:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042014:	69fb      	ldr	r3, [r7, #28]
 8042016:	333c      	adds	r3, #60	@ 0x3c
 8042018:	3304      	adds	r3, #4
 804201a:	681b      	ldr	r3, [r3, #0]
 804201c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 804201e:	683b      	ldr	r3, [r7, #0]
 8042020:	015a      	lsls	r2, r3, #5
 8042022:	69bb      	ldr	r3, [r7, #24]
 8042024:	4413      	add	r3, r2
 8042026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804202a:	689b      	ldr	r3, [r3, #8]
 804202c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 804202e:	687b      	ldr	r3, [r7, #4]
 8042030:	799b      	ldrb	r3, [r3, #6]
 8042032:	2b01      	cmp	r3, #1
 8042034:	d17b      	bne.n	804212e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8042036:	693b      	ldr	r3, [r7, #16]
 8042038:	f003 0308 	and.w	r3, r3, #8
 804203c:	2b00      	cmp	r3, #0
 804203e:	d015      	beq.n	804206c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042040:	697b      	ldr	r3, [r7, #20]
 8042042:	4a61      	ldr	r2, [pc, #388]	@ (80421c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042044:	4293      	cmp	r3, r2
 8042046:	f240 80b9 	bls.w	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 804204a:	693b      	ldr	r3, [r7, #16]
 804204c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042050:	2b00      	cmp	r3, #0
 8042052:	f000 80b3 	beq.w	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042056:	683b      	ldr	r3, [r7, #0]
 8042058:	015a      	lsls	r2, r3, #5
 804205a:	69bb      	ldr	r3, [r7, #24]
 804205c:	4413      	add	r3, r2
 804205e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042062:	461a      	mov	r2, r3
 8042064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042068:	6093      	str	r3, [r2, #8]
 804206a:	e0a7      	b.n	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 804206c:	693b      	ldr	r3, [r7, #16]
 804206e:	f003 0320 	and.w	r3, r3, #32
 8042072:	2b00      	cmp	r3, #0
 8042074:	d009      	beq.n	804208a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042076:	683b      	ldr	r3, [r7, #0]
 8042078:	015a      	lsls	r2, r3, #5
 804207a:	69bb      	ldr	r3, [r7, #24]
 804207c:	4413      	add	r3, r2
 804207e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042082:	461a      	mov	r2, r3
 8042084:	2320      	movs	r3, #32
 8042086:	6093      	str	r3, [r2, #8]
 8042088:	e098      	b.n	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 804208a:	693b      	ldr	r3, [r7, #16]
 804208c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8042090:	2b00      	cmp	r3, #0
 8042092:	f040 8093 	bne.w	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042096:	697b      	ldr	r3, [r7, #20]
 8042098:	4a4b      	ldr	r2, [pc, #300]	@ (80421c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 804209a:	4293      	cmp	r3, r2
 804209c:	d90f      	bls.n	80420be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 804209e:	693b      	ldr	r3, [r7, #16]
 80420a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80420a4:	2b00      	cmp	r3, #0
 80420a6:	d00a      	beq.n	80420be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80420a8:	683b      	ldr	r3, [r7, #0]
 80420aa:	015a      	lsls	r2, r3, #5
 80420ac:	69bb      	ldr	r3, [r7, #24]
 80420ae:	4413      	add	r3, r2
 80420b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80420b4:	461a      	mov	r2, r3
 80420b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80420ba:	6093      	str	r3, [r2, #8]
 80420bc:	e07e      	b.n	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80420be:	683a      	ldr	r2, [r7, #0]
 80420c0:	4613      	mov	r3, r2
 80420c2:	00db      	lsls	r3, r3, #3
 80420c4:	4413      	add	r3, r2
 80420c6:	009b      	lsls	r3, r3, #2
 80420c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80420cc:	687a      	ldr	r2, [r7, #4]
 80420ce:	4413      	add	r3, r2
 80420d0:	3304      	adds	r3, #4
 80420d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80420d4:	68fb      	ldr	r3, [r7, #12]
 80420d6:	6a1a      	ldr	r2, [r3, #32]
 80420d8:	683b      	ldr	r3, [r7, #0]
 80420da:	0159      	lsls	r1, r3, #5
 80420dc:	69bb      	ldr	r3, [r7, #24]
 80420de:	440b      	add	r3, r1
 80420e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80420e4:	691b      	ldr	r3, [r3, #16]
 80420e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80420ea:	1ad2      	subs	r2, r2, r3
 80420ec:	68fb      	ldr	r3, [r7, #12]
 80420ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80420f0:	683b      	ldr	r3, [r7, #0]
 80420f2:	2b00      	cmp	r3, #0
 80420f4:	d114      	bne.n	8042120 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80420f6:	68fb      	ldr	r3, [r7, #12]
 80420f8:	691b      	ldr	r3, [r3, #16]
 80420fa:	2b00      	cmp	r3, #0
 80420fc:	d109      	bne.n	8042112 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80420fe:	687b      	ldr	r3, [r7, #4]
 8042100:	6818      	ldr	r0, [r3, #0]
 8042102:	687b      	ldr	r3, [r7, #4]
 8042104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042108:	461a      	mov	r2, r3
 804210a:	2101      	movs	r1, #1
 804210c:	f002 f832 	bl	8044174 <USB_EP0_OutStart>
 8042110:	e006      	b.n	8042120 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8042112:	68fb      	ldr	r3, [r7, #12]
 8042114:	68da      	ldr	r2, [r3, #12]
 8042116:	68fb      	ldr	r3, [r7, #12]
 8042118:	695b      	ldr	r3, [r3, #20]
 804211a:	441a      	add	r2, r3
 804211c:	68fb      	ldr	r3, [r7, #12]
 804211e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042120:	683b      	ldr	r3, [r7, #0]
 8042122:	b2db      	uxtb	r3, r3
 8042124:	4619      	mov	r1, r3
 8042126:	6878      	ldr	r0, [r7, #4]
 8042128:	f004 fa7c 	bl	8046624 <HAL_PCD_DataOutStageCallback>
 804212c:	e046      	b.n	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 804212e:	697b      	ldr	r3, [r7, #20]
 8042130:	4a26      	ldr	r2, [pc, #152]	@ (80421cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8042132:	4293      	cmp	r3, r2
 8042134:	d124      	bne.n	8042180 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8042136:	693b      	ldr	r3, [r7, #16]
 8042138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 804213c:	2b00      	cmp	r3, #0
 804213e:	d00a      	beq.n	8042156 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042140:	683b      	ldr	r3, [r7, #0]
 8042142:	015a      	lsls	r2, r3, #5
 8042144:	69bb      	ldr	r3, [r7, #24]
 8042146:	4413      	add	r3, r2
 8042148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804214c:	461a      	mov	r2, r3
 804214e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042152:	6093      	str	r3, [r2, #8]
 8042154:	e032      	b.n	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8042156:	693b      	ldr	r3, [r7, #16]
 8042158:	f003 0320 	and.w	r3, r3, #32
 804215c:	2b00      	cmp	r3, #0
 804215e:	d008      	beq.n	8042172 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042160:	683b      	ldr	r3, [r7, #0]
 8042162:	015a      	lsls	r2, r3, #5
 8042164:	69bb      	ldr	r3, [r7, #24]
 8042166:	4413      	add	r3, r2
 8042168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804216c:	461a      	mov	r2, r3
 804216e:	2320      	movs	r3, #32
 8042170:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042172:	683b      	ldr	r3, [r7, #0]
 8042174:	b2db      	uxtb	r3, r3
 8042176:	4619      	mov	r1, r3
 8042178:	6878      	ldr	r0, [r7, #4]
 804217a:	f004 fa53 	bl	8046624 <HAL_PCD_DataOutStageCallback>
 804217e:	e01d      	b.n	80421bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8042180:	683b      	ldr	r3, [r7, #0]
 8042182:	2b00      	cmp	r3, #0
 8042184:	d114      	bne.n	80421b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8042186:	6879      	ldr	r1, [r7, #4]
 8042188:	683a      	ldr	r2, [r7, #0]
 804218a:	4613      	mov	r3, r2
 804218c:	00db      	lsls	r3, r3, #3
 804218e:	4413      	add	r3, r2
 8042190:	009b      	lsls	r3, r3, #2
 8042192:	440b      	add	r3, r1
 8042194:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8042198:	681b      	ldr	r3, [r3, #0]
 804219a:	2b00      	cmp	r3, #0
 804219c:	d108      	bne.n	80421b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 804219e:	687b      	ldr	r3, [r7, #4]
 80421a0:	6818      	ldr	r0, [r3, #0]
 80421a2:	687b      	ldr	r3, [r7, #4]
 80421a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80421a8:	461a      	mov	r2, r3
 80421aa:	2100      	movs	r1, #0
 80421ac:	f001 ffe2 	bl	8044174 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80421b0:	683b      	ldr	r3, [r7, #0]
 80421b2:	b2db      	uxtb	r3, r3
 80421b4:	4619      	mov	r1, r3
 80421b6:	6878      	ldr	r0, [r7, #4]
 80421b8:	f004 fa34 	bl	8046624 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80421bc:	2300      	movs	r3, #0
}
 80421be:	4618      	mov	r0, r3
 80421c0:	3720      	adds	r7, #32
 80421c2:	46bd      	mov	sp, r7
 80421c4:	bd80      	pop	{r7, pc}
 80421c6:	bf00      	nop
 80421c8:	4f54300a 	.word	0x4f54300a
 80421cc:	4f54310a 	.word	0x4f54310a

080421d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80421d0:	b580      	push	{r7, lr}
 80421d2:	b086      	sub	sp, #24
 80421d4:	af00      	add	r7, sp, #0
 80421d6:	6078      	str	r0, [r7, #4]
 80421d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80421da:	687b      	ldr	r3, [r7, #4]
 80421dc:	681b      	ldr	r3, [r3, #0]
 80421de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80421e0:	697b      	ldr	r3, [r7, #20]
 80421e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80421e4:	697b      	ldr	r3, [r7, #20]
 80421e6:	333c      	adds	r3, #60	@ 0x3c
 80421e8:	3304      	adds	r3, #4
 80421ea:	681b      	ldr	r3, [r3, #0]
 80421ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80421ee:	683b      	ldr	r3, [r7, #0]
 80421f0:	015a      	lsls	r2, r3, #5
 80421f2:	693b      	ldr	r3, [r7, #16]
 80421f4:	4413      	add	r3, r2
 80421f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80421fa:	689b      	ldr	r3, [r3, #8]
 80421fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80421fe:	68fb      	ldr	r3, [r7, #12]
 8042200:	4a15      	ldr	r2, [pc, #84]	@ (8042258 <PCD_EP_OutSetupPacket_int+0x88>)
 8042202:	4293      	cmp	r3, r2
 8042204:	d90e      	bls.n	8042224 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042206:	68bb      	ldr	r3, [r7, #8]
 8042208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 804220c:	2b00      	cmp	r3, #0
 804220e:	d009      	beq.n	8042224 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042210:	683b      	ldr	r3, [r7, #0]
 8042212:	015a      	lsls	r2, r3, #5
 8042214:	693b      	ldr	r3, [r7, #16]
 8042216:	4413      	add	r3, r2
 8042218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804221c:	461a      	mov	r2, r3
 804221e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042222:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8042224:	6878      	ldr	r0, [r7, #4]
 8042226:	f004 f9eb 	bl	8046600 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 804222a:	68fb      	ldr	r3, [r7, #12]
 804222c:	4a0a      	ldr	r2, [pc, #40]	@ (8042258 <PCD_EP_OutSetupPacket_int+0x88>)
 804222e:	4293      	cmp	r3, r2
 8042230:	d90c      	bls.n	804224c <PCD_EP_OutSetupPacket_int+0x7c>
 8042232:	687b      	ldr	r3, [r7, #4]
 8042234:	799b      	ldrb	r3, [r3, #6]
 8042236:	2b01      	cmp	r3, #1
 8042238:	d108      	bne.n	804224c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 804223a:	687b      	ldr	r3, [r7, #4]
 804223c:	6818      	ldr	r0, [r3, #0]
 804223e:	687b      	ldr	r3, [r7, #4]
 8042240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042244:	461a      	mov	r2, r3
 8042246:	2101      	movs	r1, #1
 8042248:	f001 ff94 	bl	8044174 <USB_EP0_OutStart>
  }

  return HAL_OK;
 804224c:	2300      	movs	r3, #0
}
 804224e:	4618      	mov	r0, r3
 8042250:	3718      	adds	r7, #24
 8042252:	46bd      	mov	sp, r7
 8042254:	bd80      	pop	{r7, pc}
 8042256:	bf00      	nop
 8042258:	4f54300a 	.word	0x4f54300a

0804225c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 804225c:	b480      	push	{r7}
 804225e:	b085      	sub	sp, #20
 8042260:	af00      	add	r7, sp, #0
 8042262:	6078      	str	r0, [r7, #4]
 8042264:	460b      	mov	r3, r1
 8042266:	70fb      	strb	r3, [r7, #3]
 8042268:	4613      	mov	r3, r2
 804226a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 804226c:	687b      	ldr	r3, [r7, #4]
 804226e:	681b      	ldr	r3, [r3, #0]
 8042270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042272:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8042274:	78fb      	ldrb	r3, [r7, #3]
 8042276:	2b00      	cmp	r3, #0
 8042278:	d107      	bne.n	804228a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 804227a:	883b      	ldrh	r3, [r7, #0]
 804227c:	0419      	lsls	r1, r3, #16
 804227e:	687b      	ldr	r3, [r7, #4]
 8042280:	681b      	ldr	r3, [r3, #0]
 8042282:	68ba      	ldr	r2, [r7, #8]
 8042284:	430a      	orrs	r2, r1
 8042286:	629a      	str	r2, [r3, #40]	@ 0x28
 8042288:	e028      	b.n	80422dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 804228a:	687b      	ldr	r3, [r7, #4]
 804228c:	681b      	ldr	r3, [r3, #0]
 804228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042290:	0c1b      	lsrs	r3, r3, #16
 8042292:	68ba      	ldr	r2, [r7, #8]
 8042294:	4413      	add	r3, r2
 8042296:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042298:	2300      	movs	r3, #0
 804229a:	73fb      	strb	r3, [r7, #15]
 804229c:	e00d      	b.n	80422ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 804229e:	687b      	ldr	r3, [r7, #4]
 80422a0:	681a      	ldr	r2, [r3, #0]
 80422a2:	7bfb      	ldrb	r3, [r7, #15]
 80422a4:	3340      	adds	r3, #64	@ 0x40
 80422a6:	009b      	lsls	r3, r3, #2
 80422a8:	4413      	add	r3, r2
 80422aa:	685b      	ldr	r3, [r3, #4]
 80422ac:	0c1b      	lsrs	r3, r3, #16
 80422ae:	68ba      	ldr	r2, [r7, #8]
 80422b0:	4413      	add	r3, r2
 80422b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80422b4:	7bfb      	ldrb	r3, [r7, #15]
 80422b6:	3301      	adds	r3, #1
 80422b8:	73fb      	strb	r3, [r7, #15]
 80422ba:	7bfa      	ldrb	r2, [r7, #15]
 80422bc:	78fb      	ldrb	r3, [r7, #3]
 80422be:	3b01      	subs	r3, #1
 80422c0:	429a      	cmp	r2, r3
 80422c2:	d3ec      	bcc.n	804229e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80422c4:	883b      	ldrh	r3, [r7, #0]
 80422c6:	0418      	lsls	r0, r3, #16
 80422c8:	687b      	ldr	r3, [r7, #4]
 80422ca:	6819      	ldr	r1, [r3, #0]
 80422cc:	78fb      	ldrb	r3, [r7, #3]
 80422ce:	3b01      	subs	r3, #1
 80422d0:	68ba      	ldr	r2, [r7, #8]
 80422d2:	4302      	orrs	r2, r0
 80422d4:	3340      	adds	r3, #64	@ 0x40
 80422d6:	009b      	lsls	r3, r3, #2
 80422d8:	440b      	add	r3, r1
 80422da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80422dc:	2300      	movs	r3, #0
}
 80422de:	4618      	mov	r0, r3
 80422e0:	3714      	adds	r7, #20
 80422e2:	46bd      	mov	sp, r7
 80422e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422e8:	4770      	bx	lr

080422ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80422ea:	b480      	push	{r7}
 80422ec:	b083      	sub	sp, #12
 80422ee:	af00      	add	r7, sp, #0
 80422f0:	6078      	str	r0, [r7, #4]
 80422f2:	460b      	mov	r3, r1
 80422f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80422f6:	687b      	ldr	r3, [r7, #4]
 80422f8:	681b      	ldr	r3, [r3, #0]
 80422fa:	887a      	ldrh	r2, [r7, #2]
 80422fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80422fe:	2300      	movs	r3, #0
}
 8042300:	4618      	mov	r0, r3
 8042302:	370c      	adds	r7, #12
 8042304:	46bd      	mov	sp, r7
 8042306:	f85d 7b04 	ldr.w	r7, [sp], #4
 804230a:	4770      	bx	lr

0804230c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 804230c:	b480      	push	{r7}
 804230e:	b083      	sub	sp, #12
 8042310:	af00      	add	r7, sp, #0
 8042312:	6078      	str	r0, [r7, #4]
 8042314:	460b      	mov	r3, r1
 8042316:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8042318:	bf00      	nop
 804231a:	370c      	adds	r7, #12
 804231c:	46bd      	mov	sp, r7
 804231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042322:	4770      	bx	lr

08042324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042324:	b580      	push	{r7, lr}
 8042326:	b086      	sub	sp, #24
 8042328:	af00      	add	r7, sp, #0
 804232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 804232c:	687b      	ldr	r3, [r7, #4]
 804232e:	2b00      	cmp	r3, #0
 8042330:	d101      	bne.n	8042336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8042332:	2301      	movs	r3, #1
 8042334:	e267      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042336:	687b      	ldr	r3, [r7, #4]
 8042338:	681b      	ldr	r3, [r3, #0]
 804233a:	f003 0301 	and.w	r3, r3, #1
 804233e:	2b00      	cmp	r3, #0
 8042340:	d075      	beq.n	804242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8042342:	4b88      	ldr	r3, [pc, #544]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042344:	689b      	ldr	r3, [r3, #8]
 8042346:	f003 030c 	and.w	r3, r3, #12
 804234a:	2b04      	cmp	r3, #4
 804234c:	d00c      	beq.n	8042368 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804234e:	4b85      	ldr	r3, [pc, #532]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042350:	689b      	ldr	r3, [r3, #8]
 8042352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8042356:	2b08      	cmp	r3, #8
 8042358:	d112      	bne.n	8042380 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804235a:	4b82      	ldr	r3, [pc, #520]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 804235c:	685b      	ldr	r3, [r3, #4]
 804235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8042362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8042366:	d10b      	bne.n	8042380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042368:	4b7e      	ldr	r3, [pc, #504]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 804236a:	681b      	ldr	r3, [r3, #0]
 804236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8042370:	2b00      	cmp	r3, #0
 8042372:	d05b      	beq.n	804242c <HAL_RCC_OscConfig+0x108>
 8042374:	687b      	ldr	r3, [r7, #4]
 8042376:	685b      	ldr	r3, [r3, #4]
 8042378:	2b00      	cmp	r3, #0
 804237a:	d157      	bne.n	804242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 804237c:	2301      	movs	r3, #1
 804237e:	e242      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8042380:	687b      	ldr	r3, [r7, #4]
 8042382:	685b      	ldr	r3, [r3, #4]
 8042384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042388:	d106      	bne.n	8042398 <HAL_RCC_OscConfig+0x74>
 804238a:	4b76      	ldr	r3, [pc, #472]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 804238c:	681b      	ldr	r3, [r3, #0]
 804238e:	4a75      	ldr	r2, [pc, #468]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8042394:	6013      	str	r3, [r2, #0]
 8042396:	e01d      	b.n	80423d4 <HAL_RCC_OscConfig+0xb0>
 8042398:	687b      	ldr	r3, [r7, #4]
 804239a:	685b      	ldr	r3, [r3, #4]
 804239c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80423a0:	d10c      	bne.n	80423bc <HAL_RCC_OscConfig+0x98>
 80423a2:	4b70      	ldr	r3, [pc, #448]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423a4:	681b      	ldr	r3, [r3, #0]
 80423a6:	4a6f      	ldr	r2, [pc, #444]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80423ac:	6013      	str	r3, [r2, #0]
 80423ae:	4b6d      	ldr	r3, [pc, #436]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423b0:	681b      	ldr	r3, [r3, #0]
 80423b2:	4a6c      	ldr	r2, [pc, #432]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80423b8:	6013      	str	r3, [r2, #0]
 80423ba:	e00b      	b.n	80423d4 <HAL_RCC_OscConfig+0xb0>
 80423bc:	4b69      	ldr	r3, [pc, #420]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423be:	681b      	ldr	r3, [r3, #0]
 80423c0:	4a68      	ldr	r2, [pc, #416]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80423c6:	6013      	str	r3, [r2, #0]
 80423c8:	4b66      	ldr	r3, [pc, #408]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423ca:	681b      	ldr	r3, [r3, #0]
 80423cc:	4a65      	ldr	r2, [pc, #404]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80423d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80423d4:	687b      	ldr	r3, [r7, #4]
 80423d6:	685b      	ldr	r3, [r3, #4]
 80423d8:	2b00      	cmp	r3, #0
 80423da:	d013      	beq.n	8042404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80423dc:	f7fe fa58 	bl	8040890 <HAL_GetTick>
 80423e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80423e2:	e008      	b.n	80423f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80423e4:	f7fe fa54 	bl	8040890 <HAL_GetTick>
 80423e8:	4602      	mov	r2, r0
 80423ea:	693b      	ldr	r3, [r7, #16]
 80423ec:	1ad3      	subs	r3, r2, r3
 80423ee:	2b64      	cmp	r3, #100	@ 0x64
 80423f0:	d901      	bls.n	80423f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80423f2:	2303      	movs	r3, #3
 80423f4:	e207      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80423f6:	4b5b      	ldr	r3, [pc, #364]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80423f8:	681b      	ldr	r3, [r3, #0]
 80423fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80423fe:	2b00      	cmp	r3, #0
 8042400:	d0f0      	beq.n	80423e4 <HAL_RCC_OscConfig+0xc0>
 8042402:	e014      	b.n	804242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8042404:	f7fe fa44 	bl	8040890 <HAL_GetTick>
 8042408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804240a:	e008      	b.n	804241e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804240c:	f7fe fa40 	bl	8040890 <HAL_GetTick>
 8042410:	4602      	mov	r2, r0
 8042412:	693b      	ldr	r3, [r7, #16]
 8042414:	1ad3      	subs	r3, r2, r3
 8042416:	2b64      	cmp	r3, #100	@ 0x64
 8042418:	d901      	bls.n	804241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804241a:	2303      	movs	r3, #3
 804241c:	e1f3      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804241e:	4b51      	ldr	r3, [pc, #324]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042420:	681b      	ldr	r3, [r3, #0]
 8042422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8042426:	2b00      	cmp	r3, #0
 8042428:	d1f0      	bne.n	804240c <HAL_RCC_OscConfig+0xe8>
 804242a:	e000      	b.n	804242e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804242e:	687b      	ldr	r3, [r7, #4]
 8042430:	681b      	ldr	r3, [r3, #0]
 8042432:	f003 0302 	and.w	r3, r3, #2
 8042436:	2b00      	cmp	r3, #0
 8042438:	d063      	beq.n	8042502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 804243a:	4b4a      	ldr	r3, [pc, #296]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 804243c:	689b      	ldr	r3, [r3, #8]
 804243e:	f003 030c 	and.w	r3, r3, #12
 8042442:	2b00      	cmp	r3, #0
 8042444:	d00b      	beq.n	804245e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8042446:	4b47      	ldr	r3, [pc, #284]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042448:	689b      	ldr	r3, [r3, #8]
 804244a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 804244e:	2b08      	cmp	r3, #8
 8042450:	d11c      	bne.n	804248c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8042452:	4b44      	ldr	r3, [pc, #272]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042454:	685b      	ldr	r3, [r3, #4]
 8042456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 804245a:	2b00      	cmp	r3, #0
 804245c:	d116      	bne.n	804248c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804245e:	4b41      	ldr	r3, [pc, #260]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042460:	681b      	ldr	r3, [r3, #0]
 8042462:	f003 0302 	and.w	r3, r3, #2
 8042466:	2b00      	cmp	r3, #0
 8042468:	d005      	beq.n	8042476 <HAL_RCC_OscConfig+0x152>
 804246a:	687b      	ldr	r3, [r7, #4]
 804246c:	68db      	ldr	r3, [r3, #12]
 804246e:	2b01      	cmp	r3, #1
 8042470:	d001      	beq.n	8042476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8042472:	2301      	movs	r3, #1
 8042474:	e1c7      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8042476:	4b3b      	ldr	r3, [pc, #236]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042478:	681b      	ldr	r3, [r3, #0]
 804247a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 804247e:	687b      	ldr	r3, [r7, #4]
 8042480:	691b      	ldr	r3, [r3, #16]
 8042482:	00db      	lsls	r3, r3, #3
 8042484:	4937      	ldr	r1, [pc, #220]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042486:	4313      	orrs	r3, r2
 8042488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804248a:	e03a      	b.n	8042502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 804248c:	687b      	ldr	r3, [r7, #4]
 804248e:	68db      	ldr	r3, [r3, #12]
 8042490:	2b00      	cmp	r3, #0
 8042492:	d020      	beq.n	80424d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8042494:	4b34      	ldr	r3, [pc, #208]	@ (8042568 <HAL_RCC_OscConfig+0x244>)
 8042496:	2201      	movs	r2, #1
 8042498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804249a:	f7fe f9f9 	bl	8040890 <HAL_GetTick>
 804249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80424a0:	e008      	b.n	80424b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80424a2:	f7fe f9f5 	bl	8040890 <HAL_GetTick>
 80424a6:	4602      	mov	r2, r0
 80424a8:	693b      	ldr	r3, [r7, #16]
 80424aa:	1ad3      	subs	r3, r2, r3
 80424ac:	2b02      	cmp	r3, #2
 80424ae:	d901      	bls.n	80424b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80424b0:	2303      	movs	r3, #3
 80424b2:	e1a8      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80424b4:	4b2b      	ldr	r3, [pc, #172]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80424b6:	681b      	ldr	r3, [r3, #0]
 80424b8:	f003 0302 	and.w	r3, r3, #2
 80424bc:	2b00      	cmp	r3, #0
 80424be:	d0f0      	beq.n	80424a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80424c0:	4b28      	ldr	r3, [pc, #160]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80424c2:	681b      	ldr	r3, [r3, #0]
 80424c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80424c8:	687b      	ldr	r3, [r7, #4]
 80424ca:	691b      	ldr	r3, [r3, #16]
 80424cc:	00db      	lsls	r3, r3, #3
 80424ce:	4925      	ldr	r1, [pc, #148]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80424d0:	4313      	orrs	r3, r2
 80424d2:	600b      	str	r3, [r1, #0]
 80424d4:	e015      	b.n	8042502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80424d6:	4b24      	ldr	r3, [pc, #144]	@ (8042568 <HAL_RCC_OscConfig+0x244>)
 80424d8:	2200      	movs	r2, #0
 80424da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80424dc:	f7fe f9d8 	bl	8040890 <HAL_GetTick>
 80424e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80424e2:	e008      	b.n	80424f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80424e4:	f7fe f9d4 	bl	8040890 <HAL_GetTick>
 80424e8:	4602      	mov	r2, r0
 80424ea:	693b      	ldr	r3, [r7, #16]
 80424ec:	1ad3      	subs	r3, r2, r3
 80424ee:	2b02      	cmp	r3, #2
 80424f0:	d901      	bls.n	80424f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80424f2:	2303      	movs	r3, #3
 80424f4:	e187      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80424f6:	4b1b      	ldr	r3, [pc, #108]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 80424f8:	681b      	ldr	r3, [r3, #0]
 80424fa:	f003 0302 	and.w	r3, r3, #2
 80424fe:	2b00      	cmp	r3, #0
 8042500:	d1f0      	bne.n	80424e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	681b      	ldr	r3, [r3, #0]
 8042506:	f003 0308 	and.w	r3, r3, #8
 804250a:	2b00      	cmp	r3, #0
 804250c:	d036      	beq.n	804257c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 804250e:	687b      	ldr	r3, [r7, #4]
 8042510:	695b      	ldr	r3, [r3, #20]
 8042512:	2b00      	cmp	r3, #0
 8042514:	d016      	beq.n	8042544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8042516:	4b15      	ldr	r3, [pc, #84]	@ (804256c <HAL_RCC_OscConfig+0x248>)
 8042518:	2201      	movs	r2, #1
 804251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804251c:	f7fe f9b8 	bl	8040890 <HAL_GetTick>
 8042520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042522:	e008      	b.n	8042536 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8042524:	f7fe f9b4 	bl	8040890 <HAL_GetTick>
 8042528:	4602      	mov	r2, r0
 804252a:	693b      	ldr	r3, [r7, #16]
 804252c:	1ad3      	subs	r3, r2, r3
 804252e:	2b02      	cmp	r3, #2
 8042530:	d901      	bls.n	8042536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8042532:	2303      	movs	r3, #3
 8042534:	e167      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042536:	4b0b      	ldr	r3, [pc, #44]	@ (8042564 <HAL_RCC_OscConfig+0x240>)
 8042538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804253a:	f003 0302 	and.w	r3, r3, #2
 804253e:	2b00      	cmp	r3, #0
 8042540:	d0f0      	beq.n	8042524 <HAL_RCC_OscConfig+0x200>
 8042542:	e01b      	b.n	804257c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8042544:	4b09      	ldr	r3, [pc, #36]	@ (804256c <HAL_RCC_OscConfig+0x248>)
 8042546:	2200      	movs	r2, #0
 8042548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804254a:	f7fe f9a1 	bl	8040890 <HAL_GetTick>
 804254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8042550:	e00e      	b.n	8042570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8042552:	f7fe f99d 	bl	8040890 <HAL_GetTick>
 8042556:	4602      	mov	r2, r0
 8042558:	693b      	ldr	r3, [r7, #16]
 804255a:	1ad3      	subs	r3, r2, r3
 804255c:	2b02      	cmp	r3, #2
 804255e:	d907      	bls.n	8042570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8042560:	2303      	movs	r3, #3
 8042562:	e150      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
 8042564:	40023800 	.word	0x40023800
 8042568:	42470000 	.word	0x42470000
 804256c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8042570:	4b88      	ldr	r3, [pc, #544]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8042574:	f003 0302 	and.w	r3, r3, #2
 8042578:	2b00      	cmp	r3, #0
 804257a:	d1ea      	bne.n	8042552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804257c:	687b      	ldr	r3, [r7, #4]
 804257e:	681b      	ldr	r3, [r3, #0]
 8042580:	f003 0304 	and.w	r3, r3, #4
 8042584:	2b00      	cmp	r3, #0
 8042586:	f000 8097 	beq.w	80426b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 804258a:	2300      	movs	r3, #0
 804258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 804258e:	4b81      	ldr	r3, [pc, #516]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8042596:	2b00      	cmp	r3, #0
 8042598:	d10f      	bne.n	80425ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804259a:	2300      	movs	r3, #0
 804259c:	60bb      	str	r3, [r7, #8]
 804259e:	4b7d      	ldr	r3, [pc, #500]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80425a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80425a2:	4a7c      	ldr	r2, [pc, #496]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80425a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80425a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80425aa:	4b7a      	ldr	r3, [pc, #488]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80425ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80425ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80425b2:	60bb      	str	r3, [r7, #8]
 80425b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80425b6:	2301      	movs	r3, #1
 80425b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80425ba:	4b77      	ldr	r3, [pc, #476]	@ (8042798 <HAL_RCC_OscConfig+0x474>)
 80425bc:	681b      	ldr	r3, [r3, #0]
 80425be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80425c2:	2b00      	cmp	r3, #0
 80425c4:	d118      	bne.n	80425f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80425c6:	4b74      	ldr	r3, [pc, #464]	@ (8042798 <HAL_RCC_OscConfig+0x474>)
 80425c8:	681b      	ldr	r3, [r3, #0]
 80425ca:	4a73      	ldr	r2, [pc, #460]	@ (8042798 <HAL_RCC_OscConfig+0x474>)
 80425cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80425d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80425d2:	f7fe f95d 	bl	8040890 <HAL_GetTick>
 80425d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80425d8:	e008      	b.n	80425ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80425da:	f7fe f959 	bl	8040890 <HAL_GetTick>
 80425de:	4602      	mov	r2, r0
 80425e0:	693b      	ldr	r3, [r7, #16]
 80425e2:	1ad3      	subs	r3, r2, r3
 80425e4:	2b02      	cmp	r3, #2
 80425e6:	d901      	bls.n	80425ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80425e8:	2303      	movs	r3, #3
 80425ea:	e10c      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80425ec:	4b6a      	ldr	r3, [pc, #424]	@ (8042798 <HAL_RCC_OscConfig+0x474>)
 80425ee:	681b      	ldr	r3, [r3, #0]
 80425f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80425f4:	2b00      	cmp	r3, #0
 80425f6:	d0f0      	beq.n	80425da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80425f8:	687b      	ldr	r3, [r7, #4]
 80425fa:	689b      	ldr	r3, [r3, #8]
 80425fc:	2b01      	cmp	r3, #1
 80425fe:	d106      	bne.n	804260e <HAL_RCC_OscConfig+0x2ea>
 8042600:	4b64      	ldr	r3, [pc, #400]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042604:	4a63      	ldr	r2, [pc, #396]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042606:	f043 0301 	orr.w	r3, r3, #1
 804260a:	6713      	str	r3, [r2, #112]	@ 0x70
 804260c:	e01c      	b.n	8042648 <HAL_RCC_OscConfig+0x324>
 804260e:	687b      	ldr	r3, [r7, #4]
 8042610:	689b      	ldr	r3, [r3, #8]
 8042612:	2b05      	cmp	r3, #5
 8042614:	d10c      	bne.n	8042630 <HAL_RCC_OscConfig+0x30c>
 8042616:	4b5f      	ldr	r3, [pc, #380]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804261a:	4a5e      	ldr	r2, [pc, #376]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 804261c:	f043 0304 	orr.w	r3, r3, #4
 8042620:	6713      	str	r3, [r2, #112]	@ 0x70
 8042622:	4b5c      	ldr	r3, [pc, #368]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042626:	4a5b      	ldr	r2, [pc, #364]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042628:	f043 0301 	orr.w	r3, r3, #1
 804262c:	6713      	str	r3, [r2, #112]	@ 0x70
 804262e:	e00b      	b.n	8042648 <HAL_RCC_OscConfig+0x324>
 8042630:	4b58      	ldr	r3, [pc, #352]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042634:	4a57      	ldr	r2, [pc, #348]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042636:	f023 0301 	bic.w	r3, r3, #1
 804263a:	6713      	str	r3, [r2, #112]	@ 0x70
 804263c:	4b55      	ldr	r3, [pc, #340]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 804263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042640:	4a54      	ldr	r2, [pc, #336]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042642:	f023 0304 	bic.w	r3, r3, #4
 8042646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8042648:	687b      	ldr	r3, [r7, #4]
 804264a:	689b      	ldr	r3, [r3, #8]
 804264c:	2b00      	cmp	r3, #0
 804264e:	d015      	beq.n	804267c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042650:	f7fe f91e 	bl	8040890 <HAL_GetTick>
 8042654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042656:	e00a      	b.n	804266e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042658:	f7fe f91a 	bl	8040890 <HAL_GetTick>
 804265c:	4602      	mov	r2, r0
 804265e:	693b      	ldr	r3, [r7, #16]
 8042660:	1ad3      	subs	r3, r2, r3
 8042662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8042666:	4293      	cmp	r3, r2
 8042668:	d901      	bls.n	804266e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 804266a:	2303      	movs	r3, #3
 804266c:	e0cb      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804266e:	4b49      	ldr	r3, [pc, #292]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042672:	f003 0302 	and.w	r3, r3, #2
 8042676:	2b00      	cmp	r3, #0
 8042678:	d0ee      	beq.n	8042658 <HAL_RCC_OscConfig+0x334>
 804267a:	e014      	b.n	80426a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804267c:	f7fe f908 	bl	8040890 <HAL_GetTick>
 8042680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8042682:	e00a      	b.n	804269a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042684:	f7fe f904 	bl	8040890 <HAL_GetTick>
 8042688:	4602      	mov	r2, r0
 804268a:	693b      	ldr	r3, [r7, #16]
 804268c:	1ad3      	subs	r3, r2, r3
 804268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8042692:	4293      	cmp	r3, r2
 8042694:	d901      	bls.n	804269a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8042696:	2303      	movs	r3, #3
 8042698:	e0b5      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804269a:	4b3e      	ldr	r3, [pc, #248]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 804269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804269e:	f003 0302 	and.w	r3, r3, #2
 80426a2:	2b00      	cmp	r3, #0
 80426a4:	d1ee      	bne.n	8042684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80426a6:	7dfb      	ldrb	r3, [r7, #23]
 80426a8:	2b01      	cmp	r3, #1
 80426aa:	d105      	bne.n	80426b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80426ac:	4b39      	ldr	r3, [pc, #228]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80426ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80426b0:	4a38      	ldr	r2, [pc, #224]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80426b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80426b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80426b8:	687b      	ldr	r3, [r7, #4]
 80426ba:	699b      	ldr	r3, [r3, #24]
 80426bc:	2b00      	cmp	r3, #0
 80426be:	f000 80a1 	beq.w	8042804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80426c2:	4b34      	ldr	r3, [pc, #208]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80426c4:	689b      	ldr	r3, [r3, #8]
 80426c6:	f003 030c 	and.w	r3, r3, #12
 80426ca:	2b08      	cmp	r3, #8
 80426cc:	d05c      	beq.n	8042788 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80426ce:	687b      	ldr	r3, [r7, #4]
 80426d0:	699b      	ldr	r3, [r3, #24]
 80426d2:	2b02      	cmp	r3, #2
 80426d4:	d141      	bne.n	804275a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80426d6:	4b31      	ldr	r3, [pc, #196]	@ (804279c <HAL_RCC_OscConfig+0x478>)
 80426d8:	2200      	movs	r2, #0
 80426da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80426dc:	f7fe f8d8 	bl	8040890 <HAL_GetTick>
 80426e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80426e2:	e008      	b.n	80426f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80426e4:	f7fe f8d4 	bl	8040890 <HAL_GetTick>
 80426e8:	4602      	mov	r2, r0
 80426ea:	693b      	ldr	r3, [r7, #16]
 80426ec:	1ad3      	subs	r3, r2, r3
 80426ee:	2b02      	cmp	r3, #2
 80426f0:	d901      	bls.n	80426f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80426f2:	2303      	movs	r3, #3
 80426f4:	e087      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80426f6:	4b27      	ldr	r3, [pc, #156]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 80426f8:	681b      	ldr	r3, [r3, #0]
 80426fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80426fe:	2b00      	cmp	r3, #0
 8042700:	d1f0      	bne.n	80426e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8042702:	687b      	ldr	r3, [r7, #4]
 8042704:	69da      	ldr	r2, [r3, #28]
 8042706:	687b      	ldr	r3, [r7, #4]
 8042708:	6a1b      	ldr	r3, [r3, #32]
 804270a:	431a      	orrs	r2, r3
 804270c:	687b      	ldr	r3, [r7, #4]
 804270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042710:	019b      	lsls	r3, r3, #6
 8042712:	431a      	orrs	r2, r3
 8042714:	687b      	ldr	r3, [r7, #4]
 8042716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042718:	085b      	lsrs	r3, r3, #1
 804271a:	3b01      	subs	r3, #1
 804271c:	041b      	lsls	r3, r3, #16
 804271e:	431a      	orrs	r2, r3
 8042720:	687b      	ldr	r3, [r7, #4]
 8042722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042724:	061b      	lsls	r3, r3, #24
 8042726:	491b      	ldr	r1, [pc, #108]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 8042728:	4313      	orrs	r3, r2
 804272a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804272c:	4b1b      	ldr	r3, [pc, #108]	@ (804279c <HAL_RCC_OscConfig+0x478>)
 804272e:	2201      	movs	r2, #1
 8042730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8042732:	f7fe f8ad 	bl	8040890 <HAL_GetTick>
 8042736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8042738:	e008      	b.n	804274c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804273a:	f7fe f8a9 	bl	8040890 <HAL_GetTick>
 804273e:	4602      	mov	r2, r0
 8042740:	693b      	ldr	r3, [r7, #16]
 8042742:	1ad3      	subs	r3, r2, r3
 8042744:	2b02      	cmp	r3, #2
 8042746:	d901      	bls.n	804274c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8042748:	2303      	movs	r3, #3
 804274a:	e05c      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804274c:	4b11      	ldr	r3, [pc, #68]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 804274e:	681b      	ldr	r3, [r3, #0]
 8042750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8042754:	2b00      	cmp	r3, #0
 8042756:	d0f0      	beq.n	804273a <HAL_RCC_OscConfig+0x416>
 8042758:	e054      	b.n	8042804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804275a:	4b10      	ldr	r3, [pc, #64]	@ (804279c <HAL_RCC_OscConfig+0x478>)
 804275c:	2200      	movs	r2, #0
 804275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8042760:	f7fe f896 	bl	8040890 <HAL_GetTick>
 8042764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8042766:	e008      	b.n	804277a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042768:	f7fe f892 	bl	8040890 <HAL_GetTick>
 804276c:	4602      	mov	r2, r0
 804276e:	693b      	ldr	r3, [r7, #16]
 8042770:	1ad3      	subs	r3, r2, r3
 8042772:	2b02      	cmp	r3, #2
 8042774:	d901      	bls.n	804277a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8042776:	2303      	movs	r3, #3
 8042778:	e045      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804277a:	4b06      	ldr	r3, [pc, #24]	@ (8042794 <HAL_RCC_OscConfig+0x470>)
 804277c:	681b      	ldr	r3, [r3, #0]
 804277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8042782:	2b00      	cmp	r3, #0
 8042784:	d1f0      	bne.n	8042768 <HAL_RCC_OscConfig+0x444>
 8042786:	e03d      	b.n	8042804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8042788:	687b      	ldr	r3, [r7, #4]
 804278a:	699b      	ldr	r3, [r3, #24]
 804278c:	2b01      	cmp	r3, #1
 804278e:	d107      	bne.n	80427a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8042790:	2301      	movs	r3, #1
 8042792:	e038      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
 8042794:	40023800 	.word	0x40023800
 8042798:	40007000 	.word	0x40007000
 804279c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80427a0:	4b1b      	ldr	r3, [pc, #108]	@ (8042810 <HAL_RCC_OscConfig+0x4ec>)
 80427a2:	685b      	ldr	r3, [r3, #4]
 80427a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80427a6:	687b      	ldr	r3, [r7, #4]
 80427a8:	699b      	ldr	r3, [r3, #24]
 80427aa:	2b01      	cmp	r3, #1
 80427ac:	d028      	beq.n	8042800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80427ae:	68fb      	ldr	r3, [r7, #12]
 80427b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80427b4:	687b      	ldr	r3, [r7, #4]
 80427b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80427b8:	429a      	cmp	r2, r3
 80427ba:	d121      	bne.n	8042800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80427bc:	68fb      	ldr	r3, [r7, #12]
 80427be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80427c2:	687b      	ldr	r3, [r7, #4]
 80427c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80427c6:	429a      	cmp	r2, r3
 80427c8:	d11a      	bne.n	8042800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80427ca:	68fa      	ldr	r2, [r7, #12]
 80427cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80427d0:	4013      	ands	r3, r2
 80427d2:	687a      	ldr	r2, [r7, #4]
 80427d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80427d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80427d8:	4293      	cmp	r3, r2
 80427da:	d111      	bne.n	8042800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80427dc:	68fb      	ldr	r3, [r7, #12]
 80427de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80427e2:	687b      	ldr	r3, [r7, #4]
 80427e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80427e6:	085b      	lsrs	r3, r3, #1
 80427e8:	3b01      	subs	r3, #1
 80427ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80427ec:	429a      	cmp	r2, r3
 80427ee:	d107      	bne.n	8042800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80427f0:	68fb      	ldr	r3, [r7, #12]
 80427f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80427f6:	687b      	ldr	r3, [r7, #4]
 80427f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80427fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80427fc:	429a      	cmp	r2, r3
 80427fe:	d001      	beq.n	8042804 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8042800:	2301      	movs	r3, #1
 8042802:	e000      	b.n	8042806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8042804:	2300      	movs	r3, #0
}
 8042806:	4618      	mov	r0, r3
 8042808:	3718      	adds	r7, #24
 804280a:	46bd      	mov	sp, r7
 804280c:	bd80      	pop	{r7, pc}
 804280e:	bf00      	nop
 8042810:	40023800 	.word	0x40023800

08042814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042814:	b580      	push	{r7, lr}
 8042816:	b084      	sub	sp, #16
 8042818:	af00      	add	r7, sp, #0
 804281a:	6078      	str	r0, [r7, #4]
 804281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804281e:	687b      	ldr	r3, [r7, #4]
 8042820:	2b00      	cmp	r3, #0
 8042822:	d101      	bne.n	8042828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8042824:	2301      	movs	r3, #1
 8042826:	e0cc      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8042828:	4b68      	ldr	r3, [pc, #416]	@ (80429cc <HAL_RCC_ClockConfig+0x1b8>)
 804282a:	681b      	ldr	r3, [r3, #0]
 804282c:	f003 0307 	and.w	r3, r3, #7
 8042830:	683a      	ldr	r2, [r7, #0]
 8042832:	429a      	cmp	r2, r3
 8042834:	d90c      	bls.n	8042850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042836:	4b65      	ldr	r3, [pc, #404]	@ (80429cc <HAL_RCC_ClockConfig+0x1b8>)
 8042838:	683a      	ldr	r2, [r7, #0]
 804283a:	b2d2      	uxtb	r2, r2
 804283c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804283e:	4b63      	ldr	r3, [pc, #396]	@ (80429cc <HAL_RCC_ClockConfig+0x1b8>)
 8042840:	681b      	ldr	r3, [r3, #0]
 8042842:	f003 0307 	and.w	r3, r3, #7
 8042846:	683a      	ldr	r2, [r7, #0]
 8042848:	429a      	cmp	r2, r3
 804284a:	d001      	beq.n	8042850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 804284c:	2301      	movs	r3, #1
 804284e:	e0b8      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042850:	687b      	ldr	r3, [r7, #4]
 8042852:	681b      	ldr	r3, [r3, #0]
 8042854:	f003 0302 	and.w	r3, r3, #2
 8042858:	2b00      	cmp	r3, #0
 804285a:	d020      	beq.n	804289e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804285c:	687b      	ldr	r3, [r7, #4]
 804285e:	681b      	ldr	r3, [r3, #0]
 8042860:	f003 0304 	and.w	r3, r3, #4
 8042864:	2b00      	cmp	r3, #0
 8042866:	d005      	beq.n	8042874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8042868:	4b59      	ldr	r3, [pc, #356]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 804286a:	689b      	ldr	r3, [r3, #8]
 804286c:	4a58      	ldr	r2, [pc, #352]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 804286e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8042872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042874:	687b      	ldr	r3, [r7, #4]
 8042876:	681b      	ldr	r3, [r3, #0]
 8042878:	f003 0308 	and.w	r3, r3, #8
 804287c:	2b00      	cmp	r3, #0
 804287e:	d005      	beq.n	804288c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8042880:	4b53      	ldr	r3, [pc, #332]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042882:	689b      	ldr	r3, [r3, #8]
 8042884:	4a52      	ldr	r2, [pc, #328]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 804288a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804288c:	4b50      	ldr	r3, [pc, #320]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 804288e:	689b      	ldr	r3, [r3, #8]
 8042890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8042894:	687b      	ldr	r3, [r7, #4]
 8042896:	689b      	ldr	r3, [r3, #8]
 8042898:	494d      	ldr	r1, [pc, #308]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 804289a:	4313      	orrs	r3, r2
 804289c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804289e:	687b      	ldr	r3, [r7, #4]
 80428a0:	681b      	ldr	r3, [r3, #0]
 80428a2:	f003 0301 	and.w	r3, r3, #1
 80428a6:	2b00      	cmp	r3, #0
 80428a8:	d044      	beq.n	8042934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	685b      	ldr	r3, [r3, #4]
 80428ae:	2b01      	cmp	r3, #1
 80428b0:	d107      	bne.n	80428c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80428b2:	4b47      	ldr	r3, [pc, #284]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 80428b4:	681b      	ldr	r3, [r3, #0]
 80428b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80428ba:	2b00      	cmp	r3, #0
 80428bc:	d119      	bne.n	80428f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80428be:	2301      	movs	r3, #1
 80428c0:	e07f      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80428c2:	687b      	ldr	r3, [r7, #4]
 80428c4:	685b      	ldr	r3, [r3, #4]
 80428c6:	2b02      	cmp	r3, #2
 80428c8:	d003      	beq.n	80428d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80428ca:	687b      	ldr	r3, [r7, #4]
 80428cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80428ce:	2b03      	cmp	r3, #3
 80428d0:	d107      	bne.n	80428e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80428d2:	4b3f      	ldr	r3, [pc, #252]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 80428d4:	681b      	ldr	r3, [r3, #0]
 80428d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80428da:	2b00      	cmp	r3, #0
 80428dc:	d109      	bne.n	80428f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80428de:	2301      	movs	r3, #1
 80428e0:	e06f      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80428e2:	4b3b      	ldr	r3, [pc, #236]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 80428e4:	681b      	ldr	r3, [r3, #0]
 80428e6:	f003 0302 	and.w	r3, r3, #2
 80428ea:	2b00      	cmp	r3, #0
 80428ec:	d101      	bne.n	80428f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80428ee:	2301      	movs	r3, #1
 80428f0:	e067      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80428f2:	4b37      	ldr	r3, [pc, #220]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 80428f4:	689b      	ldr	r3, [r3, #8]
 80428f6:	f023 0203 	bic.w	r2, r3, #3
 80428fa:	687b      	ldr	r3, [r7, #4]
 80428fc:	685b      	ldr	r3, [r3, #4]
 80428fe:	4934      	ldr	r1, [pc, #208]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042900:	4313      	orrs	r3, r2
 8042902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8042904:	f7fd ffc4 	bl	8040890 <HAL_GetTick>
 8042908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804290a:	e00a      	b.n	8042922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804290c:	f7fd ffc0 	bl	8040890 <HAL_GetTick>
 8042910:	4602      	mov	r2, r0
 8042912:	68fb      	ldr	r3, [r7, #12]
 8042914:	1ad3      	subs	r3, r2, r3
 8042916:	f241 3288 	movw	r2, #5000	@ 0x1388
 804291a:	4293      	cmp	r3, r2
 804291c:	d901      	bls.n	8042922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 804291e:	2303      	movs	r3, #3
 8042920:	e04f      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042922:	4b2b      	ldr	r3, [pc, #172]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042924:	689b      	ldr	r3, [r3, #8]
 8042926:	f003 020c 	and.w	r2, r3, #12
 804292a:	687b      	ldr	r3, [r7, #4]
 804292c:	685b      	ldr	r3, [r3, #4]
 804292e:	009b      	lsls	r3, r3, #2
 8042930:	429a      	cmp	r2, r3
 8042932:	d1eb      	bne.n	804290c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042934:	4b25      	ldr	r3, [pc, #148]	@ (80429cc <HAL_RCC_ClockConfig+0x1b8>)
 8042936:	681b      	ldr	r3, [r3, #0]
 8042938:	f003 0307 	and.w	r3, r3, #7
 804293c:	683a      	ldr	r2, [r7, #0]
 804293e:	429a      	cmp	r2, r3
 8042940:	d20c      	bcs.n	804295c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042942:	4b22      	ldr	r3, [pc, #136]	@ (80429cc <HAL_RCC_ClockConfig+0x1b8>)
 8042944:	683a      	ldr	r2, [r7, #0]
 8042946:	b2d2      	uxtb	r2, r2
 8042948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804294a:	4b20      	ldr	r3, [pc, #128]	@ (80429cc <HAL_RCC_ClockConfig+0x1b8>)
 804294c:	681b      	ldr	r3, [r3, #0]
 804294e:	f003 0307 	and.w	r3, r3, #7
 8042952:	683a      	ldr	r2, [r7, #0]
 8042954:	429a      	cmp	r2, r3
 8042956:	d001      	beq.n	804295c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8042958:	2301      	movs	r3, #1
 804295a:	e032      	b.n	80429c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804295c:	687b      	ldr	r3, [r7, #4]
 804295e:	681b      	ldr	r3, [r3, #0]
 8042960:	f003 0304 	and.w	r3, r3, #4
 8042964:	2b00      	cmp	r3, #0
 8042966:	d008      	beq.n	804297a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8042968:	4b19      	ldr	r3, [pc, #100]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 804296a:	689b      	ldr	r3, [r3, #8]
 804296c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8042970:	687b      	ldr	r3, [r7, #4]
 8042972:	68db      	ldr	r3, [r3, #12]
 8042974:	4916      	ldr	r1, [pc, #88]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042976:	4313      	orrs	r3, r2
 8042978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804297a:	687b      	ldr	r3, [r7, #4]
 804297c:	681b      	ldr	r3, [r3, #0]
 804297e:	f003 0308 	and.w	r3, r3, #8
 8042982:	2b00      	cmp	r3, #0
 8042984:	d009      	beq.n	804299a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8042986:	4b12      	ldr	r3, [pc, #72]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042988:	689b      	ldr	r3, [r3, #8]
 804298a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 804298e:	687b      	ldr	r3, [r7, #4]
 8042990:	691b      	ldr	r3, [r3, #16]
 8042992:	00db      	lsls	r3, r3, #3
 8042994:	490e      	ldr	r1, [pc, #56]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 8042996:	4313      	orrs	r3, r2
 8042998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 804299a:	f000 f821 	bl	80429e0 <HAL_RCC_GetSysClockFreq>
 804299e:	4602      	mov	r2, r0
 80429a0:	4b0b      	ldr	r3, [pc, #44]	@ (80429d0 <HAL_RCC_ClockConfig+0x1bc>)
 80429a2:	689b      	ldr	r3, [r3, #8]
 80429a4:	091b      	lsrs	r3, r3, #4
 80429a6:	f003 030f 	and.w	r3, r3, #15
 80429aa:	490a      	ldr	r1, [pc, #40]	@ (80429d4 <HAL_RCC_ClockConfig+0x1c0>)
 80429ac:	5ccb      	ldrb	r3, [r1, r3]
 80429ae:	fa22 f303 	lsr.w	r3, r2, r3
 80429b2:	4a09      	ldr	r2, [pc, #36]	@ (80429d8 <HAL_RCC_ClockConfig+0x1c4>)
 80429b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80429b6:	4b09      	ldr	r3, [pc, #36]	@ (80429dc <HAL_RCC_ClockConfig+0x1c8>)
 80429b8:	681b      	ldr	r3, [r3, #0]
 80429ba:	4618      	mov	r0, r3
 80429bc:	f7fd ff24 	bl	8040808 <HAL_InitTick>

  return HAL_OK;
 80429c0:	2300      	movs	r3, #0
}
 80429c2:	4618      	mov	r0, r3
 80429c4:	3710      	adds	r7, #16
 80429c6:	46bd      	mov	sp, r7
 80429c8:	bd80      	pop	{r7, pc}
 80429ca:	bf00      	nop
 80429cc:	40023c00 	.word	0x40023c00
 80429d0:	40023800 	.word	0x40023800
 80429d4:	08046c38 	.word	0x08046c38
 80429d8:	20000000 	.word	0x20000000
 80429dc:	20000004 	.word	0x20000004

080429e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80429e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80429e4:	b094      	sub	sp, #80	@ 0x50
 80429e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80429e8:	2300      	movs	r3, #0
 80429ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80429ec:	2300      	movs	r3, #0
 80429ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80429f0:	2300      	movs	r3, #0
 80429f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80429f4:	2300      	movs	r3, #0
 80429f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80429f8:	4b79      	ldr	r3, [pc, #484]	@ (8042be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80429fa:	689b      	ldr	r3, [r3, #8]
 80429fc:	f003 030c 	and.w	r3, r3, #12
 8042a00:	2b08      	cmp	r3, #8
 8042a02:	d00d      	beq.n	8042a20 <HAL_RCC_GetSysClockFreq+0x40>
 8042a04:	2b08      	cmp	r3, #8
 8042a06:	f200 80e1 	bhi.w	8042bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8042a0a:	2b00      	cmp	r3, #0
 8042a0c:	d002      	beq.n	8042a14 <HAL_RCC_GetSysClockFreq+0x34>
 8042a0e:	2b04      	cmp	r3, #4
 8042a10:	d003      	beq.n	8042a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8042a12:	e0db      	b.n	8042bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8042a14:	4b73      	ldr	r3, [pc, #460]	@ (8042be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8042a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8042a18:	e0db      	b.n	8042bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8042a1a:	4b73      	ldr	r3, [pc, #460]	@ (8042be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8042a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8042a1e:	e0d8      	b.n	8042bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8042a20:	4b6f      	ldr	r3, [pc, #444]	@ (8042be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8042a22:	685b      	ldr	r3, [r3, #4]
 8042a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8042a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8042be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8042a2c:	685b      	ldr	r3, [r3, #4]
 8042a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8042a32:	2b00      	cmp	r3, #0
 8042a34:	d063      	beq.n	8042afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042a36:	4b6a      	ldr	r3, [pc, #424]	@ (8042be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8042a38:	685b      	ldr	r3, [r3, #4]
 8042a3a:	099b      	lsrs	r3, r3, #6
 8042a3c:	2200      	movs	r2, #0
 8042a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8042a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8042a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8042a4a:	2300      	movs	r3, #0
 8042a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8042a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8042a52:	4622      	mov	r2, r4
 8042a54:	462b      	mov	r3, r5
 8042a56:	f04f 0000 	mov.w	r0, #0
 8042a5a:	f04f 0100 	mov.w	r1, #0
 8042a5e:	0159      	lsls	r1, r3, #5
 8042a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8042a64:	0150      	lsls	r0, r2, #5
 8042a66:	4602      	mov	r2, r0
 8042a68:	460b      	mov	r3, r1
 8042a6a:	4621      	mov	r1, r4
 8042a6c:	1a51      	subs	r1, r2, r1
 8042a6e:	6139      	str	r1, [r7, #16]
 8042a70:	4629      	mov	r1, r5
 8042a72:	eb63 0301 	sbc.w	r3, r3, r1
 8042a76:	617b      	str	r3, [r7, #20]
 8042a78:	f04f 0200 	mov.w	r2, #0
 8042a7c:	f04f 0300 	mov.w	r3, #0
 8042a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8042a84:	4659      	mov	r1, fp
 8042a86:	018b      	lsls	r3, r1, #6
 8042a88:	4651      	mov	r1, sl
 8042a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8042a8e:	4651      	mov	r1, sl
 8042a90:	018a      	lsls	r2, r1, #6
 8042a92:	4651      	mov	r1, sl
 8042a94:	ebb2 0801 	subs.w	r8, r2, r1
 8042a98:	4659      	mov	r1, fp
 8042a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8042a9e:	f04f 0200 	mov.w	r2, #0
 8042aa2:	f04f 0300 	mov.w	r3, #0
 8042aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8042aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8042aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8042ab2:	4690      	mov	r8, r2
 8042ab4:	4699      	mov	r9, r3
 8042ab6:	4623      	mov	r3, r4
 8042ab8:	eb18 0303 	adds.w	r3, r8, r3
 8042abc:	60bb      	str	r3, [r7, #8]
 8042abe:	462b      	mov	r3, r5
 8042ac0:	eb49 0303 	adc.w	r3, r9, r3
 8042ac4:	60fb      	str	r3, [r7, #12]
 8042ac6:	f04f 0200 	mov.w	r2, #0
 8042aca:	f04f 0300 	mov.w	r3, #0
 8042ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8042ad2:	4629      	mov	r1, r5
 8042ad4:	024b      	lsls	r3, r1, #9
 8042ad6:	4621      	mov	r1, r4
 8042ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8042adc:	4621      	mov	r1, r4
 8042ade:	024a      	lsls	r2, r1, #9
 8042ae0:	4610      	mov	r0, r2
 8042ae2:	4619      	mov	r1, r3
 8042ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042ae6:	2200      	movs	r2, #0
 8042ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8042aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8042aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8042af0:	f7fd fb6a 	bl	80401c8 <__aeabi_uldivmod>
 8042af4:	4602      	mov	r2, r0
 8042af6:	460b      	mov	r3, r1
 8042af8:	4613      	mov	r3, r2
 8042afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042afc:	e058      	b.n	8042bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042afe:	4b38      	ldr	r3, [pc, #224]	@ (8042be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8042b00:	685b      	ldr	r3, [r3, #4]
 8042b02:	099b      	lsrs	r3, r3, #6
 8042b04:	2200      	movs	r2, #0
 8042b06:	4618      	mov	r0, r3
 8042b08:	4611      	mov	r1, r2
 8042b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8042b0e:	623b      	str	r3, [r7, #32]
 8042b10:	2300      	movs	r3, #0
 8042b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8042b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8042b18:	4642      	mov	r2, r8
 8042b1a:	464b      	mov	r3, r9
 8042b1c:	f04f 0000 	mov.w	r0, #0
 8042b20:	f04f 0100 	mov.w	r1, #0
 8042b24:	0159      	lsls	r1, r3, #5
 8042b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8042b2a:	0150      	lsls	r0, r2, #5
 8042b2c:	4602      	mov	r2, r0
 8042b2e:	460b      	mov	r3, r1
 8042b30:	4641      	mov	r1, r8
 8042b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8042b36:	4649      	mov	r1, r9
 8042b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8042b3c:	f04f 0200 	mov.w	r2, #0
 8042b40:	f04f 0300 	mov.w	r3, #0
 8042b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8042b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8042b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8042b50:	ebb2 040a 	subs.w	r4, r2, sl
 8042b54:	eb63 050b 	sbc.w	r5, r3, fp
 8042b58:	f04f 0200 	mov.w	r2, #0
 8042b5c:	f04f 0300 	mov.w	r3, #0
 8042b60:	00eb      	lsls	r3, r5, #3
 8042b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8042b66:	00e2      	lsls	r2, r4, #3
 8042b68:	4614      	mov	r4, r2
 8042b6a:	461d      	mov	r5, r3
 8042b6c:	4643      	mov	r3, r8
 8042b6e:	18e3      	adds	r3, r4, r3
 8042b70:	603b      	str	r3, [r7, #0]
 8042b72:	464b      	mov	r3, r9
 8042b74:	eb45 0303 	adc.w	r3, r5, r3
 8042b78:	607b      	str	r3, [r7, #4]
 8042b7a:	f04f 0200 	mov.w	r2, #0
 8042b7e:	f04f 0300 	mov.w	r3, #0
 8042b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8042b86:	4629      	mov	r1, r5
 8042b88:	028b      	lsls	r3, r1, #10
 8042b8a:	4621      	mov	r1, r4
 8042b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8042b90:	4621      	mov	r1, r4
 8042b92:	028a      	lsls	r2, r1, #10
 8042b94:	4610      	mov	r0, r2
 8042b96:	4619      	mov	r1, r3
 8042b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042b9a:	2200      	movs	r2, #0
 8042b9c:	61bb      	str	r3, [r7, #24]
 8042b9e:	61fa      	str	r2, [r7, #28]
 8042ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8042ba4:	f7fd fb10 	bl	80401c8 <__aeabi_uldivmod>
 8042ba8:	4602      	mov	r2, r0
 8042baa:	460b      	mov	r3, r1
 8042bac:	4613      	mov	r3, r2
 8042bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8042bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8042be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8042bb2:	685b      	ldr	r3, [r3, #4]
 8042bb4:	0c1b      	lsrs	r3, r3, #16
 8042bb6:	f003 0303 	and.w	r3, r3, #3
 8042bba:	3301      	adds	r3, #1
 8042bbc:	005b      	lsls	r3, r3, #1
 8042bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8042bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8042bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8042bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8042bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8042bca:	e002      	b.n	8042bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8042bcc:	4b05      	ldr	r3, [pc, #20]	@ (8042be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8042bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8042bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8042bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8042bd4:	4618      	mov	r0, r3
 8042bd6:	3750      	adds	r7, #80	@ 0x50
 8042bd8:	46bd      	mov	sp, r7
 8042bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8042bde:	bf00      	nop
 8042be0:	40023800 	.word	0x40023800
 8042be4:	00f42400 	.word	0x00f42400
 8042be8:	007a1200 	.word	0x007a1200

08042bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042bec:	b480      	push	{r7}
 8042bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8042bf0:	4b03      	ldr	r3, [pc, #12]	@ (8042c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8042bf2:	681b      	ldr	r3, [r3, #0]
}
 8042bf4:	4618      	mov	r0, r3
 8042bf6:	46bd      	mov	sp, r7
 8042bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bfc:	4770      	bx	lr
 8042bfe:	bf00      	nop
 8042c00:	20000000 	.word	0x20000000

08042c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8042c04:	b084      	sub	sp, #16
 8042c06:	b580      	push	{r7, lr}
 8042c08:	b084      	sub	sp, #16
 8042c0a:	af00      	add	r7, sp, #0
 8042c0c:	6078      	str	r0, [r7, #4]
 8042c0e:	f107 001c 	add.w	r0, r7, #28
 8042c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8042c16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8042c1a:	2b01      	cmp	r3, #1
 8042c1c:	d123      	bne.n	8042c66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8042c1e:	687b      	ldr	r3, [r7, #4]
 8042c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042c22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8042c26:	687b      	ldr	r3, [r7, #4]
 8042c28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8042c2a:	687b      	ldr	r3, [r7, #4]
 8042c2c:	68db      	ldr	r3, [r3, #12]
 8042c2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8042c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8042c36:	687a      	ldr	r2, [r7, #4]
 8042c38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8042c3a:	687b      	ldr	r3, [r7, #4]
 8042c3c:	68db      	ldr	r3, [r3, #12]
 8042c3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8042c42:	687b      	ldr	r3, [r7, #4]
 8042c44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8042c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8042c4a:	2b01      	cmp	r3, #1
 8042c4c:	d105      	bne.n	8042c5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8042c4e:	687b      	ldr	r3, [r7, #4]
 8042c50:	68db      	ldr	r3, [r3, #12]
 8042c52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8042c56:	687b      	ldr	r3, [r7, #4]
 8042c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8042c5a:	6878      	ldr	r0, [r7, #4]
 8042c5c:	f001 fae8 	bl	8044230 <USB_CoreReset>
 8042c60:	4603      	mov	r3, r0
 8042c62:	73fb      	strb	r3, [r7, #15]
 8042c64:	e01b      	b.n	8042c9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8042c66:	687b      	ldr	r3, [r7, #4]
 8042c68:	68db      	ldr	r3, [r3, #12]
 8042c6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8042c6e:	687b      	ldr	r3, [r7, #4]
 8042c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8042c72:	6878      	ldr	r0, [r7, #4]
 8042c74:	f001 fadc 	bl	8044230 <USB_CoreReset>
 8042c78:	4603      	mov	r3, r0
 8042c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8042c7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8042c80:	2b00      	cmp	r3, #0
 8042c82:	d106      	bne.n	8042c92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8042c84:	687b      	ldr	r3, [r7, #4]
 8042c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042c88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8042c8c:	687b      	ldr	r3, [r7, #4]
 8042c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8042c90:	e005      	b.n	8042c9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8042c92:	687b      	ldr	r3, [r7, #4]
 8042c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042c96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8042c9a:	687b      	ldr	r3, [r7, #4]
 8042c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8042c9e:	7fbb      	ldrb	r3, [r7, #30]
 8042ca0:	2b01      	cmp	r3, #1
 8042ca2:	d10b      	bne.n	8042cbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8042ca4:	687b      	ldr	r3, [r7, #4]
 8042ca6:	689b      	ldr	r3, [r3, #8]
 8042ca8:	f043 0206 	orr.w	r2, r3, #6
 8042cac:	687b      	ldr	r3, [r7, #4]
 8042cae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8042cb0:	687b      	ldr	r3, [r7, #4]
 8042cb2:	689b      	ldr	r3, [r3, #8]
 8042cb4:	f043 0220 	orr.w	r2, r3, #32
 8042cb8:	687b      	ldr	r3, [r7, #4]
 8042cba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8042cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8042cbe:	4618      	mov	r0, r3
 8042cc0:	3710      	adds	r7, #16
 8042cc2:	46bd      	mov	sp, r7
 8042cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8042cc8:	b004      	add	sp, #16
 8042cca:	4770      	bx	lr

08042ccc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8042ccc:	b480      	push	{r7}
 8042cce:	b087      	sub	sp, #28
 8042cd0:	af00      	add	r7, sp, #0
 8042cd2:	60f8      	str	r0, [r7, #12]
 8042cd4:	60b9      	str	r1, [r7, #8]
 8042cd6:	4613      	mov	r3, r2
 8042cd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8042cda:	79fb      	ldrb	r3, [r7, #7]
 8042cdc:	2b02      	cmp	r3, #2
 8042cde:	d165      	bne.n	8042dac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8042ce0:	68bb      	ldr	r3, [r7, #8]
 8042ce2:	4a41      	ldr	r2, [pc, #260]	@ (8042de8 <USB_SetTurnaroundTime+0x11c>)
 8042ce4:	4293      	cmp	r3, r2
 8042ce6:	d906      	bls.n	8042cf6 <USB_SetTurnaroundTime+0x2a>
 8042ce8:	68bb      	ldr	r3, [r7, #8]
 8042cea:	4a40      	ldr	r2, [pc, #256]	@ (8042dec <USB_SetTurnaroundTime+0x120>)
 8042cec:	4293      	cmp	r3, r2
 8042cee:	d202      	bcs.n	8042cf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8042cf0:	230f      	movs	r3, #15
 8042cf2:	617b      	str	r3, [r7, #20]
 8042cf4:	e062      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8042cf6:	68bb      	ldr	r3, [r7, #8]
 8042cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8042dec <USB_SetTurnaroundTime+0x120>)
 8042cfa:	4293      	cmp	r3, r2
 8042cfc:	d306      	bcc.n	8042d0c <USB_SetTurnaroundTime+0x40>
 8042cfe:	68bb      	ldr	r3, [r7, #8]
 8042d00:	4a3b      	ldr	r2, [pc, #236]	@ (8042df0 <USB_SetTurnaroundTime+0x124>)
 8042d02:	4293      	cmp	r3, r2
 8042d04:	d202      	bcs.n	8042d0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8042d06:	230e      	movs	r3, #14
 8042d08:	617b      	str	r3, [r7, #20]
 8042d0a:	e057      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8042d0c:	68bb      	ldr	r3, [r7, #8]
 8042d0e:	4a38      	ldr	r2, [pc, #224]	@ (8042df0 <USB_SetTurnaroundTime+0x124>)
 8042d10:	4293      	cmp	r3, r2
 8042d12:	d306      	bcc.n	8042d22 <USB_SetTurnaroundTime+0x56>
 8042d14:	68bb      	ldr	r3, [r7, #8]
 8042d16:	4a37      	ldr	r2, [pc, #220]	@ (8042df4 <USB_SetTurnaroundTime+0x128>)
 8042d18:	4293      	cmp	r3, r2
 8042d1a:	d202      	bcs.n	8042d22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8042d1c:	230d      	movs	r3, #13
 8042d1e:	617b      	str	r3, [r7, #20]
 8042d20:	e04c      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8042d22:	68bb      	ldr	r3, [r7, #8]
 8042d24:	4a33      	ldr	r2, [pc, #204]	@ (8042df4 <USB_SetTurnaroundTime+0x128>)
 8042d26:	4293      	cmp	r3, r2
 8042d28:	d306      	bcc.n	8042d38 <USB_SetTurnaroundTime+0x6c>
 8042d2a:	68bb      	ldr	r3, [r7, #8]
 8042d2c:	4a32      	ldr	r2, [pc, #200]	@ (8042df8 <USB_SetTurnaroundTime+0x12c>)
 8042d2e:	4293      	cmp	r3, r2
 8042d30:	d802      	bhi.n	8042d38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8042d32:	230c      	movs	r3, #12
 8042d34:	617b      	str	r3, [r7, #20]
 8042d36:	e041      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8042d38:	68bb      	ldr	r3, [r7, #8]
 8042d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8042df8 <USB_SetTurnaroundTime+0x12c>)
 8042d3c:	4293      	cmp	r3, r2
 8042d3e:	d906      	bls.n	8042d4e <USB_SetTurnaroundTime+0x82>
 8042d40:	68bb      	ldr	r3, [r7, #8]
 8042d42:	4a2e      	ldr	r2, [pc, #184]	@ (8042dfc <USB_SetTurnaroundTime+0x130>)
 8042d44:	4293      	cmp	r3, r2
 8042d46:	d802      	bhi.n	8042d4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8042d48:	230b      	movs	r3, #11
 8042d4a:	617b      	str	r3, [r7, #20]
 8042d4c:	e036      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8042d4e:	68bb      	ldr	r3, [r7, #8]
 8042d50:	4a2a      	ldr	r2, [pc, #168]	@ (8042dfc <USB_SetTurnaroundTime+0x130>)
 8042d52:	4293      	cmp	r3, r2
 8042d54:	d906      	bls.n	8042d64 <USB_SetTurnaroundTime+0x98>
 8042d56:	68bb      	ldr	r3, [r7, #8]
 8042d58:	4a29      	ldr	r2, [pc, #164]	@ (8042e00 <USB_SetTurnaroundTime+0x134>)
 8042d5a:	4293      	cmp	r3, r2
 8042d5c:	d802      	bhi.n	8042d64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8042d5e:	230a      	movs	r3, #10
 8042d60:	617b      	str	r3, [r7, #20]
 8042d62:	e02b      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8042d64:	68bb      	ldr	r3, [r7, #8]
 8042d66:	4a26      	ldr	r2, [pc, #152]	@ (8042e00 <USB_SetTurnaroundTime+0x134>)
 8042d68:	4293      	cmp	r3, r2
 8042d6a:	d906      	bls.n	8042d7a <USB_SetTurnaroundTime+0xae>
 8042d6c:	68bb      	ldr	r3, [r7, #8]
 8042d6e:	4a25      	ldr	r2, [pc, #148]	@ (8042e04 <USB_SetTurnaroundTime+0x138>)
 8042d70:	4293      	cmp	r3, r2
 8042d72:	d202      	bcs.n	8042d7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8042d74:	2309      	movs	r3, #9
 8042d76:	617b      	str	r3, [r7, #20]
 8042d78:	e020      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8042d7a:	68bb      	ldr	r3, [r7, #8]
 8042d7c:	4a21      	ldr	r2, [pc, #132]	@ (8042e04 <USB_SetTurnaroundTime+0x138>)
 8042d7e:	4293      	cmp	r3, r2
 8042d80:	d306      	bcc.n	8042d90 <USB_SetTurnaroundTime+0xc4>
 8042d82:	68bb      	ldr	r3, [r7, #8]
 8042d84:	4a20      	ldr	r2, [pc, #128]	@ (8042e08 <USB_SetTurnaroundTime+0x13c>)
 8042d86:	4293      	cmp	r3, r2
 8042d88:	d802      	bhi.n	8042d90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8042d8a:	2308      	movs	r3, #8
 8042d8c:	617b      	str	r3, [r7, #20]
 8042d8e:	e015      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8042d90:	68bb      	ldr	r3, [r7, #8]
 8042d92:	4a1d      	ldr	r2, [pc, #116]	@ (8042e08 <USB_SetTurnaroundTime+0x13c>)
 8042d94:	4293      	cmp	r3, r2
 8042d96:	d906      	bls.n	8042da6 <USB_SetTurnaroundTime+0xda>
 8042d98:	68bb      	ldr	r3, [r7, #8]
 8042d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8042e0c <USB_SetTurnaroundTime+0x140>)
 8042d9c:	4293      	cmp	r3, r2
 8042d9e:	d202      	bcs.n	8042da6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8042da0:	2307      	movs	r3, #7
 8042da2:	617b      	str	r3, [r7, #20]
 8042da4:	e00a      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8042da6:	2306      	movs	r3, #6
 8042da8:	617b      	str	r3, [r7, #20]
 8042daa:	e007      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8042dac:	79fb      	ldrb	r3, [r7, #7]
 8042dae:	2b00      	cmp	r3, #0
 8042db0:	d102      	bne.n	8042db8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8042db2:	2309      	movs	r3, #9
 8042db4:	617b      	str	r3, [r7, #20]
 8042db6:	e001      	b.n	8042dbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8042db8:	2309      	movs	r3, #9
 8042dba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8042dbc:	68fb      	ldr	r3, [r7, #12]
 8042dbe:	68db      	ldr	r3, [r3, #12]
 8042dc0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8042dc4:	68fb      	ldr	r3, [r7, #12]
 8042dc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8042dc8:	68fb      	ldr	r3, [r7, #12]
 8042dca:	68da      	ldr	r2, [r3, #12]
 8042dcc:	697b      	ldr	r3, [r7, #20]
 8042dce:	029b      	lsls	r3, r3, #10
 8042dd0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8042dd4:	431a      	orrs	r2, r3
 8042dd6:	68fb      	ldr	r3, [r7, #12]
 8042dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8042dda:	2300      	movs	r3, #0
}
 8042ddc:	4618      	mov	r0, r3
 8042dde:	371c      	adds	r7, #28
 8042de0:	46bd      	mov	sp, r7
 8042de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042de6:	4770      	bx	lr
 8042de8:	00d8acbf 	.word	0x00d8acbf
 8042dec:	00e4e1c0 	.word	0x00e4e1c0
 8042df0:	00f42400 	.word	0x00f42400
 8042df4:	01067380 	.word	0x01067380
 8042df8:	011a499f 	.word	0x011a499f
 8042dfc:	01312cff 	.word	0x01312cff
 8042e00:	014ca43f 	.word	0x014ca43f
 8042e04:	016e3600 	.word	0x016e3600
 8042e08:	01a6ab1f 	.word	0x01a6ab1f
 8042e0c:	01e84800 	.word	0x01e84800

08042e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8042e10:	b480      	push	{r7}
 8042e12:	b083      	sub	sp, #12
 8042e14:	af00      	add	r7, sp, #0
 8042e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8042e18:	687b      	ldr	r3, [r7, #4]
 8042e1a:	689b      	ldr	r3, [r3, #8]
 8042e1c:	f043 0201 	orr.w	r2, r3, #1
 8042e20:	687b      	ldr	r3, [r7, #4]
 8042e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8042e24:	2300      	movs	r3, #0
}
 8042e26:	4618      	mov	r0, r3
 8042e28:	370c      	adds	r7, #12
 8042e2a:	46bd      	mov	sp, r7
 8042e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e30:	4770      	bx	lr

08042e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8042e32:	b480      	push	{r7}
 8042e34:	b083      	sub	sp, #12
 8042e36:	af00      	add	r7, sp, #0
 8042e38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8042e3a:	687b      	ldr	r3, [r7, #4]
 8042e3c:	689b      	ldr	r3, [r3, #8]
 8042e3e:	f023 0201 	bic.w	r2, r3, #1
 8042e42:	687b      	ldr	r3, [r7, #4]
 8042e44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8042e46:	2300      	movs	r3, #0
}
 8042e48:	4618      	mov	r0, r3
 8042e4a:	370c      	adds	r7, #12
 8042e4c:	46bd      	mov	sp, r7
 8042e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e52:	4770      	bx	lr

08042e54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8042e54:	b580      	push	{r7, lr}
 8042e56:	b084      	sub	sp, #16
 8042e58:	af00      	add	r7, sp, #0
 8042e5a:	6078      	str	r0, [r7, #4]
 8042e5c:	460b      	mov	r3, r1
 8042e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8042e60:	2300      	movs	r3, #0
 8042e62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8042e64:	687b      	ldr	r3, [r7, #4]
 8042e66:	68db      	ldr	r3, [r3, #12]
 8042e68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8042e6c:	687b      	ldr	r3, [r7, #4]
 8042e6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8042e70:	78fb      	ldrb	r3, [r7, #3]
 8042e72:	2b01      	cmp	r3, #1
 8042e74:	d115      	bne.n	8042ea2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	68db      	ldr	r3, [r3, #12]
 8042e7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8042e7e:	687b      	ldr	r3, [r7, #4]
 8042e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8042e82:	200a      	movs	r0, #10
 8042e84:	f7fd fd10 	bl	80408a8 <HAL_Delay>
      ms += 10U;
 8042e88:	68fb      	ldr	r3, [r7, #12]
 8042e8a:	330a      	adds	r3, #10
 8042e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8042e8e:	6878      	ldr	r0, [r7, #4]
 8042e90:	f001 f93f 	bl	8044112 <USB_GetMode>
 8042e94:	4603      	mov	r3, r0
 8042e96:	2b01      	cmp	r3, #1
 8042e98:	d01e      	beq.n	8042ed8 <USB_SetCurrentMode+0x84>
 8042e9a:	68fb      	ldr	r3, [r7, #12]
 8042e9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8042e9e:	d9f0      	bls.n	8042e82 <USB_SetCurrentMode+0x2e>
 8042ea0:	e01a      	b.n	8042ed8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8042ea2:	78fb      	ldrb	r3, [r7, #3]
 8042ea4:	2b00      	cmp	r3, #0
 8042ea6:	d115      	bne.n	8042ed4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8042ea8:	687b      	ldr	r3, [r7, #4]
 8042eaa:	68db      	ldr	r3, [r3, #12]
 8042eac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8042eb0:	687b      	ldr	r3, [r7, #4]
 8042eb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8042eb4:	200a      	movs	r0, #10
 8042eb6:	f7fd fcf7 	bl	80408a8 <HAL_Delay>
      ms += 10U;
 8042eba:	68fb      	ldr	r3, [r7, #12]
 8042ebc:	330a      	adds	r3, #10
 8042ebe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8042ec0:	6878      	ldr	r0, [r7, #4]
 8042ec2:	f001 f926 	bl	8044112 <USB_GetMode>
 8042ec6:	4603      	mov	r3, r0
 8042ec8:	2b00      	cmp	r3, #0
 8042eca:	d005      	beq.n	8042ed8 <USB_SetCurrentMode+0x84>
 8042ecc:	68fb      	ldr	r3, [r7, #12]
 8042ece:	2bc7      	cmp	r3, #199	@ 0xc7
 8042ed0:	d9f0      	bls.n	8042eb4 <USB_SetCurrentMode+0x60>
 8042ed2:	e001      	b.n	8042ed8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8042ed4:	2301      	movs	r3, #1
 8042ed6:	e005      	b.n	8042ee4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8042ed8:	68fb      	ldr	r3, [r7, #12]
 8042eda:	2bc8      	cmp	r3, #200	@ 0xc8
 8042edc:	d101      	bne.n	8042ee2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8042ede:	2301      	movs	r3, #1
 8042ee0:	e000      	b.n	8042ee4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8042ee2:	2300      	movs	r3, #0
}
 8042ee4:	4618      	mov	r0, r3
 8042ee6:	3710      	adds	r7, #16
 8042ee8:	46bd      	mov	sp, r7
 8042eea:	bd80      	pop	{r7, pc}

08042eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8042eec:	b084      	sub	sp, #16
 8042eee:	b580      	push	{r7, lr}
 8042ef0:	b086      	sub	sp, #24
 8042ef2:	af00      	add	r7, sp, #0
 8042ef4:	6078      	str	r0, [r7, #4]
 8042ef6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8042efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8042efe:	2300      	movs	r3, #0
 8042f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042f02:	687b      	ldr	r3, [r7, #4]
 8042f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8042f06:	2300      	movs	r3, #0
 8042f08:	613b      	str	r3, [r7, #16]
 8042f0a:	e009      	b.n	8042f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8042f0c:	687a      	ldr	r2, [r7, #4]
 8042f0e:	693b      	ldr	r3, [r7, #16]
 8042f10:	3340      	adds	r3, #64	@ 0x40
 8042f12:	009b      	lsls	r3, r3, #2
 8042f14:	4413      	add	r3, r2
 8042f16:	2200      	movs	r2, #0
 8042f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8042f1a:	693b      	ldr	r3, [r7, #16]
 8042f1c:	3301      	adds	r3, #1
 8042f1e:	613b      	str	r3, [r7, #16]
 8042f20:	693b      	ldr	r3, [r7, #16]
 8042f22:	2b0e      	cmp	r3, #14
 8042f24:	d9f2      	bls.n	8042f0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8042f26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8042f2a:	2b00      	cmp	r3, #0
 8042f2c:	d11c      	bne.n	8042f68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8042f2e:	68fb      	ldr	r3, [r7, #12]
 8042f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042f34:	685b      	ldr	r3, [r3, #4]
 8042f36:	68fa      	ldr	r2, [r7, #12]
 8042f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042f3c:	f043 0302 	orr.w	r3, r3, #2
 8042f40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8042f42:	687b      	ldr	r3, [r7, #4]
 8042f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042f46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8042f4a:	687b      	ldr	r3, [r7, #4]
 8042f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8042f4e:	687b      	ldr	r3, [r7, #4]
 8042f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042f52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8042f56:	687b      	ldr	r3, [r7, #4]
 8042f58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8042f5a:	687b      	ldr	r3, [r7, #4]
 8042f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042f5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8042f62:	687b      	ldr	r3, [r7, #4]
 8042f64:	639a      	str	r2, [r3, #56]	@ 0x38
 8042f66:	e00b      	b.n	8042f80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8042f68:	687b      	ldr	r3, [r7, #4]
 8042f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042f6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8042f70:	687b      	ldr	r3, [r7, #4]
 8042f72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8042f74:	687b      	ldr	r3, [r7, #4]
 8042f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042f78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8042f7c:	687b      	ldr	r3, [r7, #4]
 8042f7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8042f80:	68fb      	ldr	r3, [r7, #12]
 8042f82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8042f86:	461a      	mov	r2, r3
 8042f88:	2300      	movs	r3, #0
 8042f8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8042f8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8042f90:	2b01      	cmp	r3, #1
 8042f92:	d10d      	bne.n	8042fb0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8042f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8042f98:	2b00      	cmp	r3, #0
 8042f9a:	d104      	bne.n	8042fa6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8042f9c:	2100      	movs	r1, #0
 8042f9e:	6878      	ldr	r0, [r7, #4]
 8042fa0:	f000 f968 	bl	8043274 <USB_SetDevSpeed>
 8042fa4:	e008      	b.n	8042fb8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8042fa6:	2101      	movs	r1, #1
 8042fa8:	6878      	ldr	r0, [r7, #4]
 8042faa:	f000 f963 	bl	8043274 <USB_SetDevSpeed>
 8042fae:	e003      	b.n	8042fb8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8042fb0:	2103      	movs	r1, #3
 8042fb2:	6878      	ldr	r0, [r7, #4]
 8042fb4:	f000 f95e 	bl	8043274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8042fb8:	2110      	movs	r1, #16
 8042fba:	6878      	ldr	r0, [r7, #4]
 8042fbc:	f000 f8fa 	bl	80431b4 <USB_FlushTxFifo>
 8042fc0:	4603      	mov	r3, r0
 8042fc2:	2b00      	cmp	r3, #0
 8042fc4:	d001      	beq.n	8042fca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8042fc6:	2301      	movs	r3, #1
 8042fc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8042fca:	6878      	ldr	r0, [r7, #4]
 8042fcc:	f000 f924 	bl	8043218 <USB_FlushRxFifo>
 8042fd0:	4603      	mov	r3, r0
 8042fd2:	2b00      	cmp	r3, #0
 8042fd4:	d001      	beq.n	8042fda <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8042fd6:	2301      	movs	r3, #1
 8042fd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8042fda:	68fb      	ldr	r3, [r7, #12]
 8042fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042fe0:	461a      	mov	r2, r3
 8042fe2:	2300      	movs	r3, #0
 8042fe4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8042fe6:	68fb      	ldr	r3, [r7, #12]
 8042fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042fec:	461a      	mov	r2, r3
 8042fee:	2300      	movs	r3, #0
 8042ff0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8042ff2:	68fb      	ldr	r3, [r7, #12]
 8042ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042ff8:	461a      	mov	r2, r3
 8042ffa:	2300      	movs	r3, #0
 8042ffc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8042ffe:	2300      	movs	r3, #0
 8043000:	613b      	str	r3, [r7, #16]
 8043002:	e043      	b.n	804308c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8043004:	693b      	ldr	r3, [r7, #16]
 8043006:	015a      	lsls	r2, r3, #5
 8043008:	68fb      	ldr	r3, [r7, #12]
 804300a:	4413      	add	r3, r2
 804300c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043010:	681b      	ldr	r3, [r3, #0]
 8043012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8043016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 804301a:	d118      	bne.n	804304e <USB_DevInit+0x162>
    {
      if (i == 0U)
 804301c:	693b      	ldr	r3, [r7, #16]
 804301e:	2b00      	cmp	r3, #0
 8043020:	d10a      	bne.n	8043038 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8043022:	693b      	ldr	r3, [r7, #16]
 8043024:	015a      	lsls	r2, r3, #5
 8043026:	68fb      	ldr	r3, [r7, #12]
 8043028:	4413      	add	r3, r2
 804302a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804302e:	461a      	mov	r2, r3
 8043030:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8043034:	6013      	str	r3, [r2, #0]
 8043036:	e013      	b.n	8043060 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8043038:	693b      	ldr	r3, [r7, #16]
 804303a:	015a      	lsls	r2, r3, #5
 804303c:	68fb      	ldr	r3, [r7, #12]
 804303e:	4413      	add	r3, r2
 8043040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043044:	461a      	mov	r2, r3
 8043046:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 804304a:	6013      	str	r3, [r2, #0]
 804304c:	e008      	b.n	8043060 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 804304e:	693b      	ldr	r3, [r7, #16]
 8043050:	015a      	lsls	r2, r3, #5
 8043052:	68fb      	ldr	r3, [r7, #12]
 8043054:	4413      	add	r3, r2
 8043056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804305a:	461a      	mov	r2, r3
 804305c:	2300      	movs	r3, #0
 804305e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8043060:	693b      	ldr	r3, [r7, #16]
 8043062:	015a      	lsls	r2, r3, #5
 8043064:	68fb      	ldr	r3, [r7, #12]
 8043066:	4413      	add	r3, r2
 8043068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804306c:	461a      	mov	r2, r3
 804306e:	2300      	movs	r3, #0
 8043070:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8043072:	693b      	ldr	r3, [r7, #16]
 8043074:	015a      	lsls	r2, r3, #5
 8043076:	68fb      	ldr	r3, [r7, #12]
 8043078:	4413      	add	r3, r2
 804307a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804307e:	461a      	mov	r2, r3
 8043080:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8043084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8043086:	693b      	ldr	r3, [r7, #16]
 8043088:	3301      	adds	r3, #1
 804308a:	613b      	str	r3, [r7, #16]
 804308c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8043090:	461a      	mov	r2, r3
 8043092:	693b      	ldr	r3, [r7, #16]
 8043094:	4293      	cmp	r3, r2
 8043096:	d3b5      	bcc.n	8043004 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8043098:	2300      	movs	r3, #0
 804309a:	613b      	str	r3, [r7, #16]
 804309c:	e043      	b.n	8043126 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804309e:	693b      	ldr	r3, [r7, #16]
 80430a0:	015a      	lsls	r2, r3, #5
 80430a2:	68fb      	ldr	r3, [r7, #12]
 80430a4:	4413      	add	r3, r2
 80430a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80430aa:	681b      	ldr	r3, [r3, #0]
 80430ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80430b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80430b4:	d118      	bne.n	80430e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80430b6:	693b      	ldr	r3, [r7, #16]
 80430b8:	2b00      	cmp	r3, #0
 80430ba:	d10a      	bne.n	80430d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80430bc:	693b      	ldr	r3, [r7, #16]
 80430be:	015a      	lsls	r2, r3, #5
 80430c0:	68fb      	ldr	r3, [r7, #12]
 80430c2:	4413      	add	r3, r2
 80430c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80430c8:	461a      	mov	r2, r3
 80430ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80430ce:	6013      	str	r3, [r2, #0]
 80430d0:	e013      	b.n	80430fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80430d2:	693b      	ldr	r3, [r7, #16]
 80430d4:	015a      	lsls	r2, r3, #5
 80430d6:	68fb      	ldr	r3, [r7, #12]
 80430d8:	4413      	add	r3, r2
 80430da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80430de:	461a      	mov	r2, r3
 80430e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80430e4:	6013      	str	r3, [r2, #0]
 80430e6:	e008      	b.n	80430fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80430e8:	693b      	ldr	r3, [r7, #16]
 80430ea:	015a      	lsls	r2, r3, #5
 80430ec:	68fb      	ldr	r3, [r7, #12]
 80430ee:	4413      	add	r3, r2
 80430f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80430f4:	461a      	mov	r2, r3
 80430f6:	2300      	movs	r3, #0
 80430f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80430fa:	693b      	ldr	r3, [r7, #16]
 80430fc:	015a      	lsls	r2, r3, #5
 80430fe:	68fb      	ldr	r3, [r7, #12]
 8043100:	4413      	add	r3, r2
 8043102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043106:	461a      	mov	r2, r3
 8043108:	2300      	movs	r3, #0
 804310a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 804310c:	693b      	ldr	r3, [r7, #16]
 804310e:	015a      	lsls	r2, r3, #5
 8043110:	68fb      	ldr	r3, [r7, #12]
 8043112:	4413      	add	r3, r2
 8043114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043118:	461a      	mov	r2, r3
 804311a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804311e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8043120:	693b      	ldr	r3, [r7, #16]
 8043122:	3301      	adds	r3, #1
 8043124:	613b      	str	r3, [r7, #16]
 8043126:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 804312a:	461a      	mov	r2, r3
 804312c:	693b      	ldr	r3, [r7, #16]
 804312e:	4293      	cmp	r3, r2
 8043130:	d3b5      	bcc.n	804309e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8043132:	68fb      	ldr	r3, [r7, #12]
 8043134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043138:	691b      	ldr	r3, [r3, #16]
 804313a:	68fa      	ldr	r2, [r7, #12]
 804313c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8043140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8043144:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8043146:	687b      	ldr	r3, [r7, #4]
 8043148:	2200      	movs	r2, #0
 804314a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 804314c:	687b      	ldr	r3, [r7, #4]
 804314e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8043152:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8043154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8043158:	2b00      	cmp	r3, #0
 804315a:	d105      	bne.n	8043168 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 804315c:	687b      	ldr	r3, [r7, #4]
 804315e:	699b      	ldr	r3, [r3, #24]
 8043160:	f043 0210 	orr.w	r2, r3, #16
 8043164:	687b      	ldr	r3, [r7, #4]
 8043166:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8043168:	687b      	ldr	r3, [r7, #4]
 804316a:	699a      	ldr	r2, [r3, #24]
 804316c:	4b10      	ldr	r3, [pc, #64]	@ (80431b0 <USB_DevInit+0x2c4>)
 804316e:	4313      	orrs	r3, r2
 8043170:	687a      	ldr	r2, [r7, #4]
 8043172:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8043174:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8043178:	2b00      	cmp	r3, #0
 804317a:	d005      	beq.n	8043188 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 804317c:	687b      	ldr	r3, [r7, #4]
 804317e:	699b      	ldr	r3, [r3, #24]
 8043180:	f043 0208 	orr.w	r2, r3, #8
 8043184:	687b      	ldr	r3, [r7, #4]
 8043186:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8043188:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 804318c:	2b01      	cmp	r3, #1
 804318e:	d107      	bne.n	80431a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	699b      	ldr	r3, [r3, #24]
 8043194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043198:	f043 0304 	orr.w	r3, r3, #4
 804319c:	687a      	ldr	r2, [r7, #4]
 804319e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80431a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80431a2:	4618      	mov	r0, r3
 80431a4:	3718      	adds	r7, #24
 80431a6:	46bd      	mov	sp, r7
 80431a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80431ac:	b004      	add	sp, #16
 80431ae:	4770      	bx	lr
 80431b0:	803c3800 	.word	0x803c3800

080431b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80431b4:	b480      	push	{r7}
 80431b6:	b085      	sub	sp, #20
 80431b8:	af00      	add	r7, sp, #0
 80431ba:	6078      	str	r0, [r7, #4]
 80431bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80431be:	2300      	movs	r3, #0
 80431c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80431c2:	68fb      	ldr	r3, [r7, #12]
 80431c4:	3301      	adds	r3, #1
 80431c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80431c8:	68fb      	ldr	r3, [r7, #12]
 80431ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80431ce:	d901      	bls.n	80431d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80431d0:	2303      	movs	r3, #3
 80431d2:	e01b      	b.n	804320c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80431d4:	687b      	ldr	r3, [r7, #4]
 80431d6:	691b      	ldr	r3, [r3, #16]
 80431d8:	2b00      	cmp	r3, #0
 80431da:	daf2      	bge.n	80431c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80431dc:	2300      	movs	r3, #0
 80431de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80431e0:	683b      	ldr	r3, [r7, #0]
 80431e2:	019b      	lsls	r3, r3, #6
 80431e4:	f043 0220 	orr.w	r2, r3, #32
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80431ec:	68fb      	ldr	r3, [r7, #12]
 80431ee:	3301      	adds	r3, #1
 80431f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80431f2:	68fb      	ldr	r3, [r7, #12]
 80431f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80431f8:	d901      	bls.n	80431fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80431fa:	2303      	movs	r3, #3
 80431fc:	e006      	b.n	804320c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80431fe:	687b      	ldr	r3, [r7, #4]
 8043200:	691b      	ldr	r3, [r3, #16]
 8043202:	f003 0320 	and.w	r3, r3, #32
 8043206:	2b20      	cmp	r3, #32
 8043208:	d0f0      	beq.n	80431ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 804320a:	2300      	movs	r3, #0
}
 804320c:	4618      	mov	r0, r3
 804320e:	3714      	adds	r7, #20
 8043210:	46bd      	mov	sp, r7
 8043212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043216:	4770      	bx	lr

08043218 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8043218:	b480      	push	{r7}
 804321a:	b085      	sub	sp, #20
 804321c:	af00      	add	r7, sp, #0
 804321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8043220:	2300      	movs	r3, #0
 8043222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8043224:	68fb      	ldr	r3, [r7, #12]
 8043226:	3301      	adds	r3, #1
 8043228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804322a:	68fb      	ldr	r3, [r7, #12]
 804322c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8043230:	d901      	bls.n	8043236 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8043232:	2303      	movs	r3, #3
 8043234:	e018      	b.n	8043268 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8043236:	687b      	ldr	r3, [r7, #4]
 8043238:	691b      	ldr	r3, [r3, #16]
 804323a:	2b00      	cmp	r3, #0
 804323c:	daf2      	bge.n	8043224 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804323e:	2300      	movs	r3, #0
 8043240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8043242:	687b      	ldr	r3, [r7, #4]
 8043244:	2210      	movs	r2, #16
 8043246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8043248:	68fb      	ldr	r3, [r7, #12]
 804324a:	3301      	adds	r3, #1
 804324c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804324e:	68fb      	ldr	r3, [r7, #12]
 8043250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8043254:	d901      	bls.n	804325a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8043256:	2303      	movs	r3, #3
 8043258:	e006      	b.n	8043268 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 804325a:	687b      	ldr	r3, [r7, #4]
 804325c:	691b      	ldr	r3, [r3, #16]
 804325e:	f003 0310 	and.w	r3, r3, #16
 8043262:	2b10      	cmp	r3, #16
 8043264:	d0f0      	beq.n	8043248 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8043266:	2300      	movs	r3, #0
}
 8043268:	4618      	mov	r0, r3
 804326a:	3714      	adds	r7, #20
 804326c:	46bd      	mov	sp, r7
 804326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043272:	4770      	bx	lr

08043274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8043274:	b480      	push	{r7}
 8043276:	b085      	sub	sp, #20
 8043278:	af00      	add	r7, sp, #0
 804327a:	6078      	str	r0, [r7, #4]
 804327c:	460b      	mov	r3, r1
 804327e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043280:	687b      	ldr	r3, [r7, #4]
 8043282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8043284:	68fb      	ldr	r3, [r7, #12]
 8043286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804328a:	681a      	ldr	r2, [r3, #0]
 804328c:	78fb      	ldrb	r3, [r7, #3]
 804328e:	68f9      	ldr	r1, [r7, #12]
 8043290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8043294:	4313      	orrs	r3, r2
 8043296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8043298:	2300      	movs	r3, #0
}
 804329a:	4618      	mov	r0, r3
 804329c:	3714      	adds	r7, #20
 804329e:	46bd      	mov	sp, r7
 80432a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432a4:	4770      	bx	lr

080432a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80432a6:	b480      	push	{r7}
 80432a8:	b087      	sub	sp, #28
 80432aa:	af00      	add	r7, sp, #0
 80432ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80432ae:	687b      	ldr	r3, [r7, #4]
 80432b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80432b2:	693b      	ldr	r3, [r7, #16]
 80432b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80432b8:	689b      	ldr	r3, [r3, #8]
 80432ba:	f003 0306 	and.w	r3, r3, #6
 80432be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80432c0:	68fb      	ldr	r3, [r7, #12]
 80432c2:	2b00      	cmp	r3, #0
 80432c4:	d102      	bne.n	80432cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80432c6:	2300      	movs	r3, #0
 80432c8:	75fb      	strb	r3, [r7, #23]
 80432ca:	e00a      	b.n	80432e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80432cc:	68fb      	ldr	r3, [r7, #12]
 80432ce:	2b02      	cmp	r3, #2
 80432d0:	d002      	beq.n	80432d8 <USB_GetDevSpeed+0x32>
 80432d2:	68fb      	ldr	r3, [r7, #12]
 80432d4:	2b06      	cmp	r3, #6
 80432d6:	d102      	bne.n	80432de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80432d8:	2302      	movs	r3, #2
 80432da:	75fb      	strb	r3, [r7, #23]
 80432dc:	e001      	b.n	80432e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80432de:	230f      	movs	r3, #15
 80432e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80432e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80432e4:	4618      	mov	r0, r3
 80432e6:	371c      	adds	r7, #28
 80432e8:	46bd      	mov	sp, r7
 80432ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432ee:	4770      	bx	lr

080432f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80432f0:	b480      	push	{r7}
 80432f2:	b085      	sub	sp, #20
 80432f4:	af00      	add	r7, sp, #0
 80432f6:	6078      	str	r0, [r7, #4]
 80432f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80432fa:	687b      	ldr	r3, [r7, #4]
 80432fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80432fe:	683b      	ldr	r3, [r7, #0]
 8043300:	781b      	ldrb	r3, [r3, #0]
 8043302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8043304:	683b      	ldr	r3, [r7, #0]
 8043306:	785b      	ldrb	r3, [r3, #1]
 8043308:	2b01      	cmp	r3, #1
 804330a:	d13a      	bne.n	8043382 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 804330c:	68fb      	ldr	r3, [r7, #12]
 804330e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043312:	69da      	ldr	r2, [r3, #28]
 8043314:	683b      	ldr	r3, [r7, #0]
 8043316:	781b      	ldrb	r3, [r3, #0]
 8043318:	f003 030f 	and.w	r3, r3, #15
 804331c:	2101      	movs	r1, #1
 804331e:	fa01 f303 	lsl.w	r3, r1, r3
 8043322:	b29b      	uxth	r3, r3
 8043324:	68f9      	ldr	r1, [r7, #12]
 8043326:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804332a:	4313      	orrs	r3, r2
 804332c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 804332e:	68bb      	ldr	r3, [r7, #8]
 8043330:	015a      	lsls	r2, r3, #5
 8043332:	68fb      	ldr	r3, [r7, #12]
 8043334:	4413      	add	r3, r2
 8043336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804333a:	681b      	ldr	r3, [r3, #0]
 804333c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8043340:	2b00      	cmp	r3, #0
 8043342:	d155      	bne.n	80433f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8043344:	68bb      	ldr	r3, [r7, #8]
 8043346:	015a      	lsls	r2, r3, #5
 8043348:	68fb      	ldr	r3, [r7, #12]
 804334a:	4413      	add	r3, r2
 804334c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043350:	681a      	ldr	r2, [r3, #0]
 8043352:	683b      	ldr	r3, [r7, #0]
 8043354:	689b      	ldr	r3, [r3, #8]
 8043356:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 804335a:	683b      	ldr	r3, [r7, #0]
 804335c:	791b      	ldrb	r3, [r3, #4]
 804335e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8043360:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8043362:	68bb      	ldr	r3, [r7, #8]
 8043364:	059b      	lsls	r3, r3, #22
 8043366:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8043368:	4313      	orrs	r3, r2
 804336a:	68ba      	ldr	r2, [r7, #8]
 804336c:	0151      	lsls	r1, r2, #5
 804336e:	68fa      	ldr	r2, [r7, #12]
 8043370:	440a      	add	r2, r1
 8043372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804337a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 804337e:	6013      	str	r3, [r2, #0]
 8043380:	e036      	b.n	80433f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8043382:	68fb      	ldr	r3, [r7, #12]
 8043384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043388:	69da      	ldr	r2, [r3, #28]
 804338a:	683b      	ldr	r3, [r7, #0]
 804338c:	781b      	ldrb	r3, [r3, #0]
 804338e:	f003 030f 	and.w	r3, r3, #15
 8043392:	2101      	movs	r1, #1
 8043394:	fa01 f303 	lsl.w	r3, r1, r3
 8043398:	041b      	lsls	r3, r3, #16
 804339a:	68f9      	ldr	r1, [r7, #12]
 804339c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80433a0:	4313      	orrs	r3, r2
 80433a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80433a4:	68bb      	ldr	r3, [r7, #8]
 80433a6:	015a      	lsls	r2, r3, #5
 80433a8:	68fb      	ldr	r3, [r7, #12]
 80433aa:	4413      	add	r3, r2
 80433ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80433b0:	681b      	ldr	r3, [r3, #0]
 80433b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80433b6:	2b00      	cmp	r3, #0
 80433b8:	d11a      	bne.n	80433f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80433ba:	68bb      	ldr	r3, [r7, #8]
 80433bc:	015a      	lsls	r2, r3, #5
 80433be:	68fb      	ldr	r3, [r7, #12]
 80433c0:	4413      	add	r3, r2
 80433c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80433c6:	681a      	ldr	r2, [r3, #0]
 80433c8:	683b      	ldr	r3, [r7, #0]
 80433ca:	689b      	ldr	r3, [r3, #8]
 80433cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80433d0:	683b      	ldr	r3, [r7, #0]
 80433d2:	791b      	ldrb	r3, [r3, #4]
 80433d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80433d6:	430b      	orrs	r3, r1
 80433d8:	4313      	orrs	r3, r2
 80433da:	68ba      	ldr	r2, [r7, #8]
 80433dc:	0151      	lsls	r1, r2, #5
 80433de:	68fa      	ldr	r2, [r7, #12]
 80433e0:	440a      	add	r2, r1
 80433e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80433e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80433ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80433ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80433f0:	2300      	movs	r3, #0
}
 80433f2:	4618      	mov	r0, r3
 80433f4:	3714      	adds	r7, #20
 80433f6:	46bd      	mov	sp, r7
 80433f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80433fc:	4770      	bx	lr
	...

08043400 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043400:	b480      	push	{r7}
 8043402:	b085      	sub	sp, #20
 8043404:	af00      	add	r7, sp, #0
 8043406:	6078      	str	r0, [r7, #4]
 8043408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804340a:	687b      	ldr	r3, [r7, #4]
 804340c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 804340e:	683b      	ldr	r3, [r7, #0]
 8043410:	781b      	ldrb	r3, [r3, #0]
 8043412:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8043414:	683b      	ldr	r3, [r7, #0]
 8043416:	785b      	ldrb	r3, [r3, #1]
 8043418:	2b01      	cmp	r3, #1
 804341a:	d161      	bne.n	80434e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 804341c:	68bb      	ldr	r3, [r7, #8]
 804341e:	015a      	lsls	r2, r3, #5
 8043420:	68fb      	ldr	r3, [r7, #12]
 8043422:	4413      	add	r3, r2
 8043424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043428:	681b      	ldr	r3, [r3, #0]
 804342a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804342e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8043432:	d11f      	bne.n	8043474 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8043434:	68bb      	ldr	r3, [r7, #8]
 8043436:	015a      	lsls	r2, r3, #5
 8043438:	68fb      	ldr	r3, [r7, #12]
 804343a:	4413      	add	r3, r2
 804343c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043440:	681b      	ldr	r3, [r3, #0]
 8043442:	68ba      	ldr	r2, [r7, #8]
 8043444:	0151      	lsls	r1, r2, #5
 8043446:	68fa      	ldr	r2, [r7, #12]
 8043448:	440a      	add	r2, r1
 804344a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804344e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8043452:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8043454:	68bb      	ldr	r3, [r7, #8]
 8043456:	015a      	lsls	r2, r3, #5
 8043458:	68fb      	ldr	r3, [r7, #12]
 804345a:	4413      	add	r3, r2
 804345c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043460:	681b      	ldr	r3, [r3, #0]
 8043462:	68ba      	ldr	r2, [r7, #8]
 8043464:	0151      	lsls	r1, r2, #5
 8043466:	68fa      	ldr	r2, [r7, #12]
 8043468:	440a      	add	r2, r1
 804346a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804346e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8043474:	68fb      	ldr	r3, [r7, #12]
 8043476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804347a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 804347c:	683b      	ldr	r3, [r7, #0]
 804347e:	781b      	ldrb	r3, [r3, #0]
 8043480:	f003 030f 	and.w	r3, r3, #15
 8043484:	2101      	movs	r1, #1
 8043486:	fa01 f303 	lsl.w	r3, r1, r3
 804348a:	b29b      	uxth	r3, r3
 804348c:	43db      	mvns	r3, r3
 804348e:	68f9      	ldr	r1, [r7, #12]
 8043490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8043494:	4013      	ands	r3, r2
 8043496:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8043498:	68fb      	ldr	r3, [r7, #12]
 804349a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804349e:	69da      	ldr	r2, [r3, #28]
 80434a0:	683b      	ldr	r3, [r7, #0]
 80434a2:	781b      	ldrb	r3, [r3, #0]
 80434a4:	f003 030f 	and.w	r3, r3, #15
 80434a8:	2101      	movs	r1, #1
 80434aa:	fa01 f303 	lsl.w	r3, r1, r3
 80434ae:	b29b      	uxth	r3, r3
 80434b0:	43db      	mvns	r3, r3
 80434b2:	68f9      	ldr	r1, [r7, #12]
 80434b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80434b8:	4013      	ands	r3, r2
 80434ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80434bc:	68bb      	ldr	r3, [r7, #8]
 80434be:	015a      	lsls	r2, r3, #5
 80434c0:	68fb      	ldr	r3, [r7, #12]
 80434c2:	4413      	add	r3, r2
 80434c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80434c8:	681a      	ldr	r2, [r3, #0]
 80434ca:	68bb      	ldr	r3, [r7, #8]
 80434cc:	0159      	lsls	r1, r3, #5
 80434ce:	68fb      	ldr	r3, [r7, #12]
 80434d0:	440b      	add	r3, r1
 80434d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80434d6:	4619      	mov	r1, r3
 80434d8:	4b35      	ldr	r3, [pc, #212]	@ (80435b0 <USB_DeactivateEndpoint+0x1b0>)
 80434da:	4013      	ands	r3, r2
 80434dc:	600b      	str	r3, [r1, #0]
 80434de:	e060      	b.n	80435a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80434e0:	68bb      	ldr	r3, [r7, #8]
 80434e2:	015a      	lsls	r2, r3, #5
 80434e4:	68fb      	ldr	r3, [r7, #12]
 80434e6:	4413      	add	r3, r2
 80434e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80434ec:	681b      	ldr	r3, [r3, #0]
 80434ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80434f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80434f6:	d11f      	bne.n	8043538 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80434f8:	68bb      	ldr	r3, [r7, #8]
 80434fa:	015a      	lsls	r2, r3, #5
 80434fc:	68fb      	ldr	r3, [r7, #12]
 80434fe:	4413      	add	r3, r2
 8043500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043504:	681b      	ldr	r3, [r3, #0]
 8043506:	68ba      	ldr	r2, [r7, #8]
 8043508:	0151      	lsls	r1, r2, #5
 804350a:	68fa      	ldr	r2, [r7, #12]
 804350c:	440a      	add	r2, r1
 804350e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8043516:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8043518:	68bb      	ldr	r3, [r7, #8]
 804351a:	015a      	lsls	r2, r3, #5
 804351c:	68fb      	ldr	r3, [r7, #12]
 804351e:	4413      	add	r3, r2
 8043520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043524:	681b      	ldr	r3, [r3, #0]
 8043526:	68ba      	ldr	r2, [r7, #8]
 8043528:	0151      	lsls	r1, r2, #5
 804352a:	68fa      	ldr	r2, [r7, #12]
 804352c:	440a      	add	r2, r1
 804352e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043532:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8043538:	68fb      	ldr	r3, [r7, #12]
 804353a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804353e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8043540:	683b      	ldr	r3, [r7, #0]
 8043542:	781b      	ldrb	r3, [r3, #0]
 8043544:	f003 030f 	and.w	r3, r3, #15
 8043548:	2101      	movs	r1, #1
 804354a:	fa01 f303 	lsl.w	r3, r1, r3
 804354e:	041b      	lsls	r3, r3, #16
 8043550:	43db      	mvns	r3, r3
 8043552:	68f9      	ldr	r1, [r7, #12]
 8043554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8043558:	4013      	ands	r3, r2
 804355a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 804355c:	68fb      	ldr	r3, [r7, #12]
 804355e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043562:	69da      	ldr	r2, [r3, #28]
 8043564:	683b      	ldr	r3, [r7, #0]
 8043566:	781b      	ldrb	r3, [r3, #0]
 8043568:	f003 030f 	and.w	r3, r3, #15
 804356c:	2101      	movs	r1, #1
 804356e:	fa01 f303 	lsl.w	r3, r1, r3
 8043572:	041b      	lsls	r3, r3, #16
 8043574:	43db      	mvns	r3, r3
 8043576:	68f9      	ldr	r1, [r7, #12]
 8043578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804357c:	4013      	ands	r3, r2
 804357e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8043580:	68bb      	ldr	r3, [r7, #8]
 8043582:	015a      	lsls	r2, r3, #5
 8043584:	68fb      	ldr	r3, [r7, #12]
 8043586:	4413      	add	r3, r2
 8043588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804358c:	681a      	ldr	r2, [r3, #0]
 804358e:	68bb      	ldr	r3, [r7, #8]
 8043590:	0159      	lsls	r1, r3, #5
 8043592:	68fb      	ldr	r3, [r7, #12]
 8043594:	440b      	add	r3, r1
 8043596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804359a:	4619      	mov	r1, r3
 804359c:	4b05      	ldr	r3, [pc, #20]	@ (80435b4 <USB_DeactivateEndpoint+0x1b4>)
 804359e:	4013      	ands	r3, r2
 80435a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80435a2:	2300      	movs	r3, #0
}
 80435a4:	4618      	mov	r0, r3
 80435a6:	3714      	adds	r7, #20
 80435a8:	46bd      	mov	sp, r7
 80435aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80435ae:	4770      	bx	lr
 80435b0:	ec337800 	.word	0xec337800
 80435b4:	eff37800 	.word	0xeff37800

080435b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80435b8:	b580      	push	{r7, lr}
 80435ba:	b08a      	sub	sp, #40	@ 0x28
 80435bc:	af02      	add	r7, sp, #8
 80435be:	60f8      	str	r0, [r7, #12]
 80435c0:	60b9      	str	r1, [r7, #8]
 80435c2:	4613      	mov	r3, r2
 80435c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80435c6:	68fb      	ldr	r3, [r7, #12]
 80435c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80435ca:	68bb      	ldr	r3, [r7, #8]
 80435cc:	781b      	ldrb	r3, [r3, #0]
 80435ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80435d0:	68bb      	ldr	r3, [r7, #8]
 80435d2:	785b      	ldrb	r3, [r3, #1]
 80435d4:	2b01      	cmp	r3, #1
 80435d6:	f040 817f 	bne.w	80438d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80435da:	68bb      	ldr	r3, [r7, #8]
 80435dc:	691b      	ldr	r3, [r3, #16]
 80435de:	2b00      	cmp	r3, #0
 80435e0:	d132      	bne.n	8043648 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80435e2:	69bb      	ldr	r3, [r7, #24]
 80435e4:	015a      	lsls	r2, r3, #5
 80435e6:	69fb      	ldr	r3, [r7, #28]
 80435e8:	4413      	add	r3, r2
 80435ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80435ee:	691b      	ldr	r3, [r3, #16]
 80435f0:	69ba      	ldr	r2, [r7, #24]
 80435f2:	0151      	lsls	r1, r2, #5
 80435f4:	69fa      	ldr	r2, [r7, #28]
 80435f6:	440a      	add	r2, r1
 80435f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80435fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8043600:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8043604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8043606:	69bb      	ldr	r3, [r7, #24]
 8043608:	015a      	lsls	r2, r3, #5
 804360a:	69fb      	ldr	r3, [r7, #28]
 804360c:	4413      	add	r3, r2
 804360e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043612:	691b      	ldr	r3, [r3, #16]
 8043614:	69ba      	ldr	r2, [r7, #24]
 8043616:	0151      	lsls	r1, r2, #5
 8043618:	69fa      	ldr	r2, [r7, #28]
 804361a:	440a      	add	r2, r1
 804361c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8043624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8043626:	69bb      	ldr	r3, [r7, #24]
 8043628:	015a      	lsls	r2, r3, #5
 804362a:	69fb      	ldr	r3, [r7, #28]
 804362c:	4413      	add	r3, r2
 804362e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043632:	691b      	ldr	r3, [r3, #16]
 8043634:	69ba      	ldr	r2, [r7, #24]
 8043636:	0151      	lsls	r1, r2, #5
 8043638:	69fa      	ldr	r2, [r7, #28]
 804363a:	440a      	add	r2, r1
 804363c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043640:	0cdb      	lsrs	r3, r3, #19
 8043642:	04db      	lsls	r3, r3, #19
 8043644:	6113      	str	r3, [r2, #16]
 8043646:	e097      	b.n	8043778 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8043648:	69bb      	ldr	r3, [r7, #24]
 804364a:	015a      	lsls	r2, r3, #5
 804364c:	69fb      	ldr	r3, [r7, #28]
 804364e:	4413      	add	r3, r2
 8043650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043654:	691b      	ldr	r3, [r3, #16]
 8043656:	69ba      	ldr	r2, [r7, #24]
 8043658:	0151      	lsls	r1, r2, #5
 804365a:	69fa      	ldr	r2, [r7, #28]
 804365c:	440a      	add	r2, r1
 804365e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043662:	0cdb      	lsrs	r3, r3, #19
 8043664:	04db      	lsls	r3, r3, #19
 8043666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8043668:	69bb      	ldr	r3, [r7, #24]
 804366a:	015a      	lsls	r2, r3, #5
 804366c:	69fb      	ldr	r3, [r7, #28]
 804366e:	4413      	add	r3, r2
 8043670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043674:	691b      	ldr	r3, [r3, #16]
 8043676:	69ba      	ldr	r2, [r7, #24]
 8043678:	0151      	lsls	r1, r2, #5
 804367a:	69fa      	ldr	r2, [r7, #28]
 804367c:	440a      	add	r2, r1
 804367e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043682:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8043686:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 804368a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 804368c:	69bb      	ldr	r3, [r7, #24]
 804368e:	2b00      	cmp	r3, #0
 8043690:	d11a      	bne.n	80436c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8043692:	68bb      	ldr	r3, [r7, #8]
 8043694:	691a      	ldr	r2, [r3, #16]
 8043696:	68bb      	ldr	r3, [r7, #8]
 8043698:	689b      	ldr	r3, [r3, #8]
 804369a:	429a      	cmp	r2, r3
 804369c:	d903      	bls.n	80436a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 804369e:	68bb      	ldr	r3, [r7, #8]
 80436a0:	689a      	ldr	r2, [r3, #8]
 80436a2:	68bb      	ldr	r3, [r7, #8]
 80436a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80436a6:	69bb      	ldr	r3, [r7, #24]
 80436a8:	015a      	lsls	r2, r3, #5
 80436aa:	69fb      	ldr	r3, [r7, #28]
 80436ac:	4413      	add	r3, r2
 80436ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80436b2:	691b      	ldr	r3, [r3, #16]
 80436b4:	69ba      	ldr	r2, [r7, #24]
 80436b6:	0151      	lsls	r1, r2, #5
 80436b8:	69fa      	ldr	r2, [r7, #28]
 80436ba:	440a      	add	r2, r1
 80436bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80436c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80436c4:	6113      	str	r3, [r2, #16]
 80436c6:	e044      	b.n	8043752 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80436c8:	68bb      	ldr	r3, [r7, #8]
 80436ca:	691a      	ldr	r2, [r3, #16]
 80436cc:	68bb      	ldr	r3, [r7, #8]
 80436ce:	689b      	ldr	r3, [r3, #8]
 80436d0:	4413      	add	r3, r2
 80436d2:	1e5a      	subs	r2, r3, #1
 80436d4:	68bb      	ldr	r3, [r7, #8]
 80436d6:	689b      	ldr	r3, [r3, #8]
 80436d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80436dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80436de:	69bb      	ldr	r3, [r7, #24]
 80436e0:	015a      	lsls	r2, r3, #5
 80436e2:	69fb      	ldr	r3, [r7, #28]
 80436e4:	4413      	add	r3, r2
 80436e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80436ea:	691a      	ldr	r2, [r3, #16]
 80436ec:	8afb      	ldrh	r3, [r7, #22]
 80436ee:	04d9      	lsls	r1, r3, #19
 80436f0:	4ba4      	ldr	r3, [pc, #656]	@ (8043984 <USB_EPStartXfer+0x3cc>)
 80436f2:	400b      	ands	r3, r1
 80436f4:	69b9      	ldr	r1, [r7, #24]
 80436f6:	0148      	lsls	r0, r1, #5
 80436f8:	69f9      	ldr	r1, [r7, #28]
 80436fa:	4401      	add	r1, r0
 80436fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8043700:	4313      	orrs	r3, r2
 8043702:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8043704:	68bb      	ldr	r3, [r7, #8]
 8043706:	791b      	ldrb	r3, [r3, #4]
 8043708:	2b01      	cmp	r3, #1
 804370a:	d122      	bne.n	8043752 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 804370c:	69bb      	ldr	r3, [r7, #24]
 804370e:	015a      	lsls	r2, r3, #5
 8043710:	69fb      	ldr	r3, [r7, #28]
 8043712:	4413      	add	r3, r2
 8043714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043718:	691b      	ldr	r3, [r3, #16]
 804371a:	69ba      	ldr	r2, [r7, #24]
 804371c:	0151      	lsls	r1, r2, #5
 804371e:	69fa      	ldr	r2, [r7, #28]
 8043720:	440a      	add	r2, r1
 8043722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043726:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 804372a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 804372c:	69bb      	ldr	r3, [r7, #24]
 804372e:	015a      	lsls	r2, r3, #5
 8043730:	69fb      	ldr	r3, [r7, #28]
 8043732:	4413      	add	r3, r2
 8043734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043738:	691a      	ldr	r2, [r3, #16]
 804373a:	8afb      	ldrh	r3, [r7, #22]
 804373c:	075b      	lsls	r3, r3, #29
 804373e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8043742:	69b9      	ldr	r1, [r7, #24]
 8043744:	0148      	lsls	r0, r1, #5
 8043746:	69f9      	ldr	r1, [r7, #28]
 8043748:	4401      	add	r1, r0
 804374a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 804374e:	4313      	orrs	r3, r2
 8043750:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8043752:	69bb      	ldr	r3, [r7, #24]
 8043754:	015a      	lsls	r2, r3, #5
 8043756:	69fb      	ldr	r3, [r7, #28]
 8043758:	4413      	add	r3, r2
 804375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804375e:	691a      	ldr	r2, [r3, #16]
 8043760:	68bb      	ldr	r3, [r7, #8]
 8043762:	691b      	ldr	r3, [r3, #16]
 8043764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043768:	69b9      	ldr	r1, [r7, #24]
 804376a:	0148      	lsls	r0, r1, #5
 804376c:	69f9      	ldr	r1, [r7, #28]
 804376e:	4401      	add	r1, r0
 8043770:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8043774:	4313      	orrs	r3, r2
 8043776:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8043778:	79fb      	ldrb	r3, [r7, #7]
 804377a:	2b01      	cmp	r3, #1
 804377c:	d14b      	bne.n	8043816 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 804377e:	68bb      	ldr	r3, [r7, #8]
 8043780:	69db      	ldr	r3, [r3, #28]
 8043782:	2b00      	cmp	r3, #0
 8043784:	d009      	beq.n	804379a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8043786:	69bb      	ldr	r3, [r7, #24]
 8043788:	015a      	lsls	r2, r3, #5
 804378a:	69fb      	ldr	r3, [r7, #28]
 804378c:	4413      	add	r3, r2
 804378e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043792:	461a      	mov	r2, r3
 8043794:	68bb      	ldr	r3, [r7, #8]
 8043796:	69db      	ldr	r3, [r3, #28]
 8043798:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 804379a:	68bb      	ldr	r3, [r7, #8]
 804379c:	791b      	ldrb	r3, [r3, #4]
 804379e:	2b01      	cmp	r3, #1
 80437a0:	d128      	bne.n	80437f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80437a2:	69fb      	ldr	r3, [r7, #28]
 80437a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80437a8:	689b      	ldr	r3, [r3, #8]
 80437aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80437ae:	2b00      	cmp	r3, #0
 80437b0:	d110      	bne.n	80437d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80437b2:	69bb      	ldr	r3, [r7, #24]
 80437b4:	015a      	lsls	r2, r3, #5
 80437b6:	69fb      	ldr	r3, [r7, #28]
 80437b8:	4413      	add	r3, r2
 80437ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80437be:	681b      	ldr	r3, [r3, #0]
 80437c0:	69ba      	ldr	r2, [r7, #24]
 80437c2:	0151      	lsls	r1, r2, #5
 80437c4:	69fa      	ldr	r2, [r7, #28]
 80437c6:	440a      	add	r2, r1
 80437c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80437cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80437d0:	6013      	str	r3, [r2, #0]
 80437d2:	e00f      	b.n	80437f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80437d4:	69bb      	ldr	r3, [r7, #24]
 80437d6:	015a      	lsls	r2, r3, #5
 80437d8:	69fb      	ldr	r3, [r7, #28]
 80437da:	4413      	add	r3, r2
 80437dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80437e0:	681b      	ldr	r3, [r3, #0]
 80437e2:	69ba      	ldr	r2, [r7, #24]
 80437e4:	0151      	lsls	r1, r2, #5
 80437e6:	69fa      	ldr	r2, [r7, #28]
 80437e8:	440a      	add	r2, r1
 80437ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80437ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80437f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80437f4:	69bb      	ldr	r3, [r7, #24]
 80437f6:	015a      	lsls	r2, r3, #5
 80437f8:	69fb      	ldr	r3, [r7, #28]
 80437fa:	4413      	add	r3, r2
 80437fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	69ba      	ldr	r2, [r7, #24]
 8043804:	0151      	lsls	r1, r2, #5
 8043806:	69fa      	ldr	r2, [r7, #28]
 8043808:	440a      	add	r2, r1
 804380a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804380e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8043812:	6013      	str	r3, [r2, #0]
 8043814:	e166      	b.n	8043ae4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8043816:	69bb      	ldr	r3, [r7, #24]
 8043818:	015a      	lsls	r2, r3, #5
 804381a:	69fb      	ldr	r3, [r7, #28]
 804381c:	4413      	add	r3, r2
 804381e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043822:	681b      	ldr	r3, [r3, #0]
 8043824:	69ba      	ldr	r2, [r7, #24]
 8043826:	0151      	lsls	r1, r2, #5
 8043828:	69fa      	ldr	r2, [r7, #28]
 804382a:	440a      	add	r2, r1
 804382c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043830:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8043834:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8043836:	68bb      	ldr	r3, [r7, #8]
 8043838:	791b      	ldrb	r3, [r3, #4]
 804383a:	2b01      	cmp	r3, #1
 804383c:	d015      	beq.n	804386a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 804383e:	68bb      	ldr	r3, [r7, #8]
 8043840:	691b      	ldr	r3, [r3, #16]
 8043842:	2b00      	cmp	r3, #0
 8043844:	f000 814e 	beq.w	8043ae4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8043848:	69fb      	ldr	r3, [r7, #28]
 804384a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804384e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8043850:	68bb      	ldr	r3, [r7, #8]
 8043852:	781b      	ldrb	r3, [r3, #0]
 8043854:	f003 030f 	and.w	r3, r3, #15
 8043858:	2101      	movs	r1, #1
 804385a:	fa01 f303 	lsl.w	r3, r1, r3
 804385e:	69f9      	ldr	r1, [r7, #28]
 8043860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8043864:	4313      	orrs	r3, r2
 8043866:	634b      	str	r3, [r1, #52]	@ 0x34
 8043868:	e13c      	b.n	8043ae4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 804386a:	69fb      	ldr	r3, [r7, #28]
 804386c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043870:	689b      	ldr	r3, [r3, #8]
 8043872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043876:	2b00      	cmp	r3, #0
 8043878:	d110      	bne.n	804389c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 804387a:	69bb      	ldr	r3, [r7, #24]
 804387c:	015a      	lsls	r2, r3, #5
 804387e:	69fb      	ldr	r3, [r7, #28]
 8043880:	4413      	add	r3, r2
 8043882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043886:	681b      	ldr	r3, [r3, #0]
 8043888:	69ba      	ldr	r2, [r7, #24]
 804388a:	0151      	lsls	r1, r2, #5
 804388c:	69fa      	ldr	r2, [r7, #28]
 804388e:	440a      	add	r2, r1
 8043890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043894:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8043898:	6013      	str	r3, [r2, #0]
 804389a:	e00f      	b.n	80438bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 804389c:	69bb      	ldr	r3, [r7, #24]
 804389e:	015a      	lsls	r2, r3, #5
 80438a0:	69fb      	ldr	r3, [r7, #28]
 80438a2:	4413      	add	r3, r2
 80438a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80438a8:	681b      	ldr	r3, [r3, #0]
 80438aa:	69ba      	ldr	r2, [r7, #24]
 80438ac:	0151      	lsls	r1, r2, #5
 80438ae:	69fa      	ldr	r2, [r7, #28]
 80438b0:	440a      	add	r2, r1
 80438b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80438b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80438ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80438bc:	68bb      	ldr	r3, [r7, #8]
 80438be:	68d9      	ldr	r1, [r3, #12]
 80438c0:	68bb      	ldr	r3, [r7, #8]
 80438c2:	781a      	ldrb	r2, [r3, #0]
 80438c4:	68bb      	ldr	r3, [r7, #8]
 80438c6:	691b      	ldr	r3, [r3, #16]
 80438c8:	b298      	uxth	r0, r3
 80438ca:	79fb      	ldrb	r3, [r7, #7]
 80438cc:	9300      	str	r3, [sp, #0]
 80438ce:	4603      	mov	r3, r0
 80438d0:	68f8      	ldr	r0, [r7, #12]
 80438d2:	f000 f9b9 	bl	8043c48 <USB_WritePacket>
 80438d6:	e105      	b.n	8043ae4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80438d8:	69bb      	ldr	r3, [r7, #24]
 80438da:	015a      	lsls	r2, r3, #5
 80438dc:	69fb      	ldr	r3, [r7, #28]
 80438de:	4413      	add	r3, r2
 80438e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80438e4:	691b      	ldr	r3, [r3, #16]
 80438e6:	69ba      	ldr	r2, [r7, #24]
 80438e8:	0151      	lsls	r1, r2, #5
 80438ea:	69fa      	ldr	r2, [r7, #28]
 80438ec:	440a      	add	r2, r1
 80438ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80438f2:	0cdb      	lsrs	r3, r3, #19
 80438f4:	04db      	lsls	r3, r3, #19
 80438f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80438f8:	69bb      	ldr	r3, [r7, #24]
 80438fa:	015a      	lsls	r2, r3, #5
 80438fc:	69fb      	ldr	r3, [r7, #28]
 80438fe:	4413      	add	r3, r2
 8043900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043904:	691b      	ldr	r3, [r3, #16]
 8043906:	69ba      	ldr	r2, [r7, #24]
 8043908:	0151      	lsls	r1, r2, #5
 804390a:	69fa      	ldr	r2, [r7, #28]
 804390c:	440a      	add	r2, r1
 804390e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043912:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8043916:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 804391a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 804391c:	69bb      	ldr	r3, [r7, #24]
 804391e:	2b00      	cmp	r3, #0
 8043920:	d132      	bne.n	8043988 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8043922:	68bb      	ldr	r3, [r7, #8]
 8043924:	691b      	ldr	r3, [r3, #16]
 8043926:	2b00      	cmp	r3, #0
 8043928:	d003      	beq.n	8043932 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 804392a:	68bb      	ldr	r3, [r7, #8]
 804392c:	689a      	ldr	r2, [r3, #8]
 804392e:	68bb      	ldr	r3, [r7, #8]
 8043930:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8043932:	68bb      	ldr	r3, [r7, #8]
 8043934:	689a      	ldr	r2, [r3, #8]
 8043936:	68bb      	ldr	r3, [r7, #8]
 8043938:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 804393a:	69bb      	ldr	r3, [r7, #24]
 804393c:	015a      	lsls	r2, r3, #5
 804393e:	69fb      	ldr	r3, [r7, #28]
 8043940:	4413      	add	r3, r2
 8043942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043946:	691a      	ldr	r2, [r3, #16]
 8043948:	68bb      	ldr	r3, [r7, #8]
 804394a:	6a1b      	ldr	r3, [r3, #32]
 804394c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043950:	69b9      	ldr	r1, [r7, #24]
 8043952:	0148      	lsls	r0, r1, #5
 8043954:	69f9      	ldr	r1, [r7, #28]
 8043956:	4401      	add	r1, r0
 8043958:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 804395c:	4313      	orrs	r3, r2
 804395e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8043960:	69bb      	ldr	r3, [r7, #24]
 8043962:	015a      	lsls	r2, r3, #5
 8043964:	69fb      	ldr	r3, [r7, #28]
 8043966:	4413      	add	r3, r2
 8043968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804396c:	691b      	ldr	r3, [r3, #16]
 804396e:	69ba      	ldr	r2, [r7, #24]
 8043970:	0151      	lsls	r1, r2, #5
 8043972:	69fa      	ldr	r2, [r7, #28]
 8043974:	440a      	add	r2, r1
 8043976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804397a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 804397e:	6113      	str	r3, [r2, #16]
 8043980:	e062      	b.n	8043a48 <USB_EPStartXfer+0x490>
 8043982:	bf00      	nop
 8043984:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8043988:	68bb      	ldr	r3, [r7, #8]
 804398a:	691b      	ldr	r3, [r3, #16]
 804398c:	2b00      	cmp	r3, #0
 804398e:	d123      	bne.n	80439d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8043990:	69bb      	ldr	r3, [r7, #24]
 8043992:	015a      	lsls	r2, r3, #5
 8043994:	69fb      	ldr	r3, [r7, #28]
 8043996:	4413      	add	r3, r2
 8043998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804399c:	691a      	ldr	r2, [r3, #16]
 804399e:	68bb      	ldr	r3, [r7, #8]
 80439a0:	689b      	ldr	r3, [r3, #8]
 80439a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80439a6:	69b9      	ldr	r1, [r7, #24]
 80439a8:	0148      	lsls	r0, r1, #5
 80439aa:	69f9      	ldr	r1, [r7, #28]
 80439ac:	4401      	add	r1, r0
 80439ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80439b2:	4313      	orrs	r3, r2
 80439b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80439b6:	69bb      	ldr	r3, [r7, #24]
 80439b8:	015a      	lsls	r2, r3, #5
 80439ba:	69fb      	ldr	r3, [r7, #28]
 80439bc:	4413      	add	r3, r2
 80439be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80439c2:	691b      	ldr	r3, [r3, #16]
 80439c4:	69ba      	ldr	r2, [r7, #24]
 80439c6:	0151      	lsls	r1, r2, #5
 80439c8:	69fa      	ldr	r2, [r7, #28]
 80439ca:	440a      	add	r2, r1
 80439cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80439d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80439d4:	6113      	str	r3, [r2, #16]
 80439d6:	e037      	b.n	8043a48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80439d8:	68bb      	ldr	r3, [r7, #8]
 80439da:	691a      	ldr	r2, [r3, #16]
 80439dc:	68bb      	ldr	r3, [r7, #8]
 80439de:	689b      	ldr	r3, [r3, #8]
 80439e0:	4413      	add	r3, r2
 80439e2:	1e5a      	subs	r2, r3, #1
 80439e4:	68bb      	ldr	r3, [r7, #8]
 80439e6:	689b      	ldr	r3, [r3, #8]
 80439e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80439ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80439ee:	68bb      	ldr	r3, [r7, #8]
 80439f0:	689b      	ldr	r3, [r3, #8]
 80439f2:	8afa      	ldrh	r2, [r7, #22]
 80439f4:	fb03 f202 	mul.w	r2, r3, r2
 80439f8:	68bb      	ldr	r3, [r7, #8]
 80439fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80439fc:	69bb      	ldr	r3, [r7, #24]
 80439fe:	015a      	lsls	r2, r3, #5
 8043a00:	69fb      	ldr	r3, [r7, #28]
 8043a02:	4413      	add	r3, r2
 8043a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043a08:	691a      	ldr	r2, [r3, #16]
 8043a0a:	8afb      	ldrh	r3, [r7, #22]
 8043a0c:	04d9      	lsls	r1, r3, #19
 8043a0e:	4b38      	ldr	r3, [pc, #224]	@ (8043af0 <USB_EPStartXfer+0x538>)
 8043a10:	400b      	ands	r3, r1
 8043a12:	69b9      	ldr	r1, [r7, #24]
 8043a14:	0148      	lsls	r0, r1, #5
 8043a16:	69f9      	ldr	r1, [r7, #28]
 8043a18:	4401      	add	r1, r0
 8043a1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8043a1e:	4313      	orrs	r3, r2
 8043a20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8043a22:	69bb      	ldr	r3, [r7, #24]
 8043a24:	015a      	lsls	r2, r3, #5
 8043a26:	69fb      	ldr	r3, [r7, #28]
 8043a28:	4413      	add	r3, r2
 8043a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043a2e:	691a      	ldr	r2, [r3, #16]
 8043a30:	68bb      	ldr	r3, [r7, #8]
 8043a32:	6a1b      	ldr	r3, [r3, #32]
 8043a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043a38:	69b9      	ldr	r1, [r7, #24]
 8043a3a:	0148      	lsls	r0, r1, #5
 8043a3c:	69f9      	ldr	r1, [r7, #28]
 8043a3e:	4401      	add	r1, r0
 8043a40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8043a44:	4313      	orrs	r3, r2
 8043a46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8043a48:	79fb      	ldrb	r3, [r7, #7]
 8043a4a:	2b01      	cmp	r3, #1
 8043a4c:	d10d      	bne.n	8043a6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8043a4e:	68bb      	ldr	r3, [r7, #8]
 8043a50:	68db      	ldr	r3, [r3, #12]
 8043a52:	2b00      	cmp	r3, #0
 8043a54:	d009      	beq.n	8043a6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8043a56:	68bb      	ldr	r3, [r7, #8]
 8043a58:	68d9      	ldr	r1, [r3, #12]
 8043a5a:	69bb      	ldr	r3, [r7, #24]
 8043a5c:	015a      	lsls	r2, r3, #5
 8043a5e:	69fb      	ldr	r3, [r7, #28]
 8043a60:	4413      	add	r3, r2
 8043a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043a66:	460a      	mov	r2, r1
 8043a68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8043a6a:	68bb      	ldr	r3, [r7, #8]
 8043a6c:	791b      	ldrb	r3, [r3, #4]
 8043a6e:	2b01      	cmp	r3, #1
 8043a70:	d128      	bne.n	8043ac4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8043a72:	69fb      	ldr	r3, [r7, #28]
 8043a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043a78:	689b      	ldr	r3, [r3, #8]
 8043a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043a7e:	2b00      	cmp	r3, #0
 8043a80:	d110      	bne.n	8043aa4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8043a82:	69bb      	ldr	r3, [r7, #24]
 8043a84:	015a      	lsls	r2, r3, #5
 8043a86:	69fb      	ldr	r3, [r7, #28]
 8043a88:	4413      	add	r3, r2
 8043a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043a8e:	681b      	ldr	r3, [r3, #0]
 8043a90:	69ba      	ldr	r2, [r7, #24]
 8043a92:	0151      	lsls	r1, r2, #5
 8043a94:	69fa      	ldr	r2, [r7, #28]
 8043a96:	440a      	add	r2, r1
 8043a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043a9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8043aa0:	6013      	str	r3, [r2, #0]
 8043aa2:	e00f      	b.n	8043ac4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8043aa4:	69bb      	ldr	r3, [r7, #24]
 8043aa6:	015a      	lsls	r2, r3, #5
 8043aa8:	69fb      	ldr	r3, [r7, #28]
 8043aaa:	4413      	add	r3, r2
 8043aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043ab0:	681b      	ldr	r3, [r3, #0]
 8043ab2:	69ba      	ldr	r2, [r7, #24]
 8043ab4:	0151      	lsls	r1, r2, #5
 8043ab6:	69fa      	ldr	r2, [r7, #28]
 8043ab8:	440a      	add	r2, r1
 8043aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8043ac2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8043ac4:	69bb      	ldr	r3, [r7, #24]
 8043ac6:	015a      	lsls	r2, r3, #5
 8043ac8:	69fb      	ldr	r3, [r7, #28]
 8043aca:	4413      	add	r3, r2
 8043acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043ad0:	681b      	ldr	r3, [r3, #0]
 8043ad2:	69ba      	ldr	r2, [r7, #24]
 8043ad4:	0151      	lsls	r1, r2, #5
 8043ad6:	69fa      	ldr	r2, [r7, #28]
 8043ad8:	440a      	add	r2, r1
 8043ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043ade:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8043ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8043ae4:	2300      	movs	r3, #0
}
 8043ae6:	4618      	mov	r0, r3
 8043ae8:	3720      	adds	r7, #32
 8043aea:	46bd      	mov	sp, r7
 8043aec:	bd80      	pop	{r7, pc}
 8043aee:	bf00      	nop
 8043af0:	1ff80000 	.word	0x1ff80000

08043af4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8043af4:	b480      	push	{r7}
 8043af6:	b087      	sub	sp, #28
 8043af8:	af00      	add	r7, sp, #0
 8043afa:	6078      	str	r0, [r7, #4]
 8043afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8043afe:	2300      	movs	r3, #0
 8043b00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8043b02:	2300      	movs	r3, #0
 8043b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043b06:	687b      	ldr	r3, [r7, #4]
 8043b08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8043b0a:	683b      	ldr	r3, [r7, #0]
 8043b0c:	785b      	ldrb	r3, [r3, #1]
 8043b0e:	2b01      	cmp	r3, #1
 8043b10:	d14a      	bne.n	8043ba8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8043b12:	683b      	ldr	r3, [r7, #0]
 8043b14:	781b      	ldrb	r3, [r3, #0]
 8043b16:	015a      	lsls	r2, r3, #5
 8043b18:	693b      	ldr	r3, [r7, #16]
 8043b1a:	4413      	add	r3, r2
 8043b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043b20:	681b      	ldr	r3, [r3, #0]
 8043b22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8043b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8043b2a:	f040 8086 	bne.w	8043c3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8043b2e:	683b      	ldr	r3, [r7, #0]
 8043b30:	781b      	ldrb	r3, [r3, #0]
 8043b32:	015a      	lsls	r2, r3, #5
 8043b34:	693b      	ldr	r3, [r7, #16]
 8043b36:	4413      	add	r3, r2
 8043b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043b3c:	681b      	ldr	r3, [r3, #0]
 8043b3e:	683a      	ldr	r2, [r7, #0]
 8043b40:	7812      	ldrb	r2, [r2, #0]
 8043b42:	0151      	lsls	r1, r2, #5
 8043b44:	693a      	ldr	r2, [r7, #16]
 8043b46:	440a      	add	r2, r1
 8043b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043b4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8043b50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8043b52:	683b      	ldr	r3, [r7, #0]
 8043b54:	781b      	ldrb	r3, [r3, #0]
 8043b56:	015a      	lsls	r2, r3, #5
 8043b58:	693b      	ldr	r3, [r7, #16]
 8043b5a:	4413      	add	r3, r2
 8043b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043b60:	681b      	ldr	r3, [r3, #0]
 8043b62:	683a      	ldr	r2, [r7, #0]
 8043b64:	7812      	ldrb	r2, [r2, #0]
 8043b66:	0151      	lsls	r1, r2, #5
 8043b68:	693a      	ldr	r2, [r7, #16]
 8043b6a:	440a      	add	r2, r1
 8043b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043b70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043b74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8043b76:	68fb      	ldr	r3, [r7, #12]
 8043b78:	3301      	adds	r3, #1
 8043b7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8043b7c:	68fb      	ldr	r3, [r7, #12]
 8043b7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8043b82:	4293      	cmp	r3, r2
 8043b84:	d902      	bls.n	8043b8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8043b86:	2301      	movs	r3, #1
 8043b88:	75fb      	strb	r3, [r7, #23]
          break;
 8043b8a:	e056      	b.n	8043c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8043b8c:	683b      	ldr	r3, [r7, #0]
 8043b8e:	781b      	ldrb	r3, [r3, #0]
 8043b90:	015a      	lsls	r2, r3, #5
 8043b92:	693b      	ldr	r3, [r7, #16]
 8043b94:	4413      	add	r3, r2
 8043b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043b9a:	681b      	ldr	r3, [r3, #0]
 8043b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8043ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8043ba4:	d0e7      	beq.n	8043b76 <USB_EPStopXfer+0x82>
 8043ba6:	e048      	b.n	8043c3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8043ba8:	683b      	ldr	r3, [r7, #0]
 8043baa:	781b      	ldrb	r3, [r3, #0]
 8043bac:	015a      	lsls	r2, r3, #5
 8043bae:	693b      	ldr	r3, [r7, #16]
 8043bb0:	4413      	add	r3, r2
 8043bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043bb6:	681b      	ldr	r3, [r3, #0]
 8043bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8043bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8043bc0:	d13b      	bne.n	8043c3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8043bc2:	683b      	ldr	r3, [r7, #0]
 8043bc4:	781b      	ldrb	r3, [r3, #0]
 8043bc6:	015a      	lsls	r2, r3, #5
 8043bc8:	693b      	ldr	r3, [r7, #16]
 8043bca:	4413      	add	r3, r2
 8043bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043bd0:	681b      	ldr	r3, [r3, #0]
 8043bd2:	683a      	ldr	r2, [r7, #0]
 8043bd4:	7812      	ldrb	r2, [r2, #0]
 8043bd6:	0151      	lsls	r1, r2, #5
 8043bd8:	693a      	ldr	r2, [r7, #16]
 8043bda:	440a      	add	r2, r1
 8043bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8043be4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8043be6:	683b      	ldr	r3, [r7, #0]
 8043be8:	781b      	ldrb	r3, [r3, #0]
 8043bea:	015a      	lsls	r2, r3, #5
 8043bec:	693b      	ldr	r3, [r7, #16]
 8043bee:	4413      	add	r3, r2
 8043bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043bf4:	681b      	ldr	r3, [r3, #0]
 8043bf6:	683a      	ldr	r2, [r7, #0]
 8043bf8:	7812      	ldrb	r2, [r2, #0]
 8043bfa:	0151      	lsls	r1, r2, #5
 8043bfc:	693a      	ldr	r2, [r7, #16]
 8043bfe:	440a      	add	r2, r1
 8043c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8043c0a:	68fb      	ldr	r3, [r7, #12]
 8043c0c:	3301      	adds	r3, #1
 8043c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8043c10:	68fb      	ldr	r3, [r7, #12]
 8043c12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8043c16:	4293      	cmp	r3, r2
 8043c18:	d902      	bls.n	8043c20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8043c1a:	2301      	movs	r3, #1
 8043c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8043c1e:	e00c      	b.n	8043c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8043c20:	683b      	ldr	r3, [r7, #0]
 8043c22:	781b      	ldrb	r3, [r3, #0]
 8043c24:	015a      	lsls	r2, r3, #5
 8043c26:	693b      	ldr	r3, [r7, #16]
 8043c28:	4413      	add	r3, r2
 8043c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043c2e:	681b      	ldr	r3, [r3, #0]
 8043c30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8043c34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8043c38:	d0e7      	beq.n	8043c0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8043c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8043c3c:	4618      	mov	r0, r3
 8043c3e:	371c      	adds	r7, #28
 8043c40:	46bd      	mov	sp, r7
 8043c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c46:	4770      	bx	lr

08043c48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8043c48:	b480      	push	{r7}
 8043c4a:	b089      	sub	sp, #36	@ 0x24
 8043c4c:	af00      	add	r7, sp, #0
 8043c4e:	60f8      	str	r0, [r7, #12]
 8043c50:	60b9      	str	r1, [r7, #8]
 8043c52:	4611      	mov	r1, r2
 8043c54:	461a      	mov	r2, r3
 8043c56:	460b      	mov	r3, r1
 8043c58:	71fb      	strb	r3, [r7, #7]
 8043c5a:	4613      	mov	r3, r2
 8043c5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043c5e:	68fb      	ldr	r3, [r7, #12]
 8043c60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8043c62:	68bb      	ldr	r3, [r7, #8]
 8043c64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8043c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8043c6a:	2b00      	cmp	r3, #0
 8043c6c:	d123      	bne.n	8043cb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8043c6e:	88bb      	ldrh	r3, [r7, #4]
 8043c70:	3303      	adds	r3, #3
 8043c72:	089b      	lsrs	r3, r3, #2
 8043c74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8043c76:	2300      	movs	r3, #0
 8043c78:	61bb      	str	r3, [r7, #24]
 8043c7a:	e018      	b.n	8043cae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8043c7c:	79fb      	ldrb	r3, [r7, #7]
 8043c7e:	031a      	lsls	r2, r3, #12
 8043c80:	697b      	ldr	r3, [r7, #20]
 8043c82:	4413      	add	r3, r2
 8043c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8043c88:	461a      	mov	r2, r3
 8043c8a:	69fb      	ldr	r3, [r7, #28]
 8043c8c:	681b      	ldr	r3, [r3, #0]
 8043c8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8043c90:	69fb      	ldr	r3, [r7, #28]
 8043c92:	3301      	adds	r3, #1
 8043c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8043c96:	69fb      	ldr	r3, [r7, #28]
 8043c98:	3301      	adds	r3, #1
 8043c9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8043c9c:	69fb      	ldr	r3, [r7, #28]
 8043c9e:	3301      	adds	r3, #1
 8043ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8043ca2:	69fb      	ldr	r3, [r7, #28]
 8043ca4:	3301      	adds	r3, #1
 8043ca6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8043ca8:	69bb      	ldr	r3, [r7, #24]
 8043caa:	3301      	adds	r3, #1
 8043cac:	61bb      	str	r3, [r7, #24]
 8043cae:	69ba      	ldr	r2, [r7, #24]
 8043cb0:	693b      	ldr	r3, [r7, #16]
 8043cb2:	429a      	cmp	r2, r3
 8043cb4:	d3e2      	bcc.n	8043c7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8043cb6:	2300      	movs	r3, #0
}
 8043cb8:	4618      	mov	r0, r3
 8043cba:	3724      	adds	r7, #36	@ 0x24
 8043cbc:	46bd      	mov	sp, r7
 8043cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043cc2:	4770      	bx	lr

08043cc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8043cc4:	b480      	push	{r7}
 8043cc6:	b08b      	sub	sp, #44	@ 0x2c
 8043cc8:	af00      	add	r7, sp, #0
 8043cca:	60f8      	str	r0, [r7, #12]
 8043ccc:	60b9      	str	r1, [r7, #8]
 8043cce:	4613      	mov	r3, r2
 8043cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043cd2:	68fb      	ldr	r3, [r7, #12]
 8043cd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8043cd6:	68bb      	ldr	r3, [r7, #8]
 8043cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8043cda:	88fb      	ldrh	r3, [r7, #6]
 8043cdc:	089b      	lsrs	r3, r3, #2
 8043cde:	b29b      	uxth	r3, r3
 8043ce0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8043ce2:	88fb      	ldrh	r3, [r7, #6]
 8043ce4:	f003 0303 	and.w	r3, r3, #3
 8043ce8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8043cea:	2300      	movs	r3, #0
 8043cec:	623b      	str	r3, [r7, #32]
 8043cee:	e014      	b.n	8043d1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8043cf0:	69bb      	ldr	r3, [r7, #24]
 8043cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8043cf6:	681a      	ldr	r2, [r3, #0]
 8043cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043cfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8043cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043cfe:	3301      	adds	r3, #1
 8043d00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8043d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043d04:	3301      	adds	r3, #1
 8043d06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8043d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043d0a:	3301      	adds	r3, #1
 8043d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8043d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043d10:	3301      	adds	r3, #1
 8043d12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8043d14:	6a3b      	ldr	r3, [r7, #32]
 8043d16:	3301      	adds	r3, #1
 8043d18:	623b      	str	r3, [r7, #32]
 8043d1a:	6a3a      	ldr	r2, [r7, #32]
 8043d1c:	697b      	ldr	r3, [r7, #20]
 8043d1e:	429a      	cmp	r2, r3
 8043d20:	d3e6      	bcc.n	8043cf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8043d22:	8bfb      	ldrh	r3, [r7, #30]
 8043d24:	2b00      	cmp	r3, #0
 8043d26:	d01e      	beq.n	8043d66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8043d28:	2300      	movs	r3, #0
 8043d2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8043d2c:	69bb      	ldr	r3, [r7, #24]
 8043d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8043d32:	461a      	mov	r2, r3
 8043d34:	f107 0310 	add.w	r3, r7, #16
 8043d38:	6812      	ldr	r2, [r2, #0]
 8043d3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8043d3c:	693a      	ldr	r2, [r7, #16]
 8043d3e:	6a3b      	ldr	r3, [r7, #32]
 8043d40:	b2db      	uxtb	r3, r3
 8043d42:	00db      	lsls	r3, r3, #3
 8043d44:	fa22 f303 	lsr.w	r3, r2, r3
 8043d48:	b2da      	uxtb	r2, r3
 8043d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043d4c:	701a      	strb	r2, [r3, #0]
      i++;
 8043d4e:	6a3b      	ldr	r3, [r7, #32]
 8043d50:	3301      	adds	r3, #1
 8043d52:	623b      	str	r3, [r7, #32]
      pDest++;
 8043d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043d56:	3301      	adds	r3, #1
 8043d58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8043d5a:	8bfb      	ldrh	r3, [r7, #30]
 8043d5c:	3b01      	subs	r3, #1
 8043d5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8043d60:	8bfb      	ldrh	r3, [r7, #30]
 8043d62:	2b00      	cmp	r3, #0
 8043d64:	d1ea      	bne.n	8043d3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8043d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8043d68:	4618      	mov	r0, r3
 8043d6a:	372c      	adds	r7, #44	@ 0x2c
 8043d6c:	46bd      	mov	sp, r7
 8043d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d72:	4770      	bx	lr

08043d74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043d74:	b480      	push	{r7}
 8043d76:	b085      	sub	sp, #20
 8043d78:	af00      	add	r7, sp, #0
 8043d7a:	6078      	str	r0, [r7, #4]
 8043d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043d7e:	687b      	ldr	r3, [r7, #4]
 8043d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8043d82:	683b      	ldr	r3, [r7, #0]
 8043d84:	781b      	ldrb	r3, [r3, #0]
 8043d86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8043d88:	683b      	ldr	r3, [r7, #0]
 8043d8a:	785b      	ldrb	r3, [r3, #1]
 8043d8c:	2b01      	cmp	r3, #1
 8043d8e:	d12c      	bne.n	8043dea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8043d90:	68bb      	ldr	r3, [r7, #8]
 8043d92:	015a      	lsls	r2, r3, #5
 8043d94:	68fb      	ldr	r3, [r7, #12]
 8043d96:	4413      	add	r3, r2
 8043d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043d9c:	681b      	ldr	r3, [r3, #0]
 8043d9e:	2b00      	cmp	r3, #0
 8043da0:	db12      	blt.n	8043dc8 <USB_EPSetStall+0x54>
 8043da2:	68bb      	ldr	r3, [r7, #8]
 8043da4:	2b00      	cmp	r3, #0
 8043da6:	d00f      	beq.n	8043dc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8043da8:	68bb      	ldr	r3, [r7, #8]
 8043daa:	015a      	lsls	r2, r3, #5
 8043dac:	68fb      	ldr	r3, [r7, #12]
 8043dae:	4413      	add	r3, r2
 8043db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043db4:	681b      	ldr	r3, [r3, #0]
 8043db6:	68ba      	ldr	r2, [r7, #8]
 8043db8:	0151      	lsls	r1, r2, #5
 8043dba:	68fa      	ldr	r2, [r7, #12]
 8043dbc:	440a      	add	r2, r1
 8043dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043dc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8043dc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8043dc8:	68bb      	ldr	r3, [r7, #8]
 8043dca:	015a      	lsls	r2, r3, #5
 8043dcc:	68fb      	ldr	r3, [r7, #12]
 8043dce:	4413      	add	r3, r2
 8043dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043dd4:	681b      	ldr	r3, [r3, #0]
 8043dd6:	68ba      	ldr	r2, [r7, #8]
 8043dd8:	0151      	lsls	r1, r2, #5
 8043dda:	68fa      	ldr	r2, [r7, #12]
 8043ddc:	440a      	add	r2, r1
 8043dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043de2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8043de6:	6013      	str	r3, [r2, #0]
 8043de8:	e02b      	b.n	8043e42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8043dea:	68bb      	ldr	r3, [r7, #8]
 8043dec:	015a      	lsls	r2, r3, #5
 8043dee:	68fb      	ldr	r3, [r7, #12]
 8043df0:	4413      	add	r3, r2
 8043df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043df6:	681b      	ldr	r3, [r3, #0]
 8043df8:	2b00      	cmp	r3, #0
 8043dfa:	db12      	blt.n	8043e22 <USB_EPSetStall+0xae>
 8043dfc:	68bb      	ldr	r3, [r7, #8]
 8043dfe:	2b00      	cmp	r3, #0
 8043e00:	d00f      	beq.n	8043e22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8043e02:	68bb      	ldr	r3, [r7, #8]
 8043e04:	015a      	lsls	r2, r3, #5
 8043e06:	68fb      	ldr	r3, [r7, #12]
 8043e08:	4413      	add	r3, r2
 8043e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043e0e:	681b      	ldr	r3, [r3, #0]
 8043e10:	68ba      	ldr	r2, [r7, #8]
 8043e12:	0151      	lsls	r1, r2, #5
 8043e14:	68fa      	ldr	r2, [r7, #12]
 8043e16:	440a      	add	r2, r1
 8043e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043e1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8043e20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8043e22:	68bb      	ldr	r3, [r7, #8]
 8043e24:	015a      	lsls	r2, r3, #5
 8043e26:	68fb      	ldr	r3, [r7, #12]
 8043e28:	4413      	add	r3, r2
 8043e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043e2e:	681b      	ldr	r3, [r3, #0]
 8043e30:	68ba      	ldr	r2, [r7, #8]
 8043e32:	0151      	lsls	r1, r2, #5
 8043e34:	68fa      	ldr	r2, [r7, #12]
 8043e36:	440a      	add	r2, r1
 8043e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043e3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8043e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8043e42:	2300      	movs	r3, #0
}
 8043e44:	4618      	mov	r0, r3
 8043e46:	3714      	adds	r7, #20
 8043e48:	46bd      	mov	sp, r7
 8043e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e4e:	4770      	bx	lr

08043e50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043e50:	b480      	push	{r7}
 8043e52:	b085      	sub	sp, #20
 8043e54:	af00      	add	r7, sp, #0
 8043e56:	6078      	str	r0, [r7, #4]
 8043e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043e5a:	687b      	ldr	r3, [r7, #4]
 8043e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8043e5e:	683b      	ldr	r3, [r7, #0]
 8043e60:	781b      	ldrb	r3, [r3, #0]
 8043e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8043e64:	683b      	ldr	r3, [r7, #0]
 8043e66:	785b      	ldrb	r3, [r3, #1]
 8043e68:	2b01      	cmp	r3, #1
 8043e6a:	d128      	bne.n	8043ebe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8043e6c:	68bb      	ldr	r3, [r7, #8]
 8043e6e:	015a      	lsls	r2, r3, #5
 8043e70:	68fb      	ldr	r3, [r7, #12]
 8043e72:	4413      	add	r3, r2
 8043e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043e78:	681b      	ldr	r3, [r3, #0]
 8043e7a:	68ba      	ldr	r2, [r7, #8]
 8043e7c:	0151      	lsls	r1, r2, #5
 8043e7e:	68fa      	ldr	r2, [r7, #12]
 8043e80:	440a      	add	r2, r1
 8043e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043e86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8043e8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8043e8c:	683b      	ldr	r3, [r7, #0]
 8043e8e:	791b      	ldrb	r3, [r3, #4]
 8043e90:	2b03      	cmp	r3, #3
 8043e92:	d003      	beq.n	8043e9c <USB_EPClearStall+0x4c>
 8043e94:	683b      	ldr	r3, [r7, #0]
 8043e96:	791b      	ldrb	r3, [r3, #4]
 8043e98:	2b02      	cmp	r3, #2
 8043e9a:	d138      	bne.n	8043f0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8043e9c:	68bb      	ldr	r3, [r7, #8]
 8043e9e:	015a      	lsls	r2, r3, #5
 8043ea0:	68fb      	ldr	r3, [r7, #12]
 8043ea2:	4413      	add	r3, r2
 8043ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8043ea8:	681b      	ldr	r3, [r3, #0]
 8043eaa:	68ba      	ldr	r2, [r7, #8]
 8043eac:	0151      	lsls	r1, r2, #5
 8043eae:	68fa      	ldr	r2, [r7, #12]
 8043eb0:	440a      	add	r2, r1
 8043eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8043eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8043eba:	6013      	str	r3, [r2, #0]
 8043ebc:	e027      	b.n	8043f0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8043ebe:	68bb      	ldr	r3, [r7, #8]
 8043ec0:	015a      	lsls	r2, r3, #5
 8043ec2:	68fb      	ldr	r3, [r7, #12]
 8043ec4:	4413      	add	r3, r2
 8043ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043eca:	681b      	ldr	r3, [r3, #0]
 8043ecc:	68ba      	ldr	r2, [r7, #8]
 8043ece:	0151      	lsls	r1, r2, #5
 8043ed0:	68fa      	ldr	r2, [r7, #12]
 8043ed2:	440a      	add	r2, r1
 8043ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043ed8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8043edc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8043ede:	683b      	ldr	r3, [r7, #0]
 8043ee0:	791b      	ldrb	r3, [r3, #4]
 8043ee2:	2b03      	cmp	r3, #3
 8043ee4:	d003      	beq.n	8043eee <USB_EPClearStall+0x9e>
 8043ee6:	683b      	ldr	r3, [r7, #0]
 8043ee8:	791b      	ldrb	r3, [r3, #4]
 8043eea:	2b02      	cmp	r3, #2
 8043eec:	d10f      	bne.n	8043f0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8043eee:	68bb      	ldr	r3, [r7, #8]
 8043ef0:	015a      	lsls	r2, r3, #5
 8043ef2:	68fb      	ldr	r3, [r7, #12]
 8043ef4:	4413      	add	r3, r2
 8043ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8043efa:	681b      	ldr	r3, [r3, #0]
 8043efc:	68ba      	ldr	r2, [r7, #8]
 8043efe:	0151      	lsls	r1, r2, #5
 8043f00:	68fa      	ldr	r2, [r7, #12]
 8043f02:	440a      	add	r2, r1
 8043f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8043f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8043f0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8043f0e:	2300      	movs	r3, #0
}
 8043f10:	4618      	mov	r0, r3
 8043f12:	3714      	adds	r7, #20
 8043f14:	46bd      	mov	sp, r7
 8043f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f1a:	4770      	bx	lr

08043f1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8043f1c:	b480      	push	{r7}
 8043f1e:	b085      	sub	sp, #20
 8043f20:	af00      	add	r7, sp, #0
 8043f22:	6078      	str	r0, [r7, #4]
 8043f24:	460b      	mov	r3, r1
 8043f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043f28:	687b      	ldr	r3, [r7, #4]
 8043f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8043f2c:	68fb      	ldr	r3, [r7, #12]
 8043f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043f32:	681b      	ldr	r3, [r3, #0]
 8043f34:	68fa      	ldr	r2, [r7, #12]
 8043f36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8043f3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8043f3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8043f40:	68fb      	ldr	r3, [r7, #12]
 8043f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043f46:	681a      	ldr	r2, [r3, #0]
 8043f48:	78fb      	ldrb	r3, [r7, #3]
 8043f4a:	011b      	lsls	r3, r3, #4
 8043f4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8043f50:	68f9      	ldr	r1, [r7, #12]
 8043f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8043f56:	4313      	orrs	r3, r2
 8043f58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8043f5a:	2300      	movs	r3, #0
}
 8043f5c:	4618      	mov	r0, r3
 8043f5e:	3714      	adds	r7, #20
 8043f60:	46bd      	mov	sp, r7
 8043f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f66:	4770      	bx	lr

08043f68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8043f68:	b480      	push	{r7}
 8043f6a:	b085      	sub	sp, #20
 8043f6c:	af00      	add	r7, sp, #0
 8043f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043f70:	687b      	ldr	r3, [r7, #4]
 8043f72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8043f74:	68fb      	ldr	r3, [r7, #12]
 8043f76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8043f7a:	681b      	ldr	r3, [r3, #0]
 8043f7c:	68fa      	ldr	r2, [r7, #12]
 8043f7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8043f82:	f023 0303 	bic.w	r3, r3, #3
 8043f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8043f88:	68fb      	ldr	r3, [r7, #12]
 8043f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043f8e:	685b      	ldr	r3, [r3, #4]
 8043f90:	68fa      	ldr	r2, [r7, #12]
 8043f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8043f96:	f023 0302 	bic.w	r3, r3, #2
 8043f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8043f9c:	2300      	movs	r3, #0
}
 8043f9e:	4618      	mov	r0, r3
 8043fa0:	3714      	adds	r7, #20
 8043fa2:	46bd      	mov	sp, r7
 8043fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fa8:	4770      	bx	lr

08043faa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8043faa:	b480      	push	{r7}
 8043fac:	b085      	sub	sp, #20
 8043fae:	af00      	add	r7, sp, #0
 8043fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043fb2:	687b      	ldr	r3, [r7, #4]
 8043fb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8043fb6:	68fb      	ldr	r3, [r7, #12]
 8043fb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8043fbc:	681b      	ldr	r3, [r3, #0]
 8043fbe:	68fa      	ldr	r2, [r7, #12]
 8043fc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8043fc4:	f023 0303 	bic.w	r3, r3, #3
 8043fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8043fca:	68fb      	ldr	r3, [r7, #12]
 8043fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8043fd0:	685b      	ldr	r3, [r3, #4]
 8043fd2:	68fa      	ldr	r2, [r7, #12]
 8043fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8043fd8:	f043 0302 	orr.w	r3, r3, #2
 8043fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8043fde:	2300      	movs	r3, #0
}
 8043fe0:	4618      	mov	r0, r3
 8043fe2:	3714      	adds	r7, #20
 8043fe4:	46bd      	mov	sp, r7
 8043fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fea:	4770      	bx	lr

08043fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8043fec:	b480      	push	{r7}
 8043fee:	b085      	sub	sp, #20
 8043ff0:	af00      	add	r7, sp, #0
 8043ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8043ff4:	687b      	ldr	r3, [r7, #4]
 8043ff6:	695b      	ldr	r3, [r3, #20]
 8043ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8043ffa:	687b      	ldr	r3, [r7, #4]
 8043ffc:	699b      	ldr	r3, [r3, #24]
 8043ffe:	68fa      	ldr	r2, [r7, #12]
 8044000:	4013      	ands	r3, r2
 8044002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8044004:	68fb      	ldr	r3, [r7, #12]
}
 8044006:	4618      	mov	r0, r3
 8044008:	3714      	adds	r7, #20
 804400a:	46bd      	mov	sp, r7
 804400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044010:	4770      	bx	lr

08044012 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8044012:	b480      	push	{r7}
 8044014:	b085      	sub	sp, #20
 8044016:	af00      	add	r7, sp, #0
 8044018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804401a:	687b      	ldr	r3, [r7, #4]
 804401c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 804401e:	68fb      	ldr	r3, [r7, #12]
 8044020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8044024:	699b      	ldr	r3, [r3, #24]
 8044026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8044028:	68fb      	ldr	r3, [r7, #12]
 804402a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804402e:	69db      	ldr	r3, [r3, #28]
 8044030:	68ba      	ldr	r2, [r7, #8]
 8044032:	4013      	ands	r3, r2
 8044034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8044036:	68bb      	ldr	r3, [r7, #8]
 8044038:	0c1b      	lsrs	r3, r3, #16
}
 804403a:	4618      	mov	r0, r3
 804403c:	3714      	adds	r7, #20
 804403e:	46bd      	mov	sp, r7
 8044040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044044:	4770      	bx	lr

08044046 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8044046:	b480      	push	{r7}
 8044048:	b085      	sub	sp, #20
 804404a:	af00      	add	r7, sp, #0
 804404c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804404e:	687b      	ldr	r3, [r7, #4]
 8044050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8044052:	68fb      	ldr	r3, [r7, #12]
 8044054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8044058:	699b      	ldr	r3, [r3, #24]
 804405a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 804405c:	68fb      	ldr	r3, [r7, #12]
 804405e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8044062:	69db      	ldr	r3, [r3, #28]
 8044064:	68ba      	ldr	r2, [r7, #8]
 8044066:	4013      	ands	r3, r2
 8044068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 804406a:	68bb      	ldr	r3, [r7, #8]
 804406c:	b29b      	uxth	r3, r3
}
 804406e:	4618      	mov	r0, r3
 8044070:	3714      	adds	r7, #20
 8044072:	46bd      	mov	sp, r7
 8044074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044078:	4770      	bx	lr

0804407a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804407a:	b480      	push	{r7}
 804407c:	b085      	sub	sp, #20
 804407e:	af00      	add	r7, sp, #0
 8044080:	6078      	str	r0, [r7, #4]
 8044082:	460b      	mov	r3, r1
 8044084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044086:	687b      	ldr	r3, [r7, #4]
 8044088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 804408a:	78fb      	ldrb	r3, [r7, #3]
 804408c:	015a      	lsls	r2, r3, #5
 804408e:	68fb      	ldr	r3, [r7, #12]
 8044090:	4413      	add	r3, r2
 8044092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8044096:	689b      	ldr	r3, [r3, #8]
 8044098:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 804409a:	68fb      	ldr	r3, [r7, #12]
 804409c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80440a0:	695b      	ldr	r3, [r3, #20]
 80440a2:	68ba      	ldr	r2, [r7, #8]
 80440a4:	4013      	ands	r3, r2
 80440a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80440a8:	68bb      	ldr	r3, [r7, #8]
}
 80440aa:	4618      	mov	r0, r3
 80440ac:	3714      	adds	r7, #20
 80440ae:	46bd      	mov	sp, r7
 80440b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440b4:	4770      	bx	lr

080440b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80440b6:	b480      	push	{r7}
 80440b8:	b087      	sub	sp, #28
 80440ba:	af00      	add	r7, sp, #0
 80440bc:	6078      	str	r0, [r7, #4]
 80440be:	460b      	mov	r3, r1
 80440c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80440c2:	687b      	ldr	r3, [r7, #4]
 80440c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80440c6:	697b      	ldr	r3, [r7, #20]
 80440c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80440cc:	691b      	ldr	r3, [r3, #16]
 80440ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80440d0:	697b      	ldr	r3, [r7, #20]
 80440d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80440d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80440d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80440da:	78fb      	ldrb	r3, [r7, #3]
 80440dc:	f003 030f 	and.w	r3, r3, #15
 80440e0:	68fa      	ldr	r2, [r7, #12]
 80440e2:	fa22 f303 	lsr.w	r3, r2, r3
 80440e6:	01db      	lsls	r3, r3, #7
 80440e8:	b2db      	uxtb	r3, r3
 80440ea:	693a      	ldr	r2, [r7, #16]
 80440ec:	4313      	orrs	r3, r2
 80440ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80440f0:	78fb      	ldrb	r3, [r7, #3]
 80440f2:	015a      	lsls	r2, r3, #5
 80440f4:	697b      	ldr	r3, [r7, #20]
 80440f6:	4413      	add	r3, r2
 80440f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80440fc:	689b      	ldr	r3, [r3, #8]
 80440fe:	693a      	ldr	r2, [r7, #16]
 8044100:	4013      	ands	r3, r2
 8044102:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8044104:	68bb      	ldr	r3, [r7, #8]
}
 8044106:	4618      	mov	r0, r3
 8044108:	371c      	adds	r7, #28
 804410a:	46bd      	mov	sp, r7
 804410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044110:	4770      	bx	lr

08044112 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8044112:	b480      	push	{r7}
 8044114:	b083      	sub	sp, #12
 8044116:	af00      	add	r7, sp, #0
 8044118:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804411a:	687b      	ldr	r3, [r7, #4]
 804411c:	695b      	ldr	r3, [r3, #20]
 804411e:	f003 0301 	and.w	r3, r3, #1
}
 8044122:	4618      	mov	r0, r3
 8044124:	370c      	adds	r7, #12
 8044126:	46bd      	mov	sp, r7
 8044128:	f85d 7b04 	ldr.w	r7, [sp], #4
 804412c:	4770      	bx	lr

0804412e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 804412e:	b480      	push	{r7}
 8044130:	b085      	sub	sp, #20
 8044132:	af00      	add	r7, sp, #0
 8044134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044136:	687b      	ldr	r3, [r7, #4]
 8044138:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 804413a:	68fb      	ldr	r3, [r7, #12]
 804413c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8044140:	681b      	ldr	r3, [r3, #0]
 8044142:	68fa      	ldr	r2, [r7, #12]
 8044144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8044148:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 804414c:	f023 0307 	bic.w	r3, r3, #7
 8044150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8044152:	68fb      	ldr	r3, [r7, #12]
 8044154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8044158:	685b      	ldr	r3, [r3, #4]
 804415a:	68fa      	ldr	r2, [r7, #12]
 804415c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8044160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8044164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8044166:	2300      	movs	r3, #0
}
 8044168:	4618      	mov	r0, r3
 804416a:	3714      	adds	r7, #20
 804416c:	46bd      	mov	sp, r7
 804416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044172:	4770      	bx	lr

08044174 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8044174:	b480      	push	{r7}
 8044176:	b087      	sub	sp, #28
 8044178:	af00      	add	r7, sp, #0
 804417a:	60f8      	str	r0, [r7, #12]
 804417c:	460b      	mov	r3, r1
 804417e:	607a      	str	r2, [r7, #4]
 8044180:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044182:	68fb      	ldr	r3, [r7, #12]
 8044184:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8044186:	68fb      	ldr	r3, [r7, #12]
 8044188:	333c      	adds	r3, #60	@ 0x3c
 804418a:	3304      	adds	r3, #4
 804418c:	681b      	ldr	r3, [r3, #0]
 804418e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8044190:	693b      	ldr	r3, [r7, #16]
 8044192:	4a26      	ldr	r2, [pc, #152]	@ (804422c <USB_EP0_OutStart+0xb8>)
 8044194:	4293      	cmp	r3, r2
 8044196:	d90a      	bls.n	80441ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8044198:	697b      	ldr	r3, [r7, #20]
 804419a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804419e:	681b      	ldr	r3, [r3, #0]
 80441a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80441a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80441a8:	d101      	bne.n	80441ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80441aa:	2300      	movs	r3, #0
 80441ac:	e037      	b.n	804421e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80441ae:	697b      	ldr	r3, [r7, #20]
 80441b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80441b4:	461a      	mov	r2, r3
 80441b6:	2300      	movs	r3, #0
 80441b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80441ba:	697b      	ldr	r3, [r7, #20]
 80441bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80441c0:	691b      	ldr	r3, [r3, #16]
 80441c2:	697a      	ldr	r2, [r7, #20]
 80441c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80441c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80441cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80441ce:	697b      	ldr	r3, [r7, #20]
 80441d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80441d4:	691b      	ldr	r3, [r3, #16]
 80441d6:	697a      	ldr	r2, [r7, #20]
 80441d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80441dc:	f043 0318 	orr.w	r3, r3, #24
 80441e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80441e2:	697b      	ldr	r3, [r7, #20]
 80441e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80441e8:	691b      	ldr	r3, [r3, #16]
 80441ea:	697a      	ldr	r2, [r7, #20]
 80441ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80441f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80441f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80441f6:	7afb      	ldrb	r3, [r7, #11]
 80441f8:	2b01      	cmp	r3, #1
 80441fa:	d10f      	bne.n	804421c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80441fc:	697b      	ldr	r3, [r7, #20]
 80441fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8044202:	461a      	mov	r2, r3
 8044204:	687b      	ldr	r3, [r7, #4]
 8044206:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8044208:	697b      	ldr	r3, [r7, #20]
 804420a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804420e:	681b      	ldr	r3, [r3, #0]
 8044210:	697a      	ldr	r2, [r7, #20]
 8044212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8044216:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 804421a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 804421c:	2300      	movs	r3, #0
}
 804421e:	4618      	mov	r0, r3
 8044220:	371c      	adds	r7, #28
 8044222:	46bd      	mov	sp, r7
 8044224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044228:	4770      	bx	lr
 804422a:	bf00      	nop
 804422c:	4f54300a 	.word	0x4f54300a

08044230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8044230:	b480      	push	{r7}
 8044232:	b085      	sub	sp, #20
 8044234:	af00      	add	r7, sp, #0
 8044236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8044238:	2300      	movs	r3, #0
 804423a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804423c:	68fb      	ldr	r3, [r7, #12]
 804423e:	3301      	adds	r3, #1
 8044240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8044242:	68fb      	ldr	r3, [r7, #12]
 8044244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8044248:	d901      	bls.n	804424e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 804424a:	2303      	movs	r3, #3
 804424c:	e01b      	b.n	8044286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804424e:	687b      	ldr	r3, [r7, #4]
 8044250:	691b      	ldr	r3, [r3, #16]
 8044252:	2b00      	cmp	r3, #0
 8044254:	daf2      	bge.n	804423c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8044256:	2300      	movs	r3, #0
 8044258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 804425a:	687b      	ldr	r3, [r7, #4]
 804425c:	691b      	ldr	r3, [r3, #16]
 804425e:	f043 0201 	orr.w	r2, r3, #1
 8044262:	687b      	ldr	r3, [r7, #4]
 8044264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8044266:	68fb      	ldr	r3, [r7, #12]
 8044268:	3301      	adds	r3, #1
 804426a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804426c:	68fb      	ldr	r3, [r7, #12]
 804426e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8044272:	d901      	bls.n	8044278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8044274:	2303      	movs	r3, #3
 8044276:	e006      	b.n	8044286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8044278:	687b      	ldr	r3, [r7, #4]
 804427a:	691b      	ldr	r3, [r3, #16]
 804427c:	f003 0301 	and.w	r3, r3, #1
 8044280:	2b01      	cmp	r3, #1
 8044282:	d0f0      	beq.n	8044266 <USB_CoreReset+0x36>

  return HAL_OK;
 8044284:	2300      	movs	r3, #0
}
 8044286:	4618      	mov	r0, r3
 8044288:	3714      	adds	r7, #20
 804428a:	46bd      	mov	sp, r7
 804428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044290:	4770      	bx	lr
	...

08044294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044294:	b580      	push	{r7, lr}
 8044296:	b084      	sub	sp, #16
 8044298:	af00      	add	r7, sp, #0
 804429a:	6078      	str	r0, [r7, #4]
 804429c:	460b      	mov	r3, r1
 804429e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80442a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80442a4:	f002 fc28 	bl	8046af8 <USBD_static_malloc>
 80442a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80442aa:	68fb      	ldr	r3, [r7, #12]
 80442ac:	2b00      	cmp	r3, #0
 80442ae:	d109      	bne.n	80442c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80442b0:	687b      	ldr	r3, [r7, #4]
 80442b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80442b6:	687b      	ldr	r3, [r7, #4]
 80442b8:	32b0      	adds	r2, #176	@ 0xb0
 80442ba:	2100      	movs	r1, #0
 80442bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80442c0:	2302      	movs	r3, #2
 80442c2:	e0d4      	b.n	804446e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80442c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80442c8:	2100      	movs	r1, #0
 80442ca:	68f8      	ldr	r0, [r7, #12]
 80442cc:	f002 fc58 	bl	8046b80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80442d0:	687b      	ldr	r3, [r7, #4]
 80442d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80442d6:	687b      	ldr	r3, [r7, #4]
 80442d8:	32b0      	adds	r2, #176	@ 0xb0
 80442da:	68f9      	ldr	r1, [r7, #12]
 80442dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80442e0:	687b      	ldr	r3, [r7, #4]
 80442e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80442e6:	687b      	ldr	r3, [r7, #4]
 80442e8:	32b0      	adds	r2, #176	@ 0xb0
 80442ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80442ee:	687b      	ldr	r3, [r7, #4]
 80442f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80442f4:	687b      	ldr	r3, [r7, #4]
 80442f6:	7c1b      	ldrb	r3, [r3, #16]
 80442f8:	2b00      	cmp	r3, #0
 80442fa:	d138      	bne.n	804436e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80442fc:	4b5e      	ldr	r3, [pc, #376]	@ (8044478 <USBD_CDC_Init+0x1e4>)
 80442fe:	7819      	ldrb	r1, [r3, #0]
 8044300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8044304:	2202      	movs	r2, #2
 8044306:	6878      	ldr	r0, [r7, #4]
 8044308:	f002 fad3 	bl	80468b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 804430c:	4b5a      	ldr	r3, [pc, #360]	@ (8044478 <USBD_CDC_Init+0x1e4>)
 804430e:	781b      	ldrb	r3, [r3, #0]
 8044310:	f003 020f 	and.w	r2, r3, #15
 8044314:	6879      	ldr	r1, [r7, #4]
 8044316:	4613      	mov	r3, r2
 8044318:	009b      	lsls	r3, r3, #2
 804431a:	4413      	add	r3, r2
 804431c:	009b      	lsls	r3, r3, #2
 804431e:	440b      	add	r3, r1
 8044320:	3324      	adds	r3, #36	@ 0x24
 8044322:	2201      	movs	r2, #1
 8044324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8044326:	4b55      	ldr	r3, [pc, #340]	@ (804447c <USBD_CDC_Init+0x1e8>)
 8044328:	7819      	ldrb	r1, [r3, #0]
 804432a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 804432e:	2202      	movs	r2, #2
 8044330:	6878      	ldr	r0, [r7, #4]
 8044332:	f002 fabe 	bl	80468b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8044336:	4b51      	ldr	r3, [pc, #324]	@ (804447c <USBD_CDC_Init+0x1e8>)
 8044338:	781b      	ldrb	r3, [r3, #0]
 804433a:	f003 020f 	and.w	r2, r3, #15
 804433e:	6879      	ldr	r1, [r7, #4]
 8044340:	4613      	mov	r3, r2
 8044342:	009b      	lsls	r3, r3, #2
 8044344:	4413      	add	r3, r2
 8044346:	009b      	lsls	r3, r3, #2
 8044348:	440b      	add	r3, r1
 804434a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 804434e:	2201      	movs	r2, #1
 8044350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8044352:	4b4b      	ldr	r3, [pc, #300]	@ (8044480 <USBD_CDC_Init+0x1ec>)
 8044354:	781b      	ldrb	r3, [r3, #0]
 8044356:	f003 020f 	and.w	r2, r3, #15
 804435a:	6879      	ldr	r1, [r7, #4]
 804435c:	4613      	mov	r3, r2
 804435e:	009b      	lsls	r3, r3, #2
 8044360:	4413      	add	r3, r2
 8044362:	009b      	lsls	r3, r3, #2
 8044364:	440b      	add	r3, r1
 8044366:	3326      	adds	r3, #38	@ 0x26
 8044368:	2210      	movs	r2, #16
 804436a:	801a      	strh	r2, [r3, #0]
 804436c:	e035      	b.n	80443da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 804436e:	4b42      	ldr	r3, [pc, #264]	@ (8044478 <USBD_CDC_Init+0x1e4>)
 8044370:	7819      	ldrb	r1, [r3, #0]
 8044372:	2340      	movs	r3, #64	@ 0x40
 8044374:	2202      	movs	r2, #2
 8044376:	6878      	ldr	r0, [r7, #4]
 8044378:	f002 fa9b 	bl	80468b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 804437c:	4b3e      	ldr	r3, [pc, #248]	@ (8044478 <USBD_CDC_Init+0x1e4>)
 804437e:	781b      	ldrb	r3, [r3, #0]
 8044380:	f003 020f 	and.w	r2, r3, #15
 8044384:	6879      	ldr	r1, [r7, #4]
 8044386:	4613      	mov	r3, r2
 8044388:	009b      	lsls	r3, r3, #2
 804438a:	4413      	add	r3, r2
 804438c:	009b      	lsls	r3, r3, #2
 804438e:	440b      	add	r3, r1
 8044390:	3324      	adds	r3, #36	@ 0x24
 8044392:	2201      	movs	r2, #1
 8044394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8044396:	4b39      	ldr	r3, [pc, #228]	@ (804447c <USBD_CDC_Init+0x1e8>)
 8044398:	7819      	ldrb	r1, [r3, #0]
 804439a:	2340      	movs	r3, #64	@ 0x40
 804439c:	2202      	movs	r2, #2
 804439e:	6878      	ldr	r0, [r7, #4]
 80443a0:	f002 fa87 	bl	80468b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80443a4:	4b35      	ldr	r3, [pc, #212]	@ (804447c <USBD_CDC_Init+0x1e8>)
 80443a6:	781b      	ldrb	r3, [r3, #0]
 80443a8:	f003 020f 	and.w	r2, r3, #15
 80443ac:	6879      	ldr	r1, [r7, #4]
 80443ae:	4613      	mov	r3, r2
 80443b0:	009b      	lsls	r3, r3, #2
 80443b2:	4413      	add	r3, r2
 80443b4:	009b      	lsls	r3, r3, #2
 80443b6:	440b      	add	r3, r1
 80443b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80443bc:	2201      	movs	r2, #1
 80443be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80443c0:	4b2f      	ldr	r3, [pc, #188]	@ (8044480 <USBD_CDC_Init+0x1ec>)
 80443c2:	781b      	ldrb	r3, [r3, #0]
 80443c4:	f003 020f 	and.w	r2, r3, #15
 80443c8:	6879      	ldr	r1, [r7, #4]
 80443ca:	4613      	mov	r3, r2
 80443cc:	009b      	lsls	r3, r3, #2
 80443ce:	4413      	add	r3, r2
 80443d0:	009b      	lsls	r3, r3, #2
 80443d2:	440b      	add	r3, r1
 80443d4:	3326      	adds	r3, #38	@ 0x26
 80443d6:	2210      	movs	r2, #16
 80443d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80443da:	4b29      	ldr	r3, [pc, #164]	@ (8044480 <USBD_CDC_Init+0x1ec>)
 80443dc:	7819      	ldrb	r1, [r3, #0]
 80443de:	2308      	movs	r3, #8
 80443e0:	2203      	movs	r2, #3
 80443e2:	6878      	ldr	r0, [r7, #4]
 80443e4:	f002 fa65 	bl	80468b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80443e8:	4b25      	ldr	r3, [pc, #148]	@ (8044480 <USBD_CDC_Init+0x1ec>)
 80443ea:	781b      	ldrb	r3, [r3, #0]
 80443ec:	f003 020f 	and.w	r2, r3, #15
 80443f0:	6879      	ldr	r1, [r7, #4]
 80443f2:	4613      	mov	r3, r2
 80443f4:	009b      	lsls	r3, r3, #2
 80443f6:	4413      	add	r3, r2
 80443f8:	009b      	lsls	r3, r3, #2
 80443fa:	440b      	add	r3, r1
 80443fc:	3324      	adds	r3, #36	@ 0x24
 80443fe:	2201      	movs	r2, #1
 8044400:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8044402:	68fb      	ldr	r3, [r7, #12]
 8044404:	2200      	movs	r2, #0
 8044406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 804440a:	687b      	ldr	r3, [r7, #4]
 804440c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8044410:	687a      	ldr	r2, [r7, #4]
 8044412:	33b0      	adds	r3, #176	@ 0xb0
 8044414:	009b      	lsls	r3, r3, #2
 8044416:	4413      	add	r3, r2
 8044418:	685b      	ldr	r3, [r3, #4]
 804441a:	681b      	ldr	r3, [r3, #0]
 804441c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 804441e:	68fb      	ldr	r3, [r7, #12]
 8044420:	2200      	movs	r2, #0
 8044422:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8044426:	68fb      	ldr	r3, [r7, #12]
 8044428:	2200      	movs	r2, #0
 804442a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 804442e:	68fb      	ldr	r3, [r7, #12]
 8044430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8044434:	2b00      	cmp	r3, #0
 8044436:	d101      	bne.n	804443c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8044438:	2302      	movs	r3, #2
 804443a:	e018      	b.n	804446e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 804443c:	687b      	ldr	r3, [r7, #4]
 804443e:	7c1b      	ldrb	r3, [r3, #16]
 8044440:	2b00      	cmp	r3, #0
 8044442:	d10a      	bne.n	804445a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8044444:	4b0d      	ldr	r3, [pc, #52]	@ (804447c <USBD_CDC_Init+0x1e8>)
 8044446:	7819      	ldrb	r1, [r3, #0]
 8044448:	68fb      	ldr	r3, [r7, #12]
 804444a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 804444e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8044452:	6878      	ldr	r0, [r7, #4]
 8044454:	f002 fb1c 	bl	8046a90 <USBD_LL_PrepareReceive>
 8044458:	e008      	b.n	804446c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 804445a:	4b08      	ldr	r3, [pc, #32]	@ (804447c <USBD_CDC_Init+0x1e8>)
 804445c:	7819      	ldrb	r1, [r3, #0]
 804445e:	68fb      	ldr	r3, [r7, #12]
 8044460:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8044464:	2340      	movs	r3, #64	@ 0x40
 8044466:	6878      	ldr	r0, [r7, #4]
 8044468:	f002 fb12 	bl	8046a90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 804446c:	2300      	movs	r3, #0
}
 804446e:	4618      	mov	r0, r3
 8044470:	3710      	adds	r7, #16
 8044472:	46bd      	mov	sp, r7
 8044474:	bd80      	pop	{r7, pc}
 8044476:	bf00      	nop
 8044478:	20000093 	.word	0x20000093
 804447c:	20000094 	.word	0x20000094
 8044480:	20000095 	.word	0x20000095

08044484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044484:	b580      	push	{r7, lr}
 8044486:	b082      	sub	sp, #8
 8044488:	af00      	add	r7, sp, #0
 804448a:	6078      	str	r0, [r7, #4]
 804448c:	460b      	mov	r3, r1
 804448e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8044490:	4b3a      	ldr	r3, [pc, #232]	@ (804457c <USBD_CDC_DeInit+0xf8>)
 8044492:	781b      	ldrb	r3, [r3, #0]
 8044494:	4619      	mov	r1, r3
 8044496:	6878      	ldr	r0, [r7, #4]
 8044498:	f002 fa31 	bl	80468fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 804449c:	4b37      	ldr	r3, [pc, #220]	@ (804457c <USBD_CDC_DeInit+0xf8>)
 804449e:	781b      	ldrb	r3, [r3, #0]
 80444a0:	f003 020f 	and.w	r2, r3, #15
 80444a4:	6879      	ldr	r1, [r7, #4]
 80444a6:	4613      	mov	r3, r2
 80444a8:	009b      	lsls	r3, r3, #2
 80444aa:	4413      	add	r3, r2
 80444ac:	009b      	lsls	r3, r3, #2
 80444ae:	440b      	add	r3, r1
 80444b0:	3324      	adds	r3, #36	@ 0x24
 80444b2:	2200      	movs	r2, #0
 80444b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80444b6:	4b32      	ldr	r3, [pc, #200]	@ (8044580 <USBD_CDC_DeInit+0xfc>)
 80444b8:	781b      	ldrb	r3, [r3, #0]
 80444ba:	4619      	mov	r1, r3
 80444bc:	6878      	ldr	r0, [r7, #4]
 80444be:	f002 fa1e 	bl	80468fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80444c2:	4b2f      	ldr	r3, [pc, #188]	@ (8044580 <USBD_CDC_DeInit+0xfc>)
 80444c4:	781b      	ldrb	r3, [r3, #0]
 80444c6:	f003 020f 	and.w	r2, r3, #15
 80444ca:	6879      	ldr	r1, [r7, #4]
 80444cc:	4613      	mov	r3, r2
 80444ce:	009b      	lsls	r3, r3, #2
 80444d0:	4413      	add	r3, r2
 80444d2:	009b      	lsls	r3, r3, #2
 80444d4:	440b      	add	r3, r1
 80444d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80444da:	2200      	movs	r2, #0
 80444dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80444de:	4b29      	ldr	r3, [pc, #164]	@ (8044584 <USBD_CDC_DeInit+0x100>)
 80444e0:	781b      	ldrb	r3, [r3, #0]
 80444e2:	4619      	mov	r1, r3
 80444e4:	6878      	ldr	r0, [r7, #4]
 80444e6:	f002 fa0a 	bl	80468fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80444ea:	4b26      	ldr	r3, [pc, #152]	@ (8044584 <USBD_CDC_DeInit+0x100>)
 80444ec:	781b      	ldrb	r3, [r3, #0]
 80444ee:	f003 020f 	and.w	r2, r3, #15
 80444f2:	6879      	ldr	r1, [r7, #4]
 80444f4:	4613      	mov	r3, r2
 80444f6:	009b      	lsls	r3, r3, #2
 80444f8:	4413      	add	r3, r2
 80444fa:	009b      	lsls	r3, r3, #2
 80444fc:	440b      	add	r3, r1
 80444fe:	3324      	adds	r3, #36	@ 0x24
 8044500:	2200      	movs	r2, #0
 8044502:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8044504:	4b1f      	ldr	r3, [pc, #124]	@ (8044584 <USBD_CDC_DeInit+0x100>)
 8044506:	781b      	ldrb	r3, [r3, #0]
 8044508:	f003 020f 	and.w	r2, r3, #15
 804450c:	6879      	ldr	r1, [r7, #4]
 804450e:	4613      	mov	r3, r2
 8044510:	009b      	lsls	r3, r3, #2
 8044512:	4413      	add	r3, r2
 8044514:	009b      	lsls	r3, r3, #2
 8044516:	440b      	add	r3, r1
 8044518:	3326      	adds	r3, #38	@ 0x26
 804451a:	2200      	movs	r2, #0
 804451c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 804451e:	687b      	ldr	r3, [r7, #4]
 8044520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044524:	687b      	ldr	r3, [r7, #4]
 8044526:	32b0      	adds	r2, #176	@ 0xb0
 8044528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804452c:	2b00      	cmp	r3, #0
 804452e:	d01f      	beq.n	8044570 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8044530:	687b      	ldr	r3, [r7, #4]
 8044532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8044536:	687a      	ldr	r2, [r7, #4]
 8044538:	33b0      	adds	r3, #176	@ 0xb0
 804453a:	009b      	lsls	r3, r3, #2
 804453c:	4413      	add	r3, r2
 804453e:	685b      	ldr	r3, [r3, #4]
 8044540:	685b      	ldr	r3, [r3, #4]
 8044542:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8044544:	687b      	ldr	r3, [r7, #4]
 8044546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804454a:	687b      	ldr	r3, [r7, #4]
 804454c:	32b0      	adds	r2, #176	@ 0xb0
 804454e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044552:	4618      	mov	r0, r3
 8044554:	f002 fade 	bl	8046b14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8044558:	687b      	ldr	r3, [r7, #4]
 804455a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804455e:	687b      	ldr	r3, [r7, #4]
 8044560:	32b0      	adds	r2, #176	@ 0xb0
 8044562:	2100      	movs	r1, #0
 8044564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8044568:	687b      	ldr	r3, [r7, #4]
 804456a:	2200      	movs	r2, #0
 804456c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8044570:	2300      	movs	r3, #0
}
 8044572:	4618      	mov	r0, r3
 8044574:	3708      	adds	r7, #8
 8044576:	46bd      	mov	sp, r7
 8044578:	bd80      	pop	{r7, pc}
 804457a:	bf00      	nop
 804457c:	20000093 	.word	0x20000093
 8044580:	20000094 	.word	0x20000094
 8044584:	20000095 	.word	0x20000095

08044588 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8044588:	b580      	push	{r7, lr}
 804458a:	b086      	sub	sp, #24
 804458c:	af00      	add	r7, sp, #0
 804458e:	6078      	str	r0, [r7, #4]
 8044590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044592:	687b      	ldr	r3, [r7, #4]
 8044594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044598:	687b      	ldr	r3, [r7, #4]
 804459a:	32b0      	adds	r2, #176	@ 0xb0
 804459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80445a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80445a2:	2300      	movs	r3, #0
 80445a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80445a6:	2300      	movs	r3, #0
 80445a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80445aa:	2300      	movs	r3, #0
 80445ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80445ae:	693b      	ldr	r3, [r7, #16]
 80445b0:	2b00      	cmp	r3, #0
 80445b2:	d101      	bne.n	80445b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80445b4:	2303      	movs	r3, #3
 80445b6:	e0bf      	b.n	8044738 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80445b8:	683b      	ldr	r3, [r7, #0]
 80445ba:	781b      	ldrb	r3, [r3, #0]
 80445bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80445c0:	2b00      	cmp	r3, #0
 80445c2:	d050      	beq.n	8044666 <USBD_CDC_Setup+0xde>
 80445c4:	2b20      	cmp	r3, #32
 80445c6:	f040 80af 	bne.w	8044728 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80445ca:	683b      	ldr	r3, [r7, #0]
 80445cc:	88db      	ldrh	r3, [r3, #6]
 80445ce:	2b00      	cmp	r3, #0
 80445d0:	d03a      	beq.n	8044648 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80445d2:	683b      	ldr	r3, [r7, #0]
 80445d4:	781b      	ldrb	r3, [r3, #0]
 80445d6:	b25b      	sxtb	r3, r3
 80445d8:	2b00      	cmp	r3, #0
 80445da:	da1b      	bge.n	8044614 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80445dc:	687b      	ldr	r3, [r7, #4]
 80445de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80445e2:	687a      	ldr	r2, [r7, #4]
 80445e4:	33b0      	adds	r3, #176	@ 0xb0
 80445e6:	009b      	lsls	r3, r3, #2
 80445e8:	4413      	add	r3, r2
 80445ea:	685b      	ldr	r3, [r3, #4]
 80445ec:	689b      	ldr	r3, [r3, #8]
 80445ee:	683a      	ldr	r2, [r7, #0]
 80445f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80445f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80445f4:	683a      	ldr	r2, [r7, #0]
 80445f6:	88d2      	ldrh	r2, [r2, #6]
 80445f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80445fa:	683b      	ldr	r3, [r7, #0]
 80445fc:	88db      	ldrh	r3, [r3, #6]
 80445fe:	2b07      	cmp	r3, #7
 8044600:	bf28      	it	cs
 8044602:	2307      	movcs	r3, #7
 8044604:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8044606:	693b      	ldr	r3, [r7, #16]
 8044608:	89fa      	ldrh	r2, [r7, #14]
 804460a:	4619      	mov	r1, r3
 804460c:	6878      	ldr	r0, [r7, #4]
 804460e:	f001 fd53 	bl	80460b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8044612:	e090      	b.n	8044736 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8044614:	683b      	ldr	r3, [r7, #0]
 8044616:	785a      	ldrb	r2, [r3, #1]
 8044618:	693b      	ldr	r3, [r7, #16]
 804461a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 804461e:	683b      	ldr	r3, [r7, #0]
 8044620:	88db      	ldrh	r3, [r3, #6]
 8044622:	2b3f      	cmp	r3, #63	@ 0x3f
 8044624:	d803      	bhi.n	804462e <USBD_CDC_Setup+0xa6>
 8044626:	683b      	ldr	r3, [r7, #0]
 8044628:	88db      	ldrh	r3, [r3, #6]
 804462a:	b2da      	uxtb	r2, r3
 804462c:	e000      	b.n	8044630 <USBD_CDC_Setup+0xa8>
 804462e:	2240      	movs	r2, #64	@ 0x40
 8044630:	693b      	ldr	r3, [r7, #16]
 8044632:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8044636:	6939      	ldr	r1, [r7, #16]
 8044638:	693b      	ldr	r3, [r7, #16]
 804463a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 804463e:	461a      	mov	r2, r3
 8044640:	6878      	ldr	r0, [r7, #4]
 8044642:	f001 fd65 	bl	8046110 <USBD_CtlPrepareRx>
      break;
 8044646:	e076      	b.n	8044736 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8044648:	687b      	ldr	r3, [r7, #4]
 804464a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804464e:	687a      	ldr	r2, [r7, #4]
 8044650:	33b0      	adds	r3, #176	@ 0xb0
 8044652:	009b      	lsls	r3, r3, #2
 8044654:	4413      	add	r3, r2
 8044656:	685b      	ldr	r3, [r3, #4]
 8044658:	689b      	ldr	r3, [r3, #8]
 804465a:	683a      	ldr	r2, [r7, #0]
 804465c:	7850      	ldrb	r0, [r2, #1]
 804465e:	2200      	movs	r2, #0
 8044660:	6839      	ldr	r1, [r7, #0]
 8044662:	4798      	blx	r3
      break;
 8044664:	e067      	b.n	8044736 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8044666:	683b      	ldr	r3, [r7, #0]
 8044668:	785b      	ldrb	r3, [r3, #1]
 804466a:	2b0b      	cmp	r3, #11
 804466c:	d851      	bhi.n	8044712 <USBD_CDC_Setup+0x18a>
 804466e:	a201      	add	r2, pc, #4	@ (adr r2, 8044674 <USBD_CDC_Setup+0xec>)
 8044670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044674:	080446a5 	.word	0x080446a5
 8044678:	08044721 	.word	0x08044721
 804467c:	08044713 	.word	0x08044713
 8044680:	08044713 	.word	0x08044713
 8044684:	08044713 	.word	0x08044713
 8044688:	08044713 	.word	0x08044713
 804468c:	08044713 	.word	0x08044713
 8044690:	08044713 	.word	0x08044713
 8044694:	08044713 	.word	0x08044713
 8044698:	08044713 	.word	0x08044713
 804469c:	080446cf 	.word	0x080446cf
 80446a0:	080446f9 	.word	0x080446f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80446a4:	687b      	ldr	r3, [r7, #4]
 80446a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80446aa:	b2db      	uxtb	r3, r3
 80446ac:	2b03      	cmp	r3, #3
 80446ae:	d107      	bne.n	80446c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80446b0:	f107 030a 	add.w	r3, r7, #10
 80446b4:	2202      	movs	r2, #2
 80446b6:	4619      	mov	r1, r3
 80446b8:	6878      	ldr	r0, [r7, #4]
 80446ba:	f001 fcfd 	bl	80460b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80446be:	e032      	b.n	8044726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80446c0:	6839      	ldr	r1, [r7, #0]
 80446c2:	6878      	ldr	r0, [r7, #4]
 80446c4:	f001 fc7b 	bl	8045fbe <USBD_CtlError>
            ret = USBD_FAIL;
 80446c8:	2303      	movs	r3, #3
 80446ca:	75fb      	strb	r3, [r7, #23]
          break;
 80446cc:	e02b      	b.n	8044726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80446ce:	687b      	ldr	r3, [r7, #4]
 80446d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80446d4:	b2db      	uxtb	r3, r3
 80446d6:	2b03      	cmp	r3, #3
 80446d8:	d107      	bne.n	80446ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80446da:	f107 030d 	add.w	r3, r7, #13
 80446de:	2201      	movs	r2, #1
 80446e0:	4619      	mov	r1, r3
 80446e2:	6878      	ldr	r0, [r7, #4]
 80446e4:	f001 fce8 	bl	80460b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80446e8:	e01d      	b.n	8044726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80446ea:	6839      	ldr	r1, [r7, #0]
 80446ec:	6878      	ldr	r0, [r7, #4]
 80446ee:	f001 fc66 	bl	8045fbe <USBD_CtlError>
            ret = USBD_FAIL;
 80446f2:	2303      	movs	r3, #3
 80446f4:	75fb      	strb	r3, [r7, #23]
          break;
 80446f6:	e016      	b.n	8044726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80446f8:	687b      	ldr	r3, [r7, #4]
 80446fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80446fe:	b2db      	uxtb	r3, r3
 8044700:	2b03      	cmp	r3, #3
 8044702:	d00f      	beq.n	8044724 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8044704:	6839      	ldr	r1, [r7, #0]
 8044706:	6878      	ldr	r0, [r7, #4]
 8044708:	f001 fc59 	bl	8045fbe <USBD_CtlError>
            ret = USBD_FAIL;
 804470c:	2303      	movs	r3, #3
 804470e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8044710:	e008      	b.n	8044724 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8044712:	6839      	ldr	r1, [r7, #0]
 8044714:	6878      	ldr	r0, [r7, #4]
 8044716:	f001 fc52 	bl	8045fbe <USBD_CtlError>
          ret = USBD_FAIL;
 804471a:	2303      	movs	r3, #3
 804471c:	75fb      	strb	r3, [r7, #23]
          break;
 804471e:	e002      	b.n	8044726 <USBD_CDC_Setup+0x19e>
          break;
 8044720:	bf00      	nop
 8044722:	e008      	b.n	8044736 <USBD_CDC_Setup+0x1ae>
          break;
 8044724:	bf00      	nop
      }
      break;
 8044726:	e006      	b.n	8044736 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8044728:	6839      	ldr	r1, [r7, #0]
 804472a:	6878      	ldr	r0, [r7, #4]
 804472c:	f001 fc47 	bl	8045fbe <USBD_CtlError>
      ret = USBD_FAIL;
 8044730:	2303      	movs	r3, #3
 8044732:	75fb      	strb	r3, [r7, #23]
      break;
 8044734:	bf00      	nop
  }

  return (uint8_t)ret;
 8044736:	7dfb      	ldrb	r3, [r7, #23]
}
 8044738:	4618      	mov	r0, r3
 804473a:	3718      	adds	r7, #24
 804473c:	46bd      	mov	sp, r7
 804473e:	bd80      	pop	{r7, pc}

08044740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8044740:	b580      	push	{r7, lr}
 8044742:	b084      	sub	sp, #16
 8044744:	af00      	add	r7, sp, #0
 8044746:	6078      	str	r0, [r7, #4]
 8044748:	460b      	mov	r3, r1
 804474a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 804474c:	687b      	ldr	r3, [r7, #4]
 804474e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8044752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8044754:	687b      	ldr	r3, [r7, #4]
 8044756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804475a:	687b      	ldr	r3, [r7, #4]
 804475c:	32b0      	adds	r2, #176	@ 0xb0
 804475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044762:	2b00      	cmp	r3, #0
 8044764:	d101      	bne.n	804476a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8044766:	2303      	movs	r3, #3
 8044768:	e065      	b.n	8044836 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804476a:	687b      	ldr	r3, [r7, #4]
 804476c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044770:	687b      	ldr	r3, [r7, #4]
 8044772:	32b0      	adds	r2, #176	@ 0xb0
 8044774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044778:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 804477a:	78fb      	ldrb	r3, [r7, #3]
 804477c:	f003 020f 	and.w	r2, r3, #15
 8044780:	6879      	ldr	r1, [r7, #4]
 8044782:	4613      	mov	r3, r2
 8044784:	009b      	lsls	r3, r3, #2
 8044786:	4413      	add	r3, r2
 8044788:	009b      	lsls	r3, r3, #2
 804478a:	440b      	add	r3, r1
 804478c:	3318      	adds	r3, #24
 804478e:	681b      	ldr	r3, [r3, #0]
 8044790:	2b00      	cmp	r3, #0
 8044792:	d02f      	beq.n	80447f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8044794:	78fb      	ldrb	r3, [r7, #3]
 8044796:	f003 020f 	and.w	r2, r3, #15
 804479a:	6879      	ldr	r1, [r7, #4]
 804479c:	4613      	mov	r3, r2
 804479e:	009b      	lsls	r3, r3, #2
 80447a0:	4413      	add	r3, r2
 80447a2:	009b      	lsls	r3, r3, #2
 80447a4:	440b      	add	r3, r1
 80447a6:	3318      	adds	r3, #24
 80447a8:	681a      	ldr	r2, [r3, #0]
 80447aa:	78fb      	ldrb	r3, [r7, #3]
 80447ac:	f003 010f 	and.w	r1, r3, #15
 80447b0:	68f8      	ldr	r0, [r7, #12]
 80447b2:	460b      	mov	r3, r1
 80447b4:	00db      	lsls	r3, r3, #3
 80447b6:	440b      	add	r3, r1
 80447b8:	009b      	lsls	r3, r3, #2
 80447ba:	4403      	add	r3, r0
 80447bc:	331c      	adds	r3, #28
 80447be:	681b      	ldr	r3, [r3, #0]
 80447c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80447c4:	fb01 f303 	mul.w	r3, r1, r3
 80447c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80447ca:	2b00      	cmp	r3, #0
 80447cc:	d112      	bne.n	80447f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80447ce:	78fb      	ldrb	r3, [r7, #3]
 80447d0:	f003 020f 	and.w	r2, r3, #15
 80447d4:	6879      	ldr	r1, [r7, #4]
 80447d6:	4613      	mov	r3, r2
 80447d8:	009b      	lsls	r3, r3, #2
 80447da:	4413      	add	r3, r2
 80447dc:	009b      	lsls	r3, r3, #2
 80447de:	440b      	add	r3, r1
 80447e0:	3318      	adds	r3, #24
 80447e2:	2200      	movs	r2, #0
 80447e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80447e6:	78f9      	ldrb	r1, [r7, #3]
 80447e8:	2300      	movs	r3, #0
 80447ea:	2200      	movs	r2, #0
 80447ec:	6878      	ldr	r0, [r7, #4]
 80447ee:	f002 f92e 	bl	8046a4e <USBD_LL_Transmit>
 80447f2:	e01f      	b.n	8044834 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80447f4:	68bb      	ldr	r3, [r7, #8]
 80447f6:	2200      	movs	r2, #0
 80447f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80447fc:	687b      	ldr	r3, [r7, #4]
 80447fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8044802:	687a      	ldr	r2, [r7, #4]
 8044804:	33b0      	adds	r3, #176	@ 0xb0
 8044806:	009b      	lsls	r3, r3, #2
 8044808:	4413      	add	r3, r2
 804480a:	685b      	ldr	r3, [r3, #4]
 804480c:	691b      	ldr	r3, [r3, #16]
 804480e:	2b00      	cmp	r3, #0
 8044810:	d010      	beq.n	8044834 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8044812:	687b      	ldr	r3, [r7, #4]
 8044814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8044818:	687a      	ldr	r2, [r7, #4]
 804481a:	33b0      	adds	r3, #176	@ 0xb0
 804481c:	009b      	lsls	r3, r3, #2
 804481e:	4413      	add	r3, r2
 8044820:	685b      	ldr	r3, [r3, #4]
 8044822:	691b      	ldr	r3, [r3, #16]
 8044824:	68ba      	ldr	r2, [r7, #8]
 8044826:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 804482a:	68ba      	ldr	r2, [r7, #8]
 804482c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8044830:	78fa      	ldrb	r2, [r7, #3]
 8044832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8044834:	2300      	movs	r3, #0
}
 8044836:	4618      	mov	r0, r3
 8044838:	3710      	adds	r7, #16
 804483a:	46bd      	mov	sp, r7
 804483c:	bd80      	pop	{r7, pc}

0804483e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 804483e:	b580      	push	{r7, lr}
 8044840:	b084      	sub	sp, #16
 8044842:	af00      	add	r7, sp, #0
 8044844:	6078      	str	r0, [r7, #4]
 8044846:	460b      	mov	r3, r1
 8044848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804484a:	687b      	ldr	r3, [r7, #4]
 804484c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044850:	687b      	ldr	r3, [r7, #4]
 8044852:	32b0      	adds	r2, #176	@ 0xb0
 8044854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044858:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 804485a:	687b      	ldr	r3, [r7, #4]
 804485c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044860:	687b      	ldr	r3, [r7, #4]
 8044862:	32b0      	adds	r2, #176	@ 0xb0
 8044864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044868:	2b00      	cmp	r3, #0
 804486a:	d101      	bne.n	8044870 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 804486c:	2303      	movs	r3, #3
 804486e:	e01a      	b.n	80448a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8044870:	78fb      	ldrb	r3, [r7, #3]
 8044872:	4619      	mov	r1, r3
 8044874:	6878      	ldr	r0, [r7, #4]
 8044876:	f002 f92c 	bl	8046ad2 <USBD_LL_GetRxDataSize>
 804487a:	4602      	mov	r2, r0
 804487c:	68fb      	ldr	r3, [r7, #12]
 804487e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8044882:	687b      	ldr	r3, [r7, #4]
 8044884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8044888:	687a      	ldr	r2, [r7, #4]
 804488a:	33b0      	adds	r3, #176	@ 0xb0
 804488c:	009b      	lsls	r3, r3, #2
 804488e:	4413      	add	r3, r2
 8044890:	685b      	ldr	r3, [r3, #4]
 8044892:	68db      	ldr	r3, [r3, #12]
 8044894:	68fa      	ldr	r2, [r7, #12]
 8044896:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 804489a:	68fa      	ldr	r2, [r7, #12]
 804489c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80448a0:	4611      	mov	r1, r2
 80448a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80448a4:	2300      	movs	r3, #0
}
 80448a6:	4618      	mov	r0, r3
 80448a8:	3710      	adds	r7, #16
 80448aa:	46bd      	mov	sp, r7
 80448ac:	bd80      	pop	{r7, pc}

080448ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80448ae:	b580      	push	{r7, lr}
 80448b0:	b084      	sub	sp, #16
 80448b2:	af00      	add	r7, sp, #0
 80448b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80448b6:	687b      	ldr	r3, [r7, #4]
 80448b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80448bc:	687b      	ldr	r3, [r7, #4]
 80448be:	32b0      	adds	r2, #176	@ 0xb0
 80448c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80448c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80448c6:	68fb      	ldr	r3, [r7, #12]
 80448c8:	2b00      	cmp	r3, #0
 80448ca:	d101      	bne.n	80448d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80448cc:	2303      	movs	r3, #3
 80448ce:	e024      	b.n	804491a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80448d0:	687b      	ldr	r3, [r7, #4]
 80448d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80448d6:	687a      	ldr	r2, [r7, #4]
 80448d8:	33b0      	adds	r3, #176	@ 0xb0
 80448da:	009b      	lsls	r3, r3, #2
 80448dc:	4413      	add	r3, r2
 80448de:	685b      	ldr	r3, [r3, #4]
 80448e0:	2b00      	cmp	r3, #0
 80448e2:	d019      	beq.n	8044918 <USBD_CDC_EP0_RxReady+0x6a>
 80448e4:	68fb      	ldr	r3, [r7, #12]
 80448e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80448ea:	2bff      	cmp	r3, #255	@ 0xff
 80448ec:	d014      	beq.n	8044918 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80448ee:	687b      	ldr	r3, [r7, #4]
 80448f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80448f4:	687a      	ldr	r2, [r7, #4]
 80448f6:	33b0      	adds	r3, #176	@ 0xb0
 80448f8:	009b      	lsls	r3, r3, #2
 80448fa:	4413      	add	r3, r2
 80448fc:	685b      	ldr	r3, [r3, #4]
 80448fe:	689b      	ldr	r3, [r3, #8]
 8044900:	68fa      	ldr	r2, [r7, #12]
 8044902:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8044906:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8044908:	68fa      	ldr	r2, [r7, #12]
 804490a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 804490e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8044910:	68fb      	ldr	r3, [r7, #12]
 8044912:	22ff      	movs	r2, #255	@ 0xff
 8044914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8044918:	2300      	movs	r3, #0
}
 804491a:	4618      	mov	r0, r3
 804491c:	3710      	adds	r7, #16
 804491e:	46bd      	mov	sp, r7
 8044920:	bd80      	pop	{r7, pc}
	...

08044924 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8044924:	b580      	push	{r7, lr}
 8044926:	b086      	sub	sp, #24
 8044928:	af00      	add	r7, sp, #0
 804492a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 804492c:	2182      	movs	r1, #130	@ 0x82
 804492e:	4818      	ldr	r0, [pc, #96]	@ (8044990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8044930:	f000 fd0f 	bl	8045352 <USBD_GetEpDesc>
 8044934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8044936:	2101      	movs	r1, #1
 8044938:	4815      	ldr	r0, [pc, #84]	@ (8044990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 804493a:	f000 fd0a 	bl	8045352 <USBD_GetEpDesc>
 804493e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8044940:	2181      	movs	r1, #129	@ 0x81
 8044942:	4813      	ldr	r0, [pc, #76]	@ (8044990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8044944:	f000 fd05 	bl	8045352 <USBD_GetEpDesc>
 8044948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 804494a:	697b      	ldr	r3, [r7, #20]
 804494c:	2b00      	cmp	r3, #0
 804494e:	d002      	beq.n	8044956 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8044950:	697b      	ldr	r3, [r7, #20]
 8044952:	2210      	movs	r2, #16
 8044954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8044956:	693b      	ldr	r3, [r7, #16]
 8044958:	2b00      	cmp	r3, #0
 804495a:	d006      	beq.n	804496a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 804495c:	693b      	ldr	r3, [r7, #16]
 804495e:	2200      	movs	r2, #0
 8044960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8044964:	711a      	strb	r2, [r3, #4]
 8044966:	2200      	movs	r2, #0
 8044968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 804496a:	68fb      	ldr	r3, [r7, #12]
 804496c:	2b00      	cmp	r3, #0
 804496e:	d006      	beq.n	804497e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8044970:	68fb      	ldr	r3, [r7, #12]
 8044972:	2200      	movs	r2, #0
 8044974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8044978:	711a      	strb	r2, [r3, #4]
 804497a:	2200      	movs	r2, #0
 804497c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 804497e:	687b      	ldr	r3, [r7, #4]
 8044980:	2243      	movs	r2, #67	@ 0x43
 8044982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8044984:	4b02      	ldr	r3, [pc, #8]	@ (8044990 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8044986:	4618      	mov	r0, r3
 8044988:	3718      	adds	r7, #24
 804498a:	46bd      	mov	sp, r7
 804498c:	bd80      	pop	{r7, pc}
 804498e:	bf00      	nop
 8044990:	20000050 	.word	0x20000050

08044994 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8044994:	b580      	push	{r7, lr}
 8044996:	b086      	sub	sp, #24
 8044998:	af00      	add	r7, sp, #0
 804499a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 804499c:	2182      	movs	r1, #130	@ 0x82
 804499e:	4818      	ldr	r0, [pc, #96]	@ (8044a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80449a0:	f000 fcd7 	bl	8045352 <USBD_GetEpDesc>
 80449a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80449a6:	2101      	movs	r1, #1
 80449a8:	4815      	ldr	r0, [pc, #84]	@ (8044a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80449aa:	f000 fcd2 	bl	8045352 <USBD_GetEpDesc>
 80449ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80449b0:	2181      	movs	r1, #129	@ 0x81
 80449b2:	4813      	ldr	r0, [pc, #76]	@ (8044a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80449b4:	f000 fccd 	bl	8045352 <USBD_GetEpDesc>
 80449b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80449ba:	697b      	ldr	r3, [r7, #20]
 80449bc:	2b00      	cmp	r3, #0
 80449be:	d002      	beq.n	80449c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80449c0:	697b      	ldr	r3, [r7, #20]
 80449c2:	2210      	movs	r2, #16
 80449c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80449c6:	693b      	ldr	r3, [r7, #16]
 80449c8:	2b00      	cmp	r3, #0
 80449ca:	d006      	beq.n	80449da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80449cc:	693b      	ldr	r3, [r7, #16]
 80449ce:	2200      	movs	r2, #0
 80449d0:	711a      	strb	r2, [r3, #4]
 80449d2:	2200      	movs	r2, #0
 80449d4:	f042 0202 	orr.w	r2, r2, #2
 80449d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80449da:	68fb      	ldr	r3, [r7, #12]
 80449dc:	2b00      	cmp	r3, #0
 80449de:	d006      	beq.n	80449ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80449e0:	68fb      	ldr	r3, [r7, #12]
 80449e2:	2200      	movs	r2, #0
 80449e4:	711a      	strb	r2, [r3, #4]
 80449e6:	2200      	movs	r2, #0
 80449e8:	f042 0202 	orr.w	r2, r2, #2
 80449ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80449ee:	687b      	ldr	r3, [r7, #4]
 80449f0:	2243      	movs	r2, #67	@ 0x43
 80449f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80449f4:	4b02      	ldr	r3, [pc, #8]	@ (8044a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80449f6:	4618      	mov	r0, r3
 80449f8:	3718      	adds	r7, #24
 80449fa:	46bd      	mov	sp, r7
 80449fc:	bd80      	pop	{r7, pc}
 80449fe:	bf00      	nop
 8044a00:	20000050 	.word	0x20000050

08044a04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8044a04:	b580      	push	{r7, lr}
 8044a06:	b086      	sub	sp, #24
 8044a08:	af00      	add	r7, sp, #0
 8044a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8044a0c:	2182      	movs	r1, #130	@ 0x82
 8044a0e:	4818      	ldr	r0, [pc, #96]	@ (8044a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8044a10:	f000 fc9f 	bl	8045352 <USBD_GetEpDesc>
 8044a14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8044a16:	2101      	movs	r1, #1
 8044a18:	4815      	ldr	r0, [pc, #84]	@ (8044a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8044a1a:	f000 fc9a 	bl	8045352 <USBD_GetEpDesc>
 8044a1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8044a20:	2181      	movs	r1, #129	@ 0x81
 8044a22:	4813      	ldr	r0, [pc, #76]	@ (8044a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8044a24:	f000 fc95 	bl	8045352 <USBD_GetEpDesc>
 8044a28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8044a2a:	697b      	ldr	r3, [r7, #20]
 8044a2c:	2b00      	cmp	r3, #0
 8044a2e:	d002      	beq.n	8044a36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8044a30:	697b      	ldr	r3, [r7, #20]
 8044a32:	2210      	movs	r2, #16
 8044a34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8044a36:	693b      	ldr	r3, [r7, #16]
 8044a38:	2b00      	cmp	r3, #0
 8044a3a:	d006      	beq.n	8044a4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8044a3c:	693b      	ldr	r3, [r7, #16]
 8044a3e:	2200      	movs	r2, #0
 8044a40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8044a44:	711a      	strb	r2, [r3, #4]
 8044a46:	2200      	movs	r2, #0
 8044a48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8044a4a:	68fb      	ldr	r3, [r7, #12]
 8044a4c:	2b00      	cmp	r3, #0
 8044a4e:	d006      	beq.n	8044a5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8044a50:	68fb      	ldr	r3, [r7, #12]
 8044a52:	2200      	movs	r2, #0
 8044a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8044a58:	711a      	strb	r2, [r3, #4]
 8044a5a:	2200      	movs	r2, #0
 8044a5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8044a5e:	687b      	ldr	r3, [r7, #4]
 8044a60:	2243      	movs	r2, #67	@ 0x43
 8044a62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8044a64:	4b02      	ldr	r3, [pc, #8]	@ (8044a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8044a66:	4618      	mov	r0, r3
 8044a68:	3718      	adds	r7, #24
 8044a6a:	46bd      	mov	sp, r7
 8044a6c:	bd80      	pop	{r7, pc}
 8044a6e:	bf00      	nop
 8044a70:	20000050 	.word	0x20000050

08044a74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8044a74:	b480      	push	{r7}
 8044a76:	b083      	sub	sp, #12
 8044a78:	af00      	add	r7, sp, #0
 8044a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8044a7c:	687b      	ldr	r3, [r7, #4]
 8044a7e:	220a      	movs	r2, #10
 8044a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8044a82:	4b03      	ldr	r3, [pc, #12]	@ (8044a90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8044a84:	4618      	mov	r0, r3
 8044a86:	370c      	adds	r7, #12
 8044a88:	46bd      	mov	sp, r7
 8044a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a8e:	4770      	bx	lr
 8044a90:	2000000c 	.word	0x2000000c

08044a94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8044a94:	b480      	push	{r7}
 8044a96:	b083      	sub	sp, #12
 8044a98:	af00      	add	r7, sp, #0
 8044a9a:	6078      	str	r0, [r7, #4]
 8044a9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8044a9e:	683b      	ldr	r3, [r7, #0]
 8044aa0:	2b00      	cmp	r3, #0
 8044aa2:	d101      	bne.n	8044aa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8044aa4:	2303      	movs	r3, #3
 8044aa6:	e009      	b.n	8044abc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8044aa8:	687b      	ldr	r3, [r7, #4]
 8044aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8044aae:	687a      	ldr	r2, [r7, #4]
 8044ab0:	33b0      	adds	r3, #176	@ 0xb0
 8044ab2:	009b      	lsls	r3, r3, #2
 8044ab4:	4413      	add	r3, r2
 8044ab6:	683a      	ldr	r2, [r7, #0]
 8044ab8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8044aba:	2300      	movs	r3, #0
}
 8044abc:	4618      	mov	r0, r3
 8044abe:	370c      	adds	r7, #12
 8044ac0:	46bd      	mov	sp, r7
 8044ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ac6:	4770      	bx	lr

08044ac8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8044ac8:	b480      	push	{r7}
 8044aca:	b087      	sub	sp, #28
 8044acc:	af00      	add	r7, sp, #0
 8044ace:	60f8      	str	r0, [r7, #12]
 8044ad0:	60b9      	str	r1, [r7, #8]
 8044ad2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044ad4:	68fb      	ldr	r3, [r7, #12]
 8044ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044ada:	68fb      	ldr	r3, [r7, #12]
 8044adc:	32b0      	adds	r2, #176	@ 0xb0
 8044ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044ae2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8044ae4:	697b      	ldr	r3, [r7, #20]
 8044ae6:	2b00      	cmp	r3, #0
 8044ae8:	d101      	bne.n	8044aee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8044aea:	2303      	movs	r3, #3
 8044aec:	e008      	b.n	8044b00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8044aee:	697b      	ldr	r3, [r7, #20]
 8044af0:	68ba      	ldr	r2, [r7, #8]
 8044af2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8044af6:	697b      	ldr	r3, [r7, #20]
 8044af8:	687a      	ldr	r2, [r7, #4]
 8044afa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8044afe:	2300      	movs	r3, #0
}
 8044b00:	4618      	mov	r0, r3
 8044b02:	371c      	adds	r7, #28
 8044b04:	46bd      	mov	sp, r7
 8044b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b0a:	4770      	bx	lr

08044b0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8044b0c:	b480      	push	{r7}
 8044b0e:	b085      	sub	sp, #20
 8044b10:	af00      	add	r7, sp, #0
 8044b12:	6078      	str	r0, [r7, #4]
 8044b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044b16:	687b      	ldr	r3, [r7, #4]
 8044b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044b1c:	687b      	ldr	r3, [r7, #4]
 8044b1e:	32b0      	adds	r2, #176	@ 0xb0
 8044b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044b24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8044b26:	68fb      	ldr	r3, [r7, #12]
 8044b28:	2b00      	cmp	r3, #0
 8044b2a:	d101      	bne.n	8044b30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8044b2c:	2303      	movs	r3, #3
 8044b2e:	e004      	b.n	8044b3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8044b30:	68fb      	ldr	r3, [r7, #12]
 8044b32:	683a      	ldr	r2, [r7, #0]
 8044b34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8044b38:	2300      	movs	r3, #0
}
 8044b3a:	4618      	mov	r0, r3
 8044b3c:	3714      	adds	r7, #20
 8044b3e:	46bd      	mov	sp, r7
 8044b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b44:	4770      	bx	lr
	...

08044b48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8044b48:	b580      	push	{r7, lr}
 8044b4a:	b084      	sub	sp, #16
 8044b4c:	af00      	add	r7, sp, #0
 8044b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044b50:	687b      	ldr	r3, [r7, #4]
 8044b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044b56:	687b      	ldr	r3, [r7, #4]
 8044b58:	32b0      	adds	r2, #176	@ 0xb0
 8044b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044b5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8044b60:	687b      	ldr	r3, [r7, #4]
 8044b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044b66:	687b      	ldr	r3, [r7, #4]
 8044b68:	32b0      	adds	r2, #176	@ 0xb0
 8044b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044b6e:	2b00      	cmp	r3, #0
 8044b70:	d101      	bne.n	8044b76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8044b72:	2303      	movs	r3, #3
 8044b74:	e018      	b.n	8044ba8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8044b76:	687b      	ldr	r3, [r7, #4]
 8044b78:	7c1b      	ldrb	r3, [r3, #16]
 8044b7a:	2b00      	cmp	r3, #0
 8044b7c:	d10a      	bne.n	8044b94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8044b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8044bb0 <USBD_CDC_ReceivePacket+0x68>)
 8044b80:	7819      	ldrb	r1, [r3, #0]
 8044b82:	68fb      	ldr	r3, [r7, #12]
 8044b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8044b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8044b8c:	6878      	ldr	r0, [r7, #4]
 8044b8e:	f001 ff7f 	bl	8046a90 <USBD_LL_PrepareReceive>
 8044b92:	e008      	b.n	8044ba6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8044b94:	4b06      	ldr	r3, [pc, #24]	@ (8044bb0 <USBD_CDC_ReceivePacket+0x68>)
 8044b96:	7819      	ldrb	r1, [r3, #0]
 8044b98:	68fb      	ldr	r3, [r7, #12]
 8044b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8044b9e:	2340      	movs	r3, #64	@ 0x40
 8044ba0:	6878      	ldr	r0, [r7, #4]
 8044ba2:	f001 ff75 	bl	8046a90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8044ba6:	2300      	movs	r3, #0
}
 8044ba8:	4618      	mov	r0, r3
 8044baa:	3710      	adds	r7, #16
 8044bac:	46bd      	mov	sp, r7
 8044bae:	bd80      	pop	{r7, pc}
 8044bb0:	20000094 	.word	0x20000094

08044bb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8044bb4:	b580      	push	{r7, lr}
 8044bb6:	b086      	sub	sp, #24
 8044bb8:	af00      	add	r7, sp, #0
 8044bba:	60f8      	str	r0, [r7, #12]
 8044bbc:	60b9      	str	r1, [r7, #8]
 8044bbe:	4613      	mov	r3, r2
 8044bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8044bc2:	68fb      	ldr	r3, [r7, #12]
 8044bc4:	2b00      	cmp	r3, #0
 8044bc6:	d101      	bne.n	8044bcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8044bc8:	2303      	movs	r3, #3
 8044bca:	e01f      	b.n	8044c0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8044bcc:	68fb      	ldr	r3, [r7, #12]
 8044bce:	2200      	movs	r2, #0
 8044bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8044bd4:	68fb      	ldr	r3, [r7, #12]
 8044bd6:	2200      	movs	r2, #0
 8044bd8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8044bdc:	68fb      	ldr	r3, [r7, #12]
 8044bde:	2200      	movs	r2, #0
 8044be0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8044be4:	68bb      	ldr	r3, [r7, #8]
 8044be6:	2b00      	cmp	r3, #0
 8044be8:	d003      	beq.n	8044bf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8044bea:	68fb      	ldr	r3, [r7, #12]
 8044bec:	68ba      	ldr	r2, [r7, #8]
 8044bee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8044bf2:	68fb      	ldr	r3, [r7, #12]
 8044bf4:	2201      	movs	r2, #1
 8044bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8044bfa:	68fb      	ldr	r3, [r7, #12]
 8044bfc:	79fa      	ldrb	r2, [r7, #7]
 8044bfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8044c00:	68f8      	ldr	r0, [r7, #12]
 8044c02:	f001 fdef 	bl	80467e4 <USBD_LL_Init>
 8044c06:	4603      	mov	r3, r0
 8044c08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8044c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8044c0c:	4618      	mov	r0, r3
 8044c0e:	3718      	adds	r7, #24
 8044c10:	46bd      	mov	sp, r7
 8044c12:	bd80      	pop	{r7, pc}

08044c14 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8044c14:	b580      	push	{r7, lr}
 8044c16:	b084      	sub	sp, #16
 8044c18:	af00      	add	r7, sp, #0
 8044c1a:	6078      	str	r0, [r7, #4]
 8044c1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8044c1e:	2300      	movs	r3, #0
 8044c20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8044c22:	683b      	ldr	r3, [r7, #0]
 8044c24:	2b00      	cmp	r3, #0
 8044c26:	d101      	bne.n	8044c2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8044c28:	2303      	movs	r3, #3
 8044c2a:	e025      	b.n	8044c78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8044c2c:	687b      	ldr	r3, [r7, #4]
 8044c2e:	683a      	ldr	r2, [r7, #0]
 8044c30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8044c34:	687b      	ldr	r3, [r7, #4]
 8044c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044c3a:	687b      	ldr	r3, [r7, #4]
 8044c3c:	32ae      	adds	r2, #174	@ 0xae
 8044c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044c44:	2b00      	cmp	r3, #0
 8044c46:	d00f      	beq.n	8044c68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8044c48:	687b      	ldr	r3, [r7, #4]
 8044c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8044c4e:	687b      	ldr	r3, [r7, #4]
 8044c50:	32ae      	adds	r2, #174	@ 0xae
 8044c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044c58:	f107 020e 	add.w	r2, r7, #14
 8044c5c:	4610      	mov	r0, r2
 8044c5e:	4798      	blx	r3
 8044c60:	4602      	mov	r2, r0
 8044c62:	687b      	ldr	r3, [r7, #4]
 8044c64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8044c68:	687b      	ldr	r3, [r7, #4]
 8044c6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8044c6e:	1c5a      	adds	r2, r3, #1
 8044c70:	687b      	ldr	r3, [r7, #4]
 8044c72:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8044c76:	2300      	movs	r3, #0
}
 8044c78:	4618      	mov	r0, r3
 8044c7a:	3710      	adds	r7, #16
 8044c7c:	46bd      	mov	sp, r7
 8044c7e:	bd80      	pop	{r7, pc}

08044c80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8044c80:	b580      	push	{r7, lr}
 8044c82:	b082      	sub	sp, #8
 8044c84:	af00      	add	r7, sp, #0
 8044c86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8044c88:	6878      	ldr	r0, [r7, #4]
 8044c8a:	f001 fdf7 	bl	804687c <USBD_LL_Start>
 8044c8e:	4603      	mov	r3, r0
}
 8044c90:	4618      	mov	r0, r3
 8044c92:	3708      	adds	r7, #8
 8044c94:	46bd      	mov	sp, r7
 8044c96:	bd80      	pop	{r7, pc}

08044c98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8044c98:	b480      	push	{r7}
 8044c9a:	b083      	sub	sp, #12
 8044c9c:	af00      	add	r7, sp, #0
 8044c9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8044ca0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8044ca2:	4618      	mov	r0, r3
 8044ca4:	370c      	adds	r7, #12
 8044ca6:	46bd      	mov	sp, r7
 8044ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044cac:	4770      	bx	lr

08044cae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044cae:	b580      	push	{r7, lr}
 8044cb0:	b084      	sub	sp, #16
 8044cb2:	af00      	add	r7, sp, #0
 8044cb4:	6078      	str	r0, [r7, #4]
 8044cb6:	460b      	mov	r3, r1
 8044cb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8044cba:	2300      	movs	r3, #0
 8044cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8044cbe:	687b      	ldr	r3, [r7, #4]
 8044cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8044cc4:	2b00      	cmp	r3, #0
 8044cc6:	d009      	beq.n	8044cdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8044cc8:	687b      	ldr	r3, [r7, #4]
 8044cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8044cce:	681b      	ldr	r3, [r3, #0]
 8044cd0:	78fa      	ldrb	r2, [r7, #3]
 8044cd2:	4611      	mov	r1, r2
 8044cd4:	6878      	ldr	r0, [r7, #4]
 8044cd6:	4798      	blx	r3
 8044cd8:	4603      	mov	r3, r0
 8044cda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8044cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8044cde:	4618      	mov	r0, r3
 8044ce0:	3710      	adds	r7, #16
 8044ce2:	46bd      	mov	sp, r7
 8044ce4:	bd80      	pop	{r7, pc}

08044ce6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044ce6:	b580      	push	{r7, lr}
 8044ce8:	b084      	sub	sp, #16
 8044cea:	af00      	add	r7, sp, #0
 8044cec:	6078      	str	r0, [r7, #4]
 8044cee:	460b      	mov	r3, r1
 8044cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8044cf2:	2300      	movs	r3, #0
 8044cf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8044cf6:	687b      	ldr	r3, [r7, #4]
 8044cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8044cfc:	685b      	ldr	r3, [r3, #4]
 8044cfe:	78fa      	ldrb	r2, [r7, #3]
 8044d00:	4611      	mov	r1, r2
 8044d02:	6878      	ldr	r0, [r7, #4]
 8044d04:	4798      	blx	r3
 8044d06:	4603      	mov	r3, r0
 8044d08:	2b00      	cmp	r3, #0
 8044d0a:	d001      	beq.n	8044d10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8044d0c:	2303      	movs	r3, #3
 8044d0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8044d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8044d12:	4618      	mov	r0, r3
 8044d14:	3710      	adds	r7, #16
 8044d16:	46bd      	mov	sp, r7
 8044d18:	bd80      	pop	{r7, pc}

08044d1a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8044d1a:	b580      	push	{r7, lr}
 8044d1c:	b084      	sub	sp, #16
 8044d1e:	af00      	add	r7, sp, #0
 8044d20:	6078      	str	r0, [r7, #4]
 8044d22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8044d24:	687b      	ldr	r3, [r7, #4]
 8044d26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8044d2a:	6839      	ldr	r1, [r7, #0]
 8044d2c:	4618      	mov	r0, r3
 8044d2e:	f001 f90c 	bl	8045f4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8044d32:	687b      	ldr	r3, [r7, #4]
 8044d34:	2201      	movs	r2, #1
 8044d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8044d3a:	687b      	ldr	r3, [r7, #4]
 8044d3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8044d40:	461a      	mov	r2, r3
 8044d42:	687b      	ldr	r3, [r7, #4]
 8044d44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8044d48:	687b      	ldr	r3, [r7, #4]
 8044d4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8044d4e:	f003 031f 	and.w	r3, r3, #31
 8044d52:	2b02      	cmp	r3, #2
 8044d54:	d01a      	beq.n	8044d8c <USBD_LL_SetupStage+0x72>
 8044d56:	2b02      	cmp	r3, #2
 8044d58:	d822      	bhi.n	8044da0 <USBD_LL_SetupStage+0x86>
 8044d5a:	2b00      	cmp	r3, #0
 8044d5c:	d002      	beq.n	8044d64 <USBD_LL_SetupStage+0x4a>
 8044d5e:	2b01      	cmp	r3, #1
 8044d60:	d00a      	beq.n	8044d78 <USBD_LL_SetupStage+0x5e>
 8044d62:	e01d      	b.n	8044da0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8044d64:	687b      	ldr	r3, [r7, #4]
 8044d66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8044d6a:	4619      	mov	r1, r3
 8044d6c:	6878      	ldr	r0, [r7, #4]
 8044d6e:	f000 fb63 	bl	8045438 <USBD_StdDevReq>
 8044d72:	4603      	mov	r3, r0
 8044d74:	73fb      	strb	r3, [r7, #15]
      break;
 8044d76:	e020      	b.n	8044dba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8044d78:	687b      	ldr	r3, [r7, #4]
 8044d7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8044d7e:	4619      	mov	r1, r3
 8044d80:	6878      	ldr	r0, [r7, #4]
 8044d82:	f000 fbcb 	bl	804551c <USBD_StdItfReq>
 8044d86:	4603      	mov	r3, r0
 8044d88:	73fb      	strb	r3, [r7, #15]
      break;
 8044d8a:	e016      	b.n	8044dba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8044d8c:	687b      	ldr	r3, [r7, #4]
 8044d8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8044d92:	4619      	mov	r1, r3
 8044d94:	6878      	ldr	r0, [r7, #4]
 8044d96:	f000 fc2d 	bl	80455f4 <USBD_StdEPReq>
 8044d9a:	4603      	mov	r3, r0
 8044d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8044d9e:	e00c      	b.n	8044dba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8044da0:	687b      	ldr	r3, [r7, #4]
 8044da2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8044da6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8044daa:	b2db      	uxtb	r3, r3
 8044dac:	4619      	mov	r1, r3
 8044dae:	6878      	ldr	r0, [r7, #4]
 8044db0:	f001 fdc4 	bl	804693c <USBD_LL_StallEP>
 8044db4:	4603      	mov	r3, r0
 8044db6:	73fb      	strb	r3, [r7, #15]
      break;
 8044db8:	bf00      	nop
  }

  return ret;
 8044dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8044dbc:	4618      	mov	r0, r3
 8044dbe:	3710      	adds	r7, #16
 8044dc0:	46bd      	mov	sp, r7
 8044dc2:	bd80      	pop	{r7, pc}

08044dc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8044dc4:	b580      	push	{r7, lr}
 8044dc6:	b086      	sub	sp, #24
 8044dc8:	af00      	add	r7, sp, #0
 8044dca:	60f8      	str	r0, [r7, #12]
 8044dcc:	460b      	mov	r3, r1
 8044dce:	607a      	str	r2, [r7, #4]
 8044dd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8044dd2:	2300      	movs	r3, #0
 8044dd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8044dd6:	7afb      	ldrb	r3, [r7, #11]
 8044dd8:	2b00      	cmp	r3, #0
 8044dda:	d16e      	bne.n	8044eba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8044ddc:	68fb      	ldr	r3, [r7, #12]
 8044dde:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8044de2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8044de4:	68fb      	ldr	r3, [r7, #12]
 8044de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8044dea:	2b03      	cmp	r3, #3
 8044dec:	f040 8098 	bne.w	8044f20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8044df0:	693b      	ldr	r3, [r7, #16]
 8044df2:	689a      	ldr	r2, [r3, #8]
 8044df4:	693b      	ldr	r3, [r7, #16]
 8044df6:	68db      	ldr	r3, [r3, #12]
 8044df8:	429a      	cmp	r2, r3
 8044dfa:	d913      	bls.n	8044e24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8044dfc:	693b      	ldr	r3, [r7, #16]
 8044dfe:	689a      	ldr	r2, [r3, #8]
 8044e00:	693b      	ldr	r3, [r7, #16]
 8044e02:	68db      	ldr	r3, [r3, #12]
 8044e04:	1ad2      	subs	r2, r2, r3
 8044e06:	693b      	ldr	r3, [r7, #16]
 8044e08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8044e0a:	693b      	ldr	r3, [r7, #16]
 8044e0c:	68da      	ldr	r2, [r3, #12]
 8044e0e:	693b      	ldr	r3, [r7, #16]
 8044e10:	689b      	ldr	r3, [r3, #8]
 8044e12:	4293      	cmp	r3, r2
 8044e14:	bf28      	it	cs
 8044e16:	4613      	movcs	r3, r2
 8044e18:	461a      	mov	r2, r3
 8044e1a:	6879      	ldr	r1, [r7, #4]
 8044e1c:	68f8      	ldr	r0, [r7, #12]
 8044e1e:	f001 f994 	bl	804614a <USBD_CtlContinueRx>
 8044e22:	e07d      	b.n	8044f20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8044e24:	68fb      	ldr	r3, [r7, #12]
 8044e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8044e2a:	f003 031f 	and.w	r3, r3, #31
 8044e2e:	2b02      	cmp	r3, #2
 8044e30:	d014      	beq.n	8044e5c <USBD_LL_DataOutStage+0x98>
 8044e32:	2b02      	cmp	r3, #2
 8044e34:	d81d      	bhi.n	8044e72 <USBD_LL_DataOutStage+0xae>
 8044e36:	2b00      	cmp	r3, #0
 8044e38:	d002      	beq.n	8044e40 <USBD_LL_DataOutStage+0x7c>
 8044e3a:	2b01      	cmp	r3, #1
 8044e3c:	d003      	beq.n	8044e46 <USBD_LL_DataOutStage+0x82>
 8044e3e:	e018      	b.n	8044e72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8044e40:	2300      	movs	r3, #0
 8044e42:	75bb      	strb	r3, [r7, #22]
            break;
 8044e44:	e018      	b.n	8044e78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8044e46:	68fb      	ldr	r3, [r7, #12]
 8044e48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8044e4c:	b2db      	uxtb	r3, r3
 8044e4e:	4619      	mov	r1, r3
 8044e50:	68f8      	ldr	r0, [r7, #12]
 8044e52:	f000 fa64 	bl	804531e <USBD_CoreFindIF>
 8044e56:	4603      	mov	r3, r0
 8044e58:	75bb      	strb	r3, [r7, #22]
            break;
 8044e5a:	e00d      	b.n	8044e78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8044e5c:	68fb      	ldr	r3, [r7, #12]
 8044e5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8044e62:	b2db      	uxtb	r3, r3
 8044e64:	4619      	mov	r1, r3
 8044e66:	68f8      	ldr	r0, [r7, #12]
 8044e68:	f000 fa66 	bl	8045338 <USBD_CoreFindEP>
 8044e6c:	4603      	mov	r3, r0
 8044e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8044e70:	e002      	b.n	8044e78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8044e72:	2300      	movs	r3, #0
 8044e74:	75bb      	strb	r3, [r7, #22]
            break;
 8044e76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8044e78:	7dbb      	ldrb	r3, [r7, #22]
 8044e7a:	2b00      	cmp	r3, #0
 8044e7c:	d119      	bne.n	8044eb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044e7e:	68fb      	ldr	r3, [r7, #12]
 8044e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8044e84:	b2db      	uxtb	r3, r3
 8044e86:	2b03      	cmp	r3, #3
 8044e88:	d113      	bne.n	8044eb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8044e8a:	7dba      	ldrb	r2, [r7, #22]
 8044e8c:	68fb      	ldr	r3, [r7, #12]
 8044e8e:	32ae      	adds	r2, #174	@ 0xae
 8044e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044e94:	691b      	ldr	r3, [r3, #16]
 8044e96:	2b00      	cmp	r3, #0
 8044e98:	d00b      	beq.n	8044eb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8044e9a:	7dba      	ldrb	r2, [r7, #22]
 8044e9c:	68fb      	ldr	r3, [r7, #12]
 8044e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8044ea2:	7dba      	ldrb	r2, [r7, #22]
 8044ea4:	68fb      	ldr	r3, [r7, #12]
 8044ea6:	32ae      	adds	r2, #174	@ 0xae
 8044ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044eac:	691b      	ldr	r3, [r3, #16]
 8044eae:	68f8      	ldr	r0, [r7, #12]
 8044eb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8044eb2:	68f8      	ldr	r0, [r7, #12]
 8044eb4:	f001 f95a 	bl	804616c <USBD_CtlSendStatus>
 8044eb8:	e032      	b.n	8044f20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8044eba:	7afb      	ldrb	r3, [r7, #11]
 8044ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8044ec0:	b2db      	uxtb	r3, r3
 8044ec2:	4619      	mov	r1, r3
 8044ec4:	68f8      	ldr	r0, [r7, #12]
 8044ec6:	f000 fa37 	bl	8045338 <USBD_CoreFindEP>
 8044eca:	4603      	mov	r3, r0
 8044ecc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8044ece:	7dbb      	ldrb	r3, [r7, #22]
 8044ed0:	2bff      	cmp	r3, #255	@ 0xff
 8044ed2:	d025      	beq.n	8044f20 <USBD_LL_DataOutStage+0x15c>
 8044ed4:	7dbb      	ldrb	r3, [r7, #22]
 8044ed6:	2b00      	cmp	r3, #0
 8044ed8:	d122      	bne.n	8044f20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044eda:	68fb      	ldr	r3, [r7, #12]
 8044edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8044ee0:	b2db      	uxtb	r3, r3
 8044ee2:	2b03      	cmp	r3, #3
 8044ee4:	d117      	bne.n	8044f16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8044ee6:	7dba      	ldrb	r2, [r7, #22]
 8044ee8:	68fb      	ldr	r3, [r7, #12]
 8044eea:	32ae      	adds	r2, #174	@ 0xae
 8044eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044ef0:	699b      	ldr	r3, [r3, #24]
 8044ef2:	2b00      	cmp	r3, #0
 8044ef4:	d00f      	beq.n	8044f16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8044ef6:	7dba      	ldrb	r2, [r7, #22]
 8044ef8:	68fb      	ldr	r3, [r7, #12]
 8044efa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8044efe:	7dba      	ldrb	r2, [r7, #22]
 8044f00:	68fb      	ldr	r3, [r7, #12]
 8044f02:	32ae      	adds	r2, #174	@ 0xae
 8044f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044f08:	699b      	ldr	r3, [r3, #24]
 8044f0a:	7afa      	ldrb	r2, [r7, #11]
 8044f0c:	4611      	mov	r1, r2
 8044f0e:	68f8      	ldr	r0, [r7, #12]
 8044f10:	4798      	blx	r3
 8044f12:	4603      	mov	r3, r0
 8044f14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8044f16:	7dfb      	ldrb	r3, [r7, #23]
 8044f18:	2b00      	cmp	r3, #0
 8044f1a:	d001      	beq.n	8044f20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8044f1c:	7dfb      	ldrb	r3, [r7, #23]
 8044f1e:	e000      	b.n	8044f22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8044f20:	2300      	movs	r3, #0
}
 8044f22:	4618      	mov	r0, r3
 8044f24:	3718      	adds	r7, #24
 8044f26:	46bd      	mov	sp, r7
 8044f28:	bd80      	pop	{r7, pc}

08044f2a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8044f2a:	b580      	push	{r7, lr}
 8044f2c:	b086      	sub	sp, #24
 8044f2e:	af00      	add	r7, sp, #0
 8044f30:	60f8      	str	r0, [r7, #12]
 8044f32:	460b      	mov	r3, r1
 8044f34:	607a      	str	r2, [r7, #4]
 8044f36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8044f38:	7afb      	ldrb	r3, [r7, #11]
 8044f3a:	2b00      	cmp	r3, #0
 8044f3c:	d16f      	bne.n	804501e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8044f3e:	68fb      	ldr	r3, [r7, #12]
 8044f40:	3314      	adds	r3, #20
 8044f42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8044f44:	68fb      	ldr	r3, [r7, #12]
 8044f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8044f4a:	2b02      	cmp	r3, #2
 8044f4c:	d15a      	bne.n	8045004 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8044f4e:	693b      	ldr	r3, [r7, #16]
 8044f50:	689a      	ldr	r2, [r3, #8]
 8044f52:	693b      	ldr	r3, [r7, #16]
 8044f54:	68db      	ldr	r3, [r3, #12]
 8044f56:	429a      	cmp	r2, r3
 8044f58:	d914      	bls.n	8044f84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8044f5a:	693b      	ldr	r3, [r7, #16]
 8044f5c:	689a      	ldr	r2, [r3, #8]
 8044f5e:	693b      	ldr	r3, [r7, #16]
 8044f60:	68db      	ldr	r3, [r3, #12]
 8044f62:	1ad2      	subs	r2, r2, r3
 8044f64:	693b      	ldr	r3, [r7, #16]
 8044f66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8044f68:	693b      	ldr	r3, [r7, #16]
 8044f6a:	689b      	ldr	r3, [r3, #8]
 8044f6c:	461a      	mov	r2, r3
 8044f6e:	6879      	ldr	r1, [r7, #4]
 8044f70:	68f8      	ldr	r0, [r7, #12]
 8044f72:	f001 f8bc 	bl	80460ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8044f76:	2300      	movs	r3, #0
 8044f78:	2200      	movs	r2, #0
 8044f7a:	2100      	movs	r1, #0
 8044f7c:	68f8      	ldr	r0, [r7, #12]
 8044f7e:	f001 fd87 	bl	8046a90 <USBD_LL_PrepareReceive>
 8044f82:	e03f      	b.n	8045004 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8044f84:	693b      	ldr	r3, [r7, #16]
 8044f86:	68da      	ldr	r2, [r3, #12]
 8044f88:	693b      	ldr	r3, [r7, #16]
 8044f8a:	689b      	ldr	r3, [r3, #8]
 8044f8c:	429a      	cmp	r2, r3
 8044f8e:	d11c      	bne.n	8044fca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8044f90:	693b      	ldr	r3, [r7, #16]
 8044f92:	685a      	ldr	r2, [r3, #4]
 8044f94:	693b      	ldr	r3, [r7, #16]
 8044f96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8044f98:	429a      	cmp	r2, r3
 8044f9a:	d316      	bcc.n	8044fca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8044f9c:	693b      	ldr	r3, [r7, #16]
 8044f9e:	685a      	ldr	r2, [r3, #4]
 8044fa0:	68fb      	ldr	r3, [r7, #12]
 8044fa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8044fa6:	429a      	cmp	r2, r3
 8044fa8:	d20f      	bcs.n	8044fca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8044faa:	2200      	movs	r2, #0
 8044fac:	2100      	movs	r1, #0
 8044fae:	68f8      	ldr	r0, [r7, #12]
 8044fb0:	f001 f89d 	bl	80460ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8044fb4:	68fb      	ldr	r3, [r7, #12]
 8044fb6:	2200      	movs	r2, #0
 8044fb8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8044fbc:	2300      	movs	r3, #0
 8044fbe:	2200      	movs	r2, #0
 8044fc0:	2100      	movs	r1, #0
 8044fc2:	68f8      	ldr	r0, [r7, #12]
 8044fc4:	f001 fd64 	bl	8046a90 <USBD_LL_PrepareReceive>
 8044fc8:	e01c      	b.n	8045004 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044fca:	68fb      	ldr	r3, [r7, #12]
 8044fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8044fd0:	b2db      	uxtb	r3, r3
 8044fd2:	2b03      	cmp	r3, #3
 8044fd4:	d10f      	bne.n	8044ff6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8044fd6:	68fb      	ldr	r3, [r7, #12]
 8044fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8044fdc:	68db      	ldr	r3, [r3, #12]
 8044fde:	2b00      	cmp	r3, #0
 8044fe0:	d009      	beq.n	8044ff6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8044fe2:	68fb      	ldr	r3, [r7, #12]
 8044fe4:	2200      	movs	r2, #0
 8044fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8044fea:	68fb      	ldr	r3, [r7, #12]
 8044fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8044ff0:	68db      	ldr	r3, [r3, #12]
 8044ff2:	68f8      	ldr	r0, [r7, #12]
 8044ff4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8044ff6:	2180      	movs	r1, #128	@ 0x80
 8044ff8:	68f8      	ldr	r0, [r7, #12]
 8044ffa:	f001 fc9f 	bl	804693c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8044ffe:	68f8      	ldr	r0, [r7, #12]
 8045000:	f001 f8c7 	bl	8046192 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8045004:	68fb      	ldr	r3, [r7, #12]
 8045006:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 804500a:	2b00      	cmp	r3, #0
 804500c:	d03a      	beq.n	8045084 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 804500e:	68f8      	ldr	r0, [r7, #12]
 8045010:	f7ff fe42 	bl	8044c98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8045014:	68fb      	ldr	r3, [r7, #12]
 8045016:	2200      	movs	r2, #0
 8045018:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 804501c:	e032      	b.n	8045084 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 804501e:	7afb      	ldrb	r3, [r7, #11]
 8045020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8045024:	b2db      	uxtb	r3, r3
 8045026:	4619      	mov	r1, r3
 8045028:	68f8      	ldr	r0, [r7, #12]
 804502a:	f000 f985 	bl	8045338 <USBD_CoreFindEP>
 804502e:	4603      	mov	r3, r0
 8045030:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8045032:	7dfb      	ldrb	r3, [r7, #23]
 8045034:	2bff      	cmp	r3, #255	@ 0xff
 8045036:	d025      	beq.n	8045084 <USBD_LL_DataInStage+0x15a>
 8045038:	7dfb      	ldrb	r3, [r7, #23]
 804503a:	2b00      	cmp	r3, #0
 804503c:	d122      	bne.n	8045084 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804503e:	68fb      	ldr	r3, [r7, #12]
 8045040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045044:	b2db      	uxtb	r3, r3
 8045046:	2b03      	cmp	r3, #3
 8045048:	d11c      	bne.n	8045084 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 804504a:	7dfa      	ldrb	r2, [r7, #23]
 804504c:	68fb      	ldr	r3, [r7, #12]
 804504e:	32ae      	adds	r2, #174	@ 0xae
 8045050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045054:	695b      	ldr	r3, [r3, #20]
 8045056:	2b00      	cmp	r3, #0
 8045058:	d014      	beq.n	8045084 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 804505a:	7dfa      	ldrb	r2, [r7, #23]
 804505c:	68fb      	ldr	r3, [r7, #12]
 804505e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8045062:	7dfa      	ldrb	r2, [r7, #23]
 8045064:	68fb      	ldr	r3, [r7, #12]
 8045066:	32ae      	adds	r2, #174	@ 0xae
 8045068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804506c:	695b      	ldr	r3, [r3, #20]
 804506e:	7afa      	ldrb	r2, [r7, #11]
 8045070:	4611      	mov	r1, r2
 8045072:	68f8      	ldr	r0, [r7, #12]
 8045074:	4798      	blx	r3
 8045076:	4603      	mov	r3, r0
 8045078:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 804507a:	7dbb      	ldrb	r3, [r7, #22]
 804507c:	2b00      	cmp	r3, #0
 804507e:	d001      	beq.n	8045084 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8045080:	7dbb      	ldrb	r3, [r7, #22]
 8045082:	e000      	b.n	8045086 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8045084:	2300      	movs	r3, #0
}
 8045086:	4618      	mov	r0, r3
 8045088:	3718      	adds	r7, #24
 804508a:	46bd      	mov	sp, r7
 804508c:	bd80      	pop	{r7, pc}

0804508e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 804508e:	b580      	push	{r7, lr}
 8045090:	b084      	sub	sp, #16
 8045092:	af00      	add	r7, sp, #0
 8045094:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8045096:	2300      	movs	r3, #0
 8045098:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 804509a:	687b      	ldr	r3, [r7, #4]
 804509c:	2201      	movs	r2, #1
 804509e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80450a2:	687b      	ldr	r3, [r7, #4]
 80450a4:	2200      	movs	r2, #0
 80450a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80450aa:	687b      	ldr	r3, [r7, #4]
 80450ac:	2200      	movs	r2, #0
 80450ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80450b0:	687b      	ldr	r3, [r7, #4]
 80450b2:	2200      	movs	r2, #0
 80450b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80450b8:	687b      	ldr	r3, [r7, #4]
 80450ba:	2200      	movs	r2, #0
 80450bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80450c0:	687b      	ldr	r3, [r7, #4]
 80450c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80450c6:	2b00      	cmp	r3, #0
 80450c8:	d014      	beq.n	80450f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80450ca:	687b      	ldr	r3, [r7, #4]
 80450cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80450d0:	685b      	ldr	r3, [r3, #4]
 80450d2:	2b00      	cmp	r3, #0
 80450d4:	d00e      	beq.n	80450f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80450d6:	687b      	ldr	r3, [r7, #4]
 80450d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80450dc:	685b      	ldr	r3, [r3, #4]
 80450de:	687a      	ldr	r2, [r7, #4]
 80450e0:	6852      	ldr	r2, [r2, #4]
 80450e2:	b2d2      	uxtb	r2, r2
 80450e4:	4611      	mov	r1, r2
 80450e6:	6878      	ldr	r0, [r7, #4]
 80450e8:	4798      	blx	r3
 80450ea:	4603      	mov	r3, r0
 80450ec:	2b00      	cmp	r3, #0
 80450ee:	d001      	beq.n	80450f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80450f0:	2303      	movs	r3, #3
 80450f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80450f4:	2340      	movs	r3, #64	@ 0x40
 80450f6:	2200      	movs	r2, #0
 80450f8:	2100      	movs	r1, #0
 80450fa:	6878      	ldr	r0, [r7, #4]
 80450fc:	f001 fbd9 	bl	80468b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8045100:	687b      	ldr	r3, [r7, #4]
 8045102:	2201      	movs	r2, #1
 8045104:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8045108:	687b      	ldr	r3, [r7, #4]
 804510a:	2240      	movs	r2, #64	@ 0x40
 804510c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8045110:	2340      	movs	r3, #64	@ 0x40
 8045112:	2200      	movs	r2, #0
 8045114:	2180      	movs	r1, #128	@ 0x80
 8045116:	6878      	ldr	r0, [r7, #4]
 8045118:	f001 fbcb 	bl	80468b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 804511c:	687b      	ldr	r3, [r7, #4]
 804511e:	2201      	movs	r2, #1
 8045120:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8045122:	687b      	ldr	r3, [r7, #4]
 8045124:	2240      	movs	r2, #64	@ 0x40
 8045126:	621a      	str	r2, [r3, #32]

  return ret;
 8045128:	7bfb      	ldrb	r3, [r7, #15]
}
 804512a:	4618      	mov	r0, r3
 804512c:	3710      	adds	r7, #16
 804512e:	46bd      	mov	sp, r7
 8045130:	bd80      	pop	{r7, pc}

08045132 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8045132:	b480      	push	{r7}
 8045134:	b083      	sub	sp, #12
 8045136:	af00      	add	r7, sp, #0
 8045138:	6078      	str	r0, [r7, #4]
 804513a:	460b      	mov	r3, r1
 804513c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 804513e:	687b      	ldr	r3, [r7, #4]
 8045140:	78fa      	ldrb	r2, [r7, #3]
 8045142:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8045144:	2300      	movs	r3, #0
}
 8045146:	4618      	mov	r0, r3
 8045148:	370c      	adds	r7, #12
 804514a:	46bd      	mov	sp, r7
 804514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045150:	4770      	bx	lr

08045152 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8045152:	b480      	push	{r7}
 8045154:	b083      	sub	sp, #12
 8045156:	af00      	add	r7, sp, #0
 8045158:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 804515a:	687b      	ldr	r3, [r7, #4]
 804515c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045160:	b2db      	uxtb	r3, r3
 8045162:	2b04      	cmp	r3, #4
 8045164:	d006      	beq.n	8045174 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8045166:	687b      	ldr	r3, [r7, #4]
 8045168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804516c:	b2da      	uxtb	r2, r3
 804516e:	687b      	ldr	r3, [r7, #4]
 8045170:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8045174:	687b      	ldr	r3, [r7, #4]
 8045176:	2204      	movs	r2, #4
 8045178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 804517c:	2300      	movs	r3, #0
}
 804517e:	4618      	mov	r0, r3
 8045180:	370c      	adds	r7, #12
 8045182:	46bd      	mov	sp, r7
 8045184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045188:	4770      	bx	lr

0804518a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 804518a:	b480      	push	{r7}
 804518c:	b083      	sub	sp, #12
 804518e:	af00      	add	r7, sp, #0
 8045190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8045192:	687b      	ldr	r3, [r7, #4]
 8045194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045198:	b2db      	uxtb	r3, r3
 804519a:	2b04      	cmp	r3, #4
 804519c:	d106      	bne.n	80451ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 804519e:	687b      	ldr	r3, [r7, #4]
 80451a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80451a4:	b2da      	uxtb	r2, r3
 80451a6:	687b      	ldr	r3, [r7, #4]
 80451a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80451ac:	2300      	movs	r3, #0
}
 80451ae:	4618      	mov	r0, r3
 80451b0:	370c      	adds	r7, #12
 80451b2:	46bd      	mov	sp, r7
 80451b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451b8:	4770      	bx	lr

080451ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80451ba:	b580      	push	{r7, lr}
 80451bc:	b082      	sub	sp, #8
 80451be:	af00      	add	r7, sp, #0
 80451c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80451c2:	687b      	ldr	r3, [r7, #4]
 80451c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80451c8:	b2db      	uxtb	r3, r3
 80451ca:	2b03      	cmp	r3, #3
 80451cc:	d110      	bne.n	80451f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80451ce:	687b      	ldr	r3, [r7, #4]
 80451d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80451d4:	2b00      	cmp	r3, #0
 80451d6:	d00b      	beq.n	80451f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80451d8:	687b      	ldr	r3, [r7, #4]
 80451da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80451de:	69db      	ldr	r3, [r3, #28]
 80451e0:	2b00      	cmp	r3, #0
 80451e2:	d005      	beq.n	80451f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80451e4:	687b      	ldr	r3, [r7, #4]
 80451e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80451ea:	69db      	ldr	r3, [r3, #28]
 80451ec:	6878      	ldr	r0, [r7, #4]
 80451ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80451f0:	2300      	movs	r3, #0
}
 80451f2:	4618      	mov	r0, r3
 80451f4:	3708      	adds	r7, #8
 80451f6:	46bd      	mov	sp, r7
 80451f8:	bd80      	pop	{r7, pc}

080451fa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80451fa:	b580      	push	{r7, lr}
 80451fc:	b082      	sub	sp, #8
 80451fe:	af00      	add	r7, sp, #0
 8045200:	6078      	str	r0, [r7, #4]
 8045202:	460b      	mov	r3, r1
 8045204:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8045206:	687b      	ldr	r3, [r7, #4]
 8045208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804520c:	687b      	ldr	r3, [r7, #4]
 804520e:	32ae      	adds	r2, #174	@ 0xae
 8045210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045214:	2b00      	cmp	r3, #0
 8045216:	d101      	bne.n	804521c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8045218:	2303      	movs	r3, #3
 804521a:	e01c      	b.n	8045256 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804521c:	687b      	ldr	r3, [r7, #4]
 804521e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045222:	b2db      	uxtb	r3, r3
 8045224:	2b03      	cmp	r3, #3
 8045226:	d115      	bne.n	8045254 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8045228:	687b      	ldr	r3, [r7, #4]
 804522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804522e:	687b      	ldr	r3, [r7, #4]
 8045230:	32ae      	adds	r2, #174	@ 0xae
 8045232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045236:	6a1b      	ldr	r3, [r3, #32]
 8045238:	2b00      	cmp	r3, #0
 804523a:	d00b      	beq.n	8045254 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 804523c:	687b      	ldr	r3, [r7, #4]
 804523e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8045242:	687b      	ldr	r3, [r7, #4]
 8045244:	32ae      	adds	r2, #174	@ 0xae
 8045246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804524a:	6a1b      	ldr	r3, [r3, #32]
 804524c:	78fa      	ldrb	r2, [r7, #3]
 804524e:	4611      	mov	r1, r2
 8045250:	6878      	ldr	r0, [r7, #4]
 8045252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8045254:	2300      	movs	r3, #0
}
 8045256:	4618      	mov	r0, r3
 8045258:	3708      	adds	r7, #8
 804525a:	46bd      	mov	sp, r7
 804525c:	bd80      	pop	{r7, pc}

0804525e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 804525e:	b580      	push	{r7, lr}
 8045260:	b082      	sub	sp, #8
 8045262:	af00      	add	r7, sp, #0
 8045264:	6078      	str	r0, [r7, #4]
 8045266:	460b      	mov	r3, r1
 8045268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 804526a:	687b      	ldr	r3, [r7, #4]
 804526c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8045270:	687b      	ldr	r3, [r7, #4]
 8045272:	32ae      	adds	r2, #174	@ 0xae
 8045274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045278:	2b00      	cmp	r3, #0
 804527a:	d101      	bne.n	8045280 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 804527c:	2303      	movs	r3, #3
 804527e:	e01c      	b.n	80452ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045280:	687b      	ldr	r3, [r7, #4]
 8045282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045286:	b2db      	uxtb	r3, r3
 8045288:	2b03      	cmp	r3, #3
 804528a:	d115      	bne.n	80452b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 804528c:	687b      	ldr	r3, [r7, #4]
 804528e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8045292:	687b      	ldr	r3, [r7, #4]
 8045294:	32ae      	adds	r2, #174	@ 0xae
 8045296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804529c:	2b00      	cmp	r3, #0
 804529e:	d00b      	beq.n	80452b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80452a0:	687b      	ldr	r3, [r7, #4]
 80452a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80452a6:	687b      	ldr	r3, [r7, #4]
 80452a8:	32ae      	adds	r2, #174	@ 0xae
 80452aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80452ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80452b0:	78fa      	ldrb	r2, [r7, #3]
 80452b2:	4611      	mov	r1, r2
 80452b4:	6878      	ldr	r0, [r7, #4]
 80452b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80452b8:	2300      	movs	r3, #0
}
 80452ba:	4618      	mov	r0, r3
 80452bc:	3708      	adds	r7, #8
 80452be:	46bd      	mov	sp, r7
 80452c0:	bd80      	pop	{r7, pc}

080452c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80452c2:	b480      	push	{r7}
 80452c4:	b083      	sub	sp, #12
 80452c6:	af00      	add	r7, sp, #0
 80452c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80452ca:	2300      	movs	r3, #0
}
 80452cc:	4618      	mov	r0, r3
 80452ce:	370c      	adds	r7, #12
 80452d0:	46bd      	mov	sp, r7
 80452d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452d6:	4770      	bx	lr

080452d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80452d8:	b580      	push	{r7, lr}
 80452da:	b084      	sub	sp, #16
 80452dc:	af00      	add	r7, sp, #0
 80452de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80452e0:	2300      	movs	r3, #0
 80452e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80452e4:	687b      	ldr	r3, [r7, #4]
 80452e6:	2201      	movs	r2, #1
 80452e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80452ec:	687b      	ldr	r3, [r7, #4]
 80452ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80452f2:	2b00      	cmp	r3, #0
 80452f4:	d00e      	beq.n	8045314 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80452f6:	687b      	ldr	r3, [r7, #4]
 80452f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80452fc:	685b      	ldr	r3, [r3, #4]
 80452fe:	687a      	ldr	r2, [r7, #4]
 8045300:	6852      	ldr	r2, [r2, #4]
 8045302:	b2d2      	uxtb	r2, r2
 8045304:	4611      	mov	r1, r2
 8045306:	6878      	ldr	r0, [r7, #4]
 8045308:	4798      	blx	r3
 804530a:	4603      	mov	r3, r0
 804530c:	2b00      	cmp	r3, #0
 804530e:	d001      	beq.n	8045314 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8045310:	2303      	movs	r3, #3
 8045312:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8045314:	7bfb      	ldrb	r3, [r7, #15]
}
 8045316:	4618      	mov	r0, r3
 8045318:	3710      	adds	r7, #16
 804531a:	46bd      	mov	sp, r7
 804531c:	bd80      	pop	{r7, pc}

0804531e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 804531e:	b480      	push	{r7}
 8045320:	b083      	sub	sp, #12
 8045322:	af00      	add	r7, sp, #0
 8045324:	6078      	str	r0, [r7, #4]
 8045326:	460b      	mov	r3, r1
 8045328:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 804532a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 804532c:	4618      	mov	r0, r3
 804532e:	370c      	adds	r7, #12
 8045330:	46bd      	mov	sp, r7
 8045332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045336:	4770      	bx	lr

08045338 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8045338:	b480      	push	{r7}
 804533a:	b083      	sub	sp, #12
 804533c:	af00      	add	r7, sp, #0
 804533e:	6078      	str	r0, [r7, #4]
 8045340:	460b      	mov	r3, r1
 8045342:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8045344:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8045346:	4618      	mov	r0, r3
 8045348:	370c      	adds	r7, #12
 804534a:	46bd      	mov	sp, r7
 804534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045350:	4770      	bx	lr

08045352 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8045352:	b580      	push	{r7, lr}
 8045354:	b086      	sub	sp, #24
 8045356:	af00      	add	r7, sp, #0
 8045358:	6078      	str	r0, [r7, #4]
 804535a:	460b      	mov	r3, r1
 804535c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 804535e:	687b      	ldr	r3, [r7, #4]
 8045360:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8045362:	687b      	ldr	r3, [r7, #4]
 8045364:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8045366:	2300      	movs	r3, #0
 8045368:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 804536a:	68fb      	ldr	r3, [r7, #12]
 804536c:	885b      	ldrh	r3, [r3, #2]
 804536e:	b29b      	uxth	r3, r3
 8045370:	68fa      	ldr	r2, [r7, #12]
 8045372:	7812      	ldrb	r2, [r2, #0]
 8045374:	4293      	cmp	r3, r2
 8045376:	d91f      	bls.n	80453b8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8045378:	68fb      	ldr	r3, [r7, #12]
 804537a:	781b      	ldrb	r3, [r3, #0]
 804537c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 804537e:	e013      	b.n	80453a8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8045380:	f107 030a 	add.w	r3, r7, #10
 8045384:	4619      	mov	r1, r3
 8045386:	6978      	ldr	r0, [r7, #20]
 8045388:	f000 f81b 	bl	80453c2 <USBD_GetNextDesc>
 804538c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804538e:	697b      	ldr	r3, [r7, #20]
 8045390:	785b      	ldrb	r3, [r3, #1]
 8045392:	2b05      	cmp	r3, #5
 8045394:	d108      	bne.n	80453a8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8045396:	697b      	ldr	r3, [r7, #20]
 8045398:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 804539a:	693b      	ldr	r3, [r7, #16]
 804539c:	789b      	ldrb	r3, [r3, #2]
 804539e:	78fa      	ldrb	r2, [r7, #3]
 80453a0:	429a      	cmp	r2, r3
 80453a2:	d008      	beq.n	80453b6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80453a4:	2300      	movs	r3, #0
 80453a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80453a8:	68fb      	ldr	r3, [r7, #12]
 80453aa:	885b      	ldrh	r3, [r3, #2]
 80453ac:	b29a      	uxth	r2, r3
 80453ae:	897b      	ldrh	r3, [r7, #10]
 80453b0:	429a      	cmp	r2, r3
 80453b2:	d8e5      	bhi.n	8045380 <USBD_GetEpDesc+0x2e>
 80453b4:	e000      	b.n	80453b8 <USBD_GetEpDesc+0x66>
          break;
 80453b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80453b8:	693b      	ldr	r3, [r7, #16]
}
 80453ba:	4618      	mov	r0, r3
 80453bc:	3718      	adds	r7, #24
 80453be:	46bd      	mov	sp, r7
 80453c0:	bd80      	pop	{r7, pc}

080453c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80453c2:	b480      	push	{r7}
 80453c4:	b085      	sub	sp, #20
 80453c6:	af00      	add	r7, sp, #0
 80453c8:	6078      	str	r0, [r7, #4]
 80453ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80453cc:	687b      	ldr	r3, [r7, #4]
 80453ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80453d0:	683b      	ldr	r3, [r7, #0]
 80453d2:	881b      	ldrh	r3, [r3, #0]
 80453d4:	68fa      	ldr	r2, [r7, #12]
 80453d6:	7812      	ldrb	r2, [r2, #0]
 80453d8:	4413      	add	r3, r2
 80453da:	b29a      	uxth	r2, r3
 80453dc:	683b      	ldr	r3, [r7, #0]
 80453de:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80453e0:	68fb      	ldr	r3, [r7, #12]
 80453e2:	781b      	ldrb	r3, [r3, #0]
 80453e4:	461a      	mov	r2, r3
 80453e6:	687b      	ldr	r3, [r7, #4]
 80453e8:	4413      	add	r3, r2
 80453ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80453ec:	68fb      	ldr	r3, [r7, #12]
}
 80453ee:	4618      	mov	r0, r3
 80453f0:	3714      	adds	r7, #20
 80453f2:	46bd      	mov	sp, r7
 80453f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80453f8:	4770      	bx	lr

080453fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80453fa:	b480      	push	{r7}
 80453fc:	b087      	sub	sp, #28
 80453fe:	af00      	add	r7, sp, #0
 8045400:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8045402:	687b      	ldr	r3, [r7, #4]
 8045404:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8045406:	697b      	ldr	r3, [r7, #20]
 8045408:	781b      	ldrb	r3, [r3, #0]
 804540a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 804540c:	697b      	ldr	r3, [r7, #20]
 804540e:	3301      	adds	r3, #1
 8045410:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8045412:	697b      	ldr	r3, [r7, #20]
 8045414:	781b      	ldrb	r3, [r3, #0]
 8045416:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8045418:	8a3b      	ldrh	r3, [r7, #16]
 804541a:	021b      	lsls	r3, r3, #8
 804541c:	b21a      	sxth	r2, r3
 804541e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8045422:	4313      	orrs	r3, r2
 8045424:	b21b      	sxth	r3, r3
 8045426:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8045428:	89fb      	ldrh	r3, [r7, #14]
}
 804542a:	4618      	mov	r0, r3
 804542c:	371c      	adds	r7, #28
 804542e:	46bd      	mov	sp, r7
 8045430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045434:	4770      	bx	lr
	...

08045438 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045438:	b580      	push	{r7, lr}
 804543a:	b084      	sub	sp, #16
 804543c:	af00      	add	r7, sp, #0
 804543e:	6078      	str	r0, [r7, #4]
 8045440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8045442:	2300      	movs	r3, #0
 8045444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8045446:	683b      	ldr	r3, [r7, #0]
 8045448:	781b      	ldrb	r3, [r3, #0]
 804544a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 804544e:	2b40      	cmp	r3, #64	@ 0x40
 8045450:	d005      	beq.n	804545e <USBD_StdDevReq+0x26>
 8045452:	2b40      	cmp	r3, #64	@ 0x40
 8045454:	d857      	bhi.n	8045506 <USBD_StdDevReq+0xce>
 8045456:	2b00      	cmp	r3, #0
 8045458:	d00f      	beq.n	804547a <USBD_StdDevReq+0x42>
 804545a:	2b20      	cmp	r3, #32
 804545c:	d153      	bne.n	8045506 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 804545e:	687b      	ldr	r3, [r7, #4]
 8045460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8045464:	687b      	ldr	r3, [r7, #4]
 8045466:	32ae      	adds	r2, #174	@ 0xae
 8045468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804546c:	689b      	ldr	r3, [r3, #8]
 804546e:	6839      	ldr	r1, [r7, #0]
 8045470:	6878      	ldr	r0, [r7, #4]
 8045472:	4798      	blx	r3
 8045474:	4603      	mov	r3, r0
 8045476:	73fb      	strb	r3, [r7, #15]
      break;
 8045478:	e04a      	b.n	8045510 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 804547a:	683b      	ldr	r3, [r7, #0]
 804547c:	785b      	ldrb	r3, [r3, #1]
 804547e:	2b09      	cmp	r3, #9
 8045480:	d83b      	bhi.n	80454fa <USBD_StdDevReq+0xc2>
 8045482:	a201      	add	r2, pc, #4	@ (adr r2, 8045488 <USBD_StdDevReq+0x50>)
 8045484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045488:	080454dd 	.word	0x080454dd
 804548c:	080454f1 	.word	0x080454f1
 8045490:	080454fb 	.word	0x080454fb
 8045494:	080454e7 	.word	0x080454e7
 8045498:	080454fb 	.word	0x080454fb
 804549c:	080454bb 	.word	0x080454bb
 80454a0:	080454b1 	.word	0x080454b1
 80454a4:	080454fb 	.word	0x080454fb
 80454a8:	080454d3 	.word	0x080454d3
 80454ac:	080454c5 	.word	0x080454c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80454b0:	6839      	ldr	r1, [r7, #0]
 80454b2:	6878      	ldr	r0, [r7, #4]
 80454b4:	f000 fa3c 	bl	8045930 <USBD_GetDescriptor>
          break;
 80454b8:	e024      	b.n	8045504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80454ba:	6839      	ldr	r1, [r7, #0]
 80454bc:	6878      	ldr	r0, [r7, #4]
 80454be:	f000 fba1 	bl	8045c04 <USBD_SetAddress>
          break;
 80454c2:	e01f      	b.n	8045504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80454c4:	6839      	ldr	r1, [r7, #0]
 80454c6:	6878      	ldr	r0, [r7, #4]
 80454c8:	f000 fbe0 	bl	8045c8c <USBD_SetConfig>
 80454cc:	4603      	mov	r3, r0
 80454ce:	73fb      	strb	r3, [r7, #15]
          break;
 80454d0:	e018      	b.n	8045504 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80454d2:	6839      	ldr	r1, [r7, #0]
 80454d4:	6878      	ldr	r0, [r7, #4]
 80454d6:	f000 fc83 	bl	8045de0 <USBD_GetConfig>
          break;
 80454da:	e013      	b.n	8045504 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80454dc:	6839      	ldr	r1, [r7, #0]
 80454de:	6878      	ldr	r0, [r7, #4]
 80454e0:	f000 fcb4 	bl	8045e4c <USBD_GetStatus>
          break;
 80454e4:	e00e      	b.n	8045504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80454e6:	6839      	ldr	r1, [r7, #0]
 80454e8:	6878      	ldr	r0, [r7, #4]
 80454ea:	f000 fce3 	bl	8045eb4 <USBD_SetFeature>
          break;
 80454ee:	e009      	b.n	8045504 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80454f0:	6839      	ldr	r1, [r7, #0]
 80454f2:	6878      	ldr	r0, [r7, #4]
 80454f4:	f000 fd07 	bl	8045f06 <USBD_ClrFeature>
          break;
 80454f8:	e004      	b.n	8045504 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80454fa:	6839      	ldr	r1, [r7, #0]
 80454fc:	6878      	ldr	r0, [r7, #4]
 80454fe:	f000 fd5e 	bl	8045fbe <USBD_CtlError>
          break;
 8045502:	bf00      	nop
      }
      break;
 8045504:	e004      	b.n	8045510 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8045506:	6839      	ldr	r1, [r7, #0]
 8045508:	6878      	ldr	r0, [r7, #4]
 804550a:	f000 fd58 	bl	8045fbe <USBD_CtlError>
      break;
 804550e:	bf00      	nop
  }

  return ret;
 8045510:	7bfb      	ldrb	r3, [r7, #15]
}
 8045512:	4618      	mov	r0, r3
 8045514:	3710      	adds	r7, #16
 8045516:	46bd      	mov	sp, r7
 8045518:	bd80      	pop	{r7, pc}
 804551a:	bf00      	nop

0804551c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804551c:	b580      	push	{r7, lr}
 804551e:	b084      	sub	sp, #16
 8045520:	af00      	add	r7, sp, #0
 8045522:	6078      	str	r0, [r7, #4]
 8045524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8045526:	2300      	movs	r3, #0
 8045528:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 804552a:	683b      	ldr	r3, [r7, #0]
 804552c:	781b      	ldrb	r3, [r3, #0]
 804552e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8045532:	2b40      	cmp	r3, #64	@ 0x40
 8045534:	d005      	beq.n	8045542 <USBD_StdItfReq+0x26>
 8045536:	2b40      	cmp	r3, #64	@ 0x40
 8045538:	d852      	bhi.n	80455e0 <USBD_StdItfReq+0xc4>
 804553a:	2b00      	cmp	r3, #0
 804553c:	d001      	beq.n	8045542 <USBD_StdItfReq+0x26>
 804553e:	2b20      	cmp	r3, #32
 8045540:	d14e      	bne.n	80455e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8045542:	687b      	ldr	r3, [r7, #4]
 8045544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045548:	b2db      	uxtb	r3, r3
 804554a:	3b01      	subs	r3, #1
 804554c:	2b02      	cmp	r3, #2
 804554e:	d840      	bhi.n	80455d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8045550:	683b      	ldr	r3, [r7, #0]
 8045552:	889b      	ldrh	r3, [r3, #4]
 8045554:	b2db      	uxtb	r3, r3
 8045556:	2b01      	cmp	r3, #1
 8045558:	d836      	bhi.n	80455c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 804555a:	683b      	ldr	r3, [r7, #0]
 804555c:	889b      	ldrh	r3, [r3, #4]
 804555e:	b2db      	uxtb	r3, r3
 8045560:	4619      	mov	r1, r3
 8045562:	6878      	ldr	r0, [r7, #4]
 8045564:	f7ff fedb 	bl	804531e <USBD_CoreFindIF>
 8045568:	4603      	mov	r3, r0
 804556a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 804556c:	7bbb      	ldrb	r3, [r7, #14]
 804556e:	2bff      	cmp	r3, #255	@ 0xff
 8045570:	d01d      	beq.n	80455ae <USBD_StdItfReq+0x92>
 8045572:	7bbb      	ldrb	r3, [r7, #14]
 8045574:	2b00      	cmp	r3, #0
 8045576:	d11a      	bne.n	80455ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8045578:	7bba      	ldrb	r2, [r7, #14]
 804557a:	687b      	ldr	r3, [r7, #4]
 804557c:	32ae      	adds	r2, #174	@ 0xae
 804557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045582:	689b      	ldr	r3, [r3, #8]
 8045584:	2b00      	cmp	r3, #0
 8045586:	d00f      	beq.n	80455a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8045588:	7bba      	ldrb	r2, [r7, #14]
 804558a:	687b      	ldr	r3, [r7, #4]
 804558c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8045590:	7bba      	ldrb	r2, [r7, #14]
 8045592:	687b      	ldr	r3, [r7, #4]
 8045594:	32ae      	adds	r2, #174	@ 0xae
 8045596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804559a:	689b      	ldr	r3, [r3, #8]
 804559c:	6839      	ldr	r1, [r7, #0]
 804559e:	6878      	ldr	r0, [r7, #4]
 80455a0:	4798      	blx	r3
 80455a2:	4603      	mov	r3, r0
 80455a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80455a6:	e004      	b.n	80455b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80455a8:	2303      	movs	r3, #3
 80455aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80455ac:	e001      	b.n	80455b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80455ae:	2303      	movs	r3, #3
 80455b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80455b2:	683b      	ldr	r3, [r7, #0]
 80455b4:	88db      	ldrh	r3, [r3, #6]
 80455b6:	2b00      	cmp	r3, #0
 80455b8:	d110      	bne.n	80455dc <USBD_StdItfReq+0xc0>
 80455ba:	7bfb      	ldrb	r3, [r7, #15]
 80455bc:	2b00      	cmp	r3, #0
 80455be:	d10d      	bne.n	80455dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80455c0:	6878      	ldr	r0, [r7, #4]
 80455c2:	f000 fdd3 	bl	804616c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80455c6:	e009      	b.n	80455dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80455c8:	6839      	ldr	r1, [r7, #0]
 80455ca:	6878      	ldr	r0, [r7, #4]
 80455cc:	f000 fcf7 	bl	8045fbe <USBD_CtlError>
          break;
 80455d0:	e004      	b.n	80455dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80455d2:	6839      	ldr	r1, [r7, #0]
 80455d4:	6878      	ldr	r0, [r7, #4]
 80455d6:	f000 fcf2 	bl	8045fbe <USBD_CtlError>
          break;
 80455da:	e000      	b.n	80455de <USBD_StdItfReq+0xc2>
          break;
 80455dc:	bf00      	nop
      }
      break;
 80455de:	e004      	b.n	80455ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80455e0:	6839      	ldr	r1, [r7, #0]
 80455e2:	6878      	ldr	r0, [r7, #4]
 80455e4:	f000 fceb 	bl	8045fbe <USBD_CtlError>
      break;
 80455e8:	bf00      	nop
  }

  return ret;
 80455ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80455ec:	4618      	mov	r0, r3
 80455ee:	3710      	adds	r7, #16
 80455f0:	46bd      	mov	sp, r7
 80455f2:	bd80      	pop	{r7, pc}

080455f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80455f4:	b580      	push	{r7, lr}
 80455f6:	b084      	sub	sp, #16
 80455f8:	af00      	add	r7, sp, #0
 80455fa:	6078      	str	r0, [r7, #4]
 80455fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80455fe:	2300      	movs	r3, #0
 8045600:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8045602:	683b      	ldr	r3, [r7, #0]
 8045604:	889b      	ldrh	r3, [r3, #4]
 8045606:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8045608:	683b      	ldr	r3, [r7, #0]
 804560a:	781b      	ldrb	r3, [r3, #0]
 804560c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8045610:	2b40      	cmp	r3, #64	@ 0x40
 8045612:	d007      	beq.n	8045624 <USBD_StdEPReq+0x30>
 8045614:	2b40      	cmp	r3, #64	@ 0x40
 8045616:	f200 817f 	bhi.w	8045918 <USBD_StdEPReq+0x324>
 804561a:	2b00      	cmp	r3, #0
 804561c:	d02a      	beq.n	8045674 <USBD_StdEPReq+0x80>
 804561e:	2b20      	cmp	r3, #32
 8045620:	f040 817a 	bne.w	8045918 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8045624:	7bbb      	ldrb	r3, [r7, #14]
 8045626:	4619      	mov	r1, r3
 8045628:	6878      	ldr	r0, [r7, #4]
 804562a:	f7ff fe85 	bl	8045338 <USBD_CoreFindEP>
 804562e:	4603      	mov	r3, r0
 8045630:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8045632:	7b7b      	ldrb	r3, [r7, #13]
 8045634:	2bff      	cmp	r3, #255	@ 0xff
 8045636:	f000 8174 	beq.w	8045922 <USBD_StdEPReq+0x32e>
 804563a:	7b7b      	ldrb	r3, [r7, #13]
 804563c:	2b00      	cmp	r3, #0
 804563e:	f040 8170 	bne.w	8045922 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8045642:	7b7a      	ldrb	r2, [r7, #13]
 8045644:	687b      	ldr	r3, [r7, #4]
 8045646:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 804564a:	7b7a      	ldrb	r2, [r7, #13]
 804564c:	687b      	ldr	r3, [r7, #4]
 804564e:	32ae      	adds	r2, #174	@ 0xae
 8045650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045654:	689b      	ldr	r3, [r3, #8]
 8045656:	2b00      	cmp	r3, #0
 8045658:	f000 8163 	beq.w	8045922 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 804565c:	7b7a      	ldrb	r2, [r7, #13]
 804565e:	687b      	ldr	r3, [r7, #4]
 8045660:	32ae      	adds	r2, #174	@ 0xae
 8045662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045666:	689b      	ldr	r3, [r3, #8]
 8045668:	6839      	ldr	r1, [r7, #0]
 804566a:	6878      	ldr	r0, [r7, #4]
 804566c:	4798      	blx	r3
 804566e:	4603      	mov	r3, r0
 8045670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8045672:	e156      	b.n	8045922 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8045674:	683b      	ldr	r3, [r7, #0]
 8045676:	785b      	ldrb	r3, [r3, #1]
 8045678:	2b03      	cmp	r3, #3
 804567a:	d008      	beq.n	804568e <USBD_StdEPReq+0x9a>
 804567c:	2b03      	cmp	r3, #3
 804567e:	f300 8145 	bgt.w	804590c <USBD_StdEPReq+0x318>
 8045682:	2b00      	cmp	r3, #0
 8045684:	f000 809b 	beq.w	80457be <USBD_StdEPReq+0x1ca>
 8045688:	2b01      	cmp	r3, #1
 804568a:	d03c      	beq.n	8045706 <USBD_StdEPReq+0x112>
 804568c:	e13e      	b.n	804590c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 804568e:	687b      	ldr	r3, [r7, #4]
 8045690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045694:	b2db      	uxtb	r3, r3
 8045696:	2b02      	cmp	r3, #2
 8045698:	d002      	beq.n	80456a0 <USBD_StdEPReq+0xac>
 804569a:	2b03      	cmp	r3, #3
 804569c:	d016      	beq.n	80456cc <USBD_StdEPReq+0xd8>
 804569e:	e02c      	b.n	80456fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80456a0:	7bbb      	ldrb	r3, [r7, #14]
 80456a2:	2b00      	cmp	r3, #0
 80456a4:	d00d      	beq.n	80456c2 <USBD_StdEPReq+0xce>
 80456a6:	7bbb      	ldrb	r3, [r7, #14]
 80456a8:	2b80      	cmp	r3, #128	@ 0x80
 80456aa:	d00a      	beq.n	80456c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80456ac:	7bbb      	ldrb	r3, [r7, #14]
 80456ae:	4619      	mov	r1, r3
 80456b0:	6878      	ldr	r0, [r7, #4]
 80456b2:	f001 f943 	bl	804693c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80456b6:	2180      	movs	r1, #128	@ 0x80
 80456b8:	6878      	ldr	r0, [r7, #4]
 80456ba:	f001 f93f 	bl	804693c <USBD_LL_StallEP>
 80456be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80456c0:	e020      	b.n	8045704 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80456c2:	6839      	ldr	r1, [r7, #0]
 80456c4:	6878      	ldr	r0, [r7, #4]
 80456c6:	f000 fc7a 	bl	8045fbe <USBD_CtlError>
              break;
 80456ca:	e01b      	b.n	8045704 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80456cc:	683b      	ldr	r3, [r7, #0]
 80456ce:	885b      	ldrh	r3, [r3, #2]
 80456d0:	2b00      	cmp	r3, #0
 80456d2:	d10e      	bne.n	80456f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80456d4:	7bbb      	ldrb	r3, [r7, #14]
 80456d6:	2b00      	cmp	r3, #0
 80456d8:	d00b      	beq.n	80456f2 <USBD_StdEPReq+0xfe>
 80456da:	7bbb      	ldrb	r3, [r7, #14]
 80456dc:	2b80      	cmp	r3, #128	@ 0x80
 80456de:	d008      	beq.n	80456f2 <USBD_StdEPReq+0xfe>
 80456e0:	683b      	ldr	r3, [r7, #0]
 80456e2:	88db      	ldrh	r3, [r3, #6]
 80456e4:	2b00      	cmp	r3, #0
 80456e6:	d104      	bne.n	80456f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80456e8:	7bbb      	ldrb	r3, [r7, #14]
 80456ea:	4619      	mov	r1, r3
 80456ec:	6878      	ldr	r0, [r7, #4]
 80456ee:	f001 f925 	bl	804693c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80456f2:	6878      	ldr	r0, [r7, #4]
 80456f4:	f000 fd3a 	bl	804616c <USBD_CtlSendStatus>

              break;
 80456f8:	e004      	b.n	8045704 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80456fa:	6839      	ldr	r1, [r7, #0]
 80456fc:	6878      	ldr	r0, [r7, #4]
 80456fe:	f000 fc5e 	bl	8045fbe <USBD_CtlError>
              break;
 8045702:	bf00      	nop
          }
          break;
 8045704:	e107      	b.n	8045916 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8045706:	687b      	ldr	r3, [r7, #4]
 8045708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804570c:	b2db      	uxtb	r3, r3
 804570e:	2b02      	cmp	r3, #2
 8045710:	d002      	beq.n	8045718 <USBD_StdEPReq+0x124>
 8045712:	2b03      	cmp	r3, #3
 8045714:	d016      	beq.n	8045744 <USBD_StdEPReq+0x150>
 8045716:	e04b      	b.n	80457b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8045718:	7bbb      	ldrb	r3, [r7, #14]
 804571a:	2b00      	cmp	r3, #0
 804571c:	d00d      	beq.n	804573a <USBD_StdEPReq+0x146>
 804571e:	7bbb      	ldrb	r3, [r7, #14]
 8045720:	2b80      	cmp	r3, #128	@ 0x80
 8045722:	d00a      	beq.n	804573a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8045724:	7bbb      	ldrb	r3, [r7, #14]
 8045726:	4619      	mov	r1, r3
 8045728:	6878      	ldr	r0, [r7, #4]
 804572a:	f001 f907 	bl	804693c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 804572e:	2180      	movs	r1, #128	@ 0x80
 8045730:	6878      	ldr	r0, [r7, #4]
 8045732:	f001 f903 	bl	804693c <USBD_LL_StallEP>
 8045736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8045738:	e040      	b.n	80457bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 804573a:	6839      	ldr	r1, [r7, #0]
 804573c:	6878      	ldr	r0, [r7, #4]
 804573e:	f000 fc3e 	bl	8045fbe <USBD_CtlError>
              break;
 8045742:	e03b      	b.n	80457bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8045744:	683b      	ldr	r3, [r7, #0]
 8045746:	885b      	ldrh	r3, [r3, #2]
 8045748:	2b00      	cmp	r3, #0
 804574a:	d136      	bne.n	80457ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 804574c:	7bbb      	ldrb	r3, [r7, #14]
 804574e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045752:	2b00      	cmp	r3, #0
 8045754:	d004      	beq.n	8045760 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8045756:	7bbb      	ldrb	r3, [r7, #14]
 8045758:	4619      	mov	r1, r3
 804575a:	6878      	ldr	r0, [r7, #4]
 804575c:	f001 f90d 	bl	804697a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8045760:	6878      	ldr	r0, [r7, #4]
 8045762:	f000 fd03 	bl	804616c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8045766:	7bbb      	ldrb	r3, [r7, #14]
 8045768:	4619      	mov	r1, r3
 804576a:	6878      	ldr	r0, [r7, #4]
 804576c:	f7ff fde4 	bl	8045338 <USBD_CoreFindEP>
 8045770:	4603      	mov	r3, r0
 8045772:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8045774:	7b7b      	ldrb	r3, [r7, #13]
 8045776:	2bff      	cmp	r3, #255	@ 0xff
 8045778:	d01f      	beq.n	80457ba <USBD_StdEPReq+0x1c6>
 804577a:	7b7b      	ldrb	r3, [r7, #13]
 804577c:	2b00      	cmp	r3, #0
 804577e:	d11c      	bne.n	80457ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8045780:	7b7a      	ldrb	r2, [r7, #13]
 8045782:	687b      	ldr	r3, [r7, #4]
 8045784:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8045788:	7b7a      	ldrb	r2, [r7, #13]
 804578a:	687b      	ldr	r3, [r7, #4]
 804578c:	32ae      	adds	r2, #174	@ 0xae
 804578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045792:	689b      	ldr	r3, [r3, #8]
 8045794:	2b00      	cmp	r3, #0
 8045796:	d010      	beq.n	80457ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8045798:	7b7a      	ldrb	r2, [r7, #13]
 804579a:	687b      	ldr	r3, [r7, #4]
 804579c:	32ae      	adds	r2, #174	@ 0xae
 804579e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80457a2:	689b      	ldr	r3, [r3, #8]
 80457a4:	6839      	ldr	r1, [r7, #0]
 80457a6:	6878      	ldr	r0, [r7, #4]
 80457a8:	4798      	blx	r3
 80457aa:	4603      	mov	r3, r0
 80457ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80457ae:	e004      	b.n	80457ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80457b0:	6839      	ldr	r1, [r7, #0]
 80457b2:	6878      	ldr	r0, [r7, #4]
 80457b4:	f000 fc03 	bl	8045fbe <USBD_CtlError>
              break;
 80457b8:	e000      	b.n	80457bc <USBD_StdEPReq+0x1c8>
              break;
 80457ba:	bf00      	nop
          }
          break;
 80457bc:	e0ab      	b.n	8045916 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80457be:	687b      	ldr	r3, [r7, #4]
 80457c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80457c4:	b2db      	uxtb	r3, r3
 80457c6:	2b02      	cmp	r3, #2
 80457c8:	d002      	beq.n	80457d0 <USBD_StdEPReq+0x1dc>
 80457ca:	2b03      	cmp	r3, #3
 80457cc:	d032      	beq.n	8045834 <USBD_StdEPReq+0x240>
 80457ce:	e097      	b.n	8045900 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80457d0:	7bbb      	ldrb	r3, [r7, #14]
 80457d2:	2b00      	cmp	r3, #0
 80457d4:	d007      	beq.n	80457e6 <USBD_StdEPReq+0x1f2>
 80457d6:	7bbb      	ldrb	r3, [r7, #14]
 80457d8:	2b80      	cmp	r3, #128	@ 0x80
 80457da:	d004      	beq.n	80457e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80457dc:	6839      	ldr	r1, [r7, #0]
 80457de:	6878      	ldr	r0, [r7, #4]
 80457e0:	f000 fbed 	bl	8045fbe <USBD_CtlError>
                break;
 80457e4:	e091      	b.n	804590a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80457e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80457ea:	2b00      	cmp	r3, #0
 80457ec:	da0b      	bge.n	8045806 <USBD_StdEPReq+0x212>
 80457ee:	7bbb      	ldrb	r3, [r7, #14]
 80457f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80457f4:	4613      	mov	r3, r2
 80457f6:	009b      	lsls	r3, r3, #2
 80457f8:	4413      	add	r3, r2
 80457fa:	009b      	lsls	r3, r3, #2
 80457fc:	3310      	adds	r3, #16
 80457fe:	687a      	ldr	r2, [r7, #4]
 8045800:	4413      	add	r3, r2
 8045802:	3304      	adds	r3, #4
 8045804:	e00b      	b.n	804581e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8045806:	7bbb      	ldrb	r3, [r7, #14]
 8045808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 804580c:	4613      	mov	r3, r2
 804580e:	009b      	lsls	r3, r3, #2
 8045810:	4413      	add	r3, r2
 8045812:	009b      	lsls	r3, r3, #2
 8045814:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8045818:	687a      	ldr	r2, [r7, #4]
 804581a:	4413      	add	r3, r2
 804581c:	3304      	adds	r3, #4
 804581e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8045820:	68bb      	ldr	r3, [r7, #8]
 8045822:	2200      	movs	r2, #0
 8045824:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8045826:	68bb      	ldr	r3, [r7, #8]
 8045828:	2202      	movs	r2, #2
 804582a:	4619      	mov	r1, r3
 804582c:	6878      	ldr	r0, [r7, #4]
 804582e:	f000 fc43 	bl	80460b8 <USBD_CtlSendData>
              break;
 8045832:	e06a      	b.n	804590a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8045834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8045838:	2b00      	cmp	r3, #0
 804583a:	da11      	bge.n	8045860 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 804583c:	7bbb      	ldrb	r3, [r7, #14]
 804583e:	f003 020f 	and.w	r2, r3, #15
 8045842:	6879      	ldr	r1, [r7, #4]
 8045844:	4613      	mov	r3, r2
 8045846:	009b      	lsls	r3, r3, #2
 8045848:	4413      	add	r3, r2
 804584a:	009b      	lsls	r3, r3, #2
 804584c:	440b      	add	r3, r1
 804584e:	3324      	adds	r3, #36	@ 0x24
 8045850:	881b      	ldrh	r3, [r3, #0]
 8045852:	2b00      	cmp	r3, #0
 8045854:	d117      	bne.n	8045886 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8045856:	6839      	ldr	r1, [r7, #0]
 8045858:	6878      	ldr	r0, [r7, #4]
 804585a:	f000 fbb0 	bl	8045fbe <USBD_CtlError>
                  break;
 804585e:	e054      	b.n	804590a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8045860:	7bbb      	ldrb	r3, [r7, #14]
 8045862:	f003 020f 	and.w	r2, r3, #15
 8045866:	6879      	ldr	r1, [r7, #4]
 8045868:	4613      	mov	r3, r2
 804586a:	009b      	lsls	r3, r3, #2
 804586c:	4413      	add	r3, r2
 804586e:	009b      	lsls	r3, r3, #2
 8045870:	440b      	add	r3, r1
 8045872:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8045876:	881b      	ldrh	r3, [r3, #0]
 8045878:	2b00      	cmp	r3, #0
 804587a:	d104      	bne.n	8045886 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 804587c:	6839      	ldr	r1, [r7, #0]
 804587e:	6878      	ldr	r0, [r7, #4]
 8045880:	f000 fb9d 	bl	8045fbe <USBD_CtlError>
                  break;
 8045884:	e041      	b.n	804590a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8045886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 804588a:	2b00      	cmp	r3, #0
 804588c:	da0b      	bge.n	80458a6 <USBD_StdEPReq+0x2b2>
 804588e:	7bbb      	ldrb	r3, [r7, #14]
 8045890:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8045894:	4613      	mov	r3, r2
 8045896:	009b      	lsls	r3, r3, #2
 8045898:	4413      	add	r3, r2
 804589a:	009b      	lsls	r3, r3, #2
 804589c:	3310      	adds	r3, #16
 804589e:	687a      	ldr	r2, [r7, #4]
 80458a0:	4413      	add	r3, r2
 80458a2:	3304      	adds	r3, #4
 80458a4:	e00b      	b.n	80458be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80458a6:	7bbb      	ldrb	r3, [r7, #14]
 80458a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80458ac:	4613      	mov	r3, r2
 80458ae:	009b      	lsls	r3, r3, #2
 80458b0:	4413      	add	r3, r2
 80458b2:	009b      	lsls	r3, r3, #2
 80458b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80458b8:	687a      	ldr	r2, [r7, #4]
 80458ba:	4413      	add	r3, r2
 80458bc:	3304      	adds	r3, #4
 80458be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80458c0:	7bbb      	ldrb	r3, [r7, #14]
 80458c2:	2b00      	cmp	r3, #0
 80458c4:	d002      	beq.n	80458cc <USBD_StdEPReq+0x2d8>
 80458c6:	7bbb      	ldrb	r3, [r7, #14]
 80458c8:	2b80      	cmp	r3, #128	@ 0x80
 80458ca:	d103      	bne.n	80458d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80458cc:	68bb      	ldr	r3, [r7, #8]
 80458ce:	2200      	movs	r2, #0
 80458d0:	601a      	str	r2, [r3, #0]
 80458d2:	e00e      	b.n	80458f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80458d4:	7bbb      	ldrb	r3, [r7, #14]
 80458d6:	4619      	mov	r1, r3
 80458d8:	6878      	ldr	r0, [r7, #4]
 80458da:	f001 f86d 	bl	80469b8 <USBD_LL_IsStallEP>
 80458de:	4603      	mov	r3, r0
 80458e0:	2b00      	cmp	r3, #0
 80458e2:	d003      	beq.n	80458ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80458e4:	68bb      	ldr	r3, [r7, #8]
 80458e6:	2201      	movs	r2, #1
 80458e8:	601a      	str	r2, [r3, #0]
 80458ea:	e002      	b.n	80458f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80458ec:	68bb      	ldr	r3, [r7, #8]
 80458ee:	2200      	movs	r2, #0
 80458f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80458f2:	68bb      	ldr	r3, [r7, #8]
 80458f4:	2202      	movs	r2, #2
 80458f6:	4619      	mov	r1, r3
 80458f8:	6878      	ldr	r0, [r7, #4]
 80458fa:	f000 fbdd 	bl	80460b8 <USBD_CtlSendData>
              break;
 80458fe:	e004      	b.n	804590a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8045900:	6839      	ldr	r1, [r7, #0]
 8045902:	6878      	ldr	r0, [r7, #4]
 8045904:	f000 fb5b 	bl	8045fbe <USBD_CtlError>
              break;
 8045908:	bf00      	nop
          }
          break;
 804590a:	e004      	b.n	8045916 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 804590c:	6839      	ldr	r1, [r7, #0]
 804590e:	6878      	ldr	r0, [r7, #4]
 8045910:	f000 fb55 	bl	8045fbe <USBD_CtlError>
          break;
 8045914:	bf00      	nop
      }
      break;
 8045916:	e005      	b.n	8045924 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8045918:	6839      	ldr	r1, [r7, #0]
 804591a:	6878      	ldr	r0, [r7, #4]
 804591c:	f000 fb4f 	bl	8045fbe <USBD_CtlError>
      break;
 8045920:	e000      	b.n	8045924 <USBD_StdEPReq+0x330>
      break;
 8045922:	bf00      	nop
  }

  return ret;
 8045924:	7bfb      	ldrb	r3, [r7, #15]
}
 8045926:	4618      	mov	r0, r3
 8045928:	3710      	adds	r7, #16
 804592a:	46bd      	mov	sp, r7
 804592c:	bd80      	pop	{r7, pc}
	...

08045930 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045930:	b580      	push	{r7, lr}
 8045932:	b084      	sub	sp, #16
 8045934:	af00      	add	r7, sp, #0
 8045936:	6078      	str	r0, [r7, #4]
 8045938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 804593a:	2300      	movs	r3, #0
 804593c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 804593e:	2300      	movs	r3, #0
 8045940:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8045942:	2300      	movs	r3, #0
 8045944:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8045946:	683b      	ldr	r3, [r7, #0]
 8045948:	885b      	ldrh	r3, [r3, #2]
 804594a:	0a1b      	lsrs	r3, r3, #8
 804594c:	b29b      	uxth	r3, r3
 804594e:	3b01      	subs	r3, #1
 8045950:	2b06      	cmp	r3, #6
 8045952:	f200 8128 	bhi.w	8045ba6 <USBD_GetDescriptor+0x276>
 8045956:	a201      	add	r2, pc, #4	@ (adr r2, 804595c <USBD_GetDescriptor+0x2c>)
 8045958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804595c:	08045979 	.word	0x08045979
 8045960:	08045991 	.word	0x08045991
 8045964:	080459d1 	.word	0x080459d1
 8045968:	08045ba7 	.word	0x08045ba7
 804596c:	08045ba7 	.word	0x08045ba7
 8045970:	08045b47 	.word	0x08045b47
 8045974:	08045b73 	.word	0x08045b73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8045978:	687b      	ldr	r3, [r7, #4]
 804597a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804597e:	681b      	ldr	r3, [r3, #0]
 8045980:	687a      	ldr	r2, [r7, #4]
 8045982:	7c12      	ldrb	r2, [r2, #16]
 8045984:	f107 0108 	add.w	r1, r7, #8
 8045988:	4610      	mov	r0, r2
 804598a:	4798      	blx	r3
 804598c:	60f8      	str	r0, [r7, #12]
      break;
 804598e:	e112      	b.n	8045bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8045990:	687b      	ldr	r3, [r7, #4]
 8045992:	7c1b      	ldrb	r3, [r3, #16]
 8045994:	2b00      	cmp	r3, #0
 8045996:	d10d      	bne.n	80459b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8045998:	687b      	ldr	r3, [r7, #4]
 804599a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80459a0:	f107 0208 	add.w	r2, r7, #8
 80459a4:	4610      	mov	r0, r2
 80459a6:	4798      	blx	r3
 80459a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80459aa:	68fb      	ldr	r3, [r7, #12]
 80459ac:	3301      	adds	r3, #1
 80459ae:	2202      	movs	r2, #2
 80459b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80459b2:	e100      	b.n	8045bb6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80459b4:	687b      	ldr	r3, [r7, #4]
 80459b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80459ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80459bc:	f107 0208 	add.w	r2, r7, #8
 80459c0:	4610      	mov	r0, r2
 80459c2:	4798      	blx	r3
 80459c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80459c6:	68fb      	ldr	r3, [r7, #12]
 80459c8:	3301      	adds	r3, #1
 80459ca:	2202      	movs	r2, #2
 80459cc:	701a      	strb	r2, [r3, #0]
      break;
 80459ce:	e0f2      	b.n	8045bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80459d0:	683b      	ldr	r3, [r7, #0]
 80459d2:	885b      	ldrh	r3, [r3, #2]
 80459d4:	b2db      	uxtb	r3, r3
 80459d6:	2b05      	cmp	r3, #5
 80459d8:	f200 80ac 	bhi.w	8045b34 <USBD_GetDescriptor+0x204>
 80459dc:	a201      	add	r2, pc, #4	@ (adr r2, 80459e4 <USBD_GetDescriptor+0xb4>)
 80459de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80459e2:	bf00      	nop
 80459e4:	080459fd 	.word	0x080459fd
 80459e8:	08045a31 	.word	0x08045a31
 80459ec:	08045a65 	.word	0x08045a65
 80459f0:	08045a99 	.word	0x08045a99
 80459f4:	08045acd 	.word	0x08045acd
 80459f8:	08045b01 	.word	0x08045b01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80459fc:	687b      	ldr	r3, [r7, #4]
 80459fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a02:	685b      	ldr	r3, [r3, #4]
 8045a04:	2b00      	cmp	r3, #0
 8045a06:	d00b      	beq.n	8045a20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8045a08:	687b      	ldr	r3, [r7, #4]
 8045a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a0e:	685b      	ldr	r3, [r3, #4]
 8045a10:	687a      	ldr	r2, [r7, #4]
 8045a12:	7c12      	ldrb	r2, [r2, #16]
 8045a14:	f107 0108 	add.w	r1, r7, #8
 8045a18:	4610      	mov	r0, r2
 8045a1a:	4798      	blx	r3
 8045a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045a1e:	e091      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045a20:	6839      	ldr	r1, [r7, #0]
 8045a22:	6878      	ldr	r0, [r7, #4]
 8045a24:	f000 facb 	bl	8045fbe <USBD_CtlError>
            err++;
 8045a28:	7afb      	ldrb	r3, [r7, #11]
 8045a2a:	3301      	adds	r3, #1
 8045a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8045a2e:	e089      	b.n	8045b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8045a30:	687b      	ldr	r3, [r7, #4]
 8045a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a36:	689b      	ldr	r3, [r3, #8]
 8045a38:	2b00      	cmp	r3, #0
 8045a3a:	d00b      	beq.n	8045a54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8045a3c:	687b      	ldr	r3, [r7, #4]
 8045a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a42:	689b      	ldr	r3, [r3, #8]
 8045a44:	687a      	ldr	r2, [r7, #4]
 8045a46:	7c12      	ldrb	r2, [r2, #16]
 8045a48:	f107 0108 	add.w	r1, r7, #8
 8045a4c:	4610      	mov	r0, r2
 8045a4e:	4798      	blx	r3
 8045a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045a52:	e077      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045a54:	6839      	ldr	r1, [r7, #0]
 8045a56:	6878      	ldr	r0, [r7, #4]
 8045a58:	f000 fab1 	bl	8045fbe <USBD_CtlError>
            err++;
 8045a5c:	7afb      	ldrb	r3, [r7, #11]
 8045a5e:	3301      	adds	r3, #1
 8045a60:	72fb      	strb	r3, [r7, #11]
          break;
 8045a62:	e06f      	b.n	8045b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8045a64:	687b      	ldr	r3, [r7, #4]
 8045a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a6a:	68db      	ldr	r3, [r3, #12]
 8045a6c:	2b00      	cmp	r3, #0
 8045a6e:	d00b      	beq.n	8045a88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8045a70:	687b      	ldr	r3, [r7, #4]
 8045a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a76:	68db      	ldr	r3, [r3, #12]
 8045a78:	687a      	ldr	r2, [r7, #4]
 8045a7a:	7c12      	ldrb	r2, [r2, #16]
 8045a7c:	f107 0108 	add.w	r1, r7, #8
 8045a80:	4610      	mov	r0, r2
 8045a82:	4798      	blx	r3
 8045a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045a86:	e05d      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045a88:	6839      	ldr	r1, [r7, #0]
 8045a8a:	6878      	ldr	r0, [r7, #4]
 8045a8c:	f000 fa97 	bl	8045fbe <USBD_CtlError>
            err++;
 8045a90:	7afb      	ldrb	r3, [r7, #11]
 8045a92:	3301      	adds	r3, #1
 8045a94:	72fb      	strb	r3, [r7, #11]
          break;
 8045a96:	e055      	b.n	8045b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8045a98:	687b      	ldr	r3, [r7, #4]
 8045a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045a9e:	691b      	ldr	r3, [r3, #16]
 8045aa0:	2b00      	cmp	r3, #0
 8045aa2:	d00b      	beq.n	8045abc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8045aa4:	687b      	ldr	r3, [r7, #4]
 8045aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045aaa:	691b      	ldr	r3, [r3, #16]
 8045aac:	687a      	ldr	r2, [r7, #4]
 8045aae:	7c12      	ldrb	r2, [r2, #16]
 8045ab0:	f107 0108 	add.w	r1, r7, #8
 8045ab4:	4610      	mov	r0, r2
 8045ab6:	4798      	blx	r3
 8045ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045aba:	e043      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045abc:	6839      	ldr	r1, [r7, #0]
 8045abe:	6878      	ldr	r0, [r7, #4]
 8045ac0:	f000 fa7d 	bl	8045fbe <USBD_CtlError>
            err++;
 8045ac4:	7afb      	ldrb	r3, [r7, #11]
 8045ac6:	3301      	adds	r3, #1
 8045ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8045aca:	e03b      	b.n	8045b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8045acc:	687b      	ldr	r3, [r7, #4]
 8045ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045ad2:	695b      	ldr	r3, [r3, #20]
 8045ad4:	2b00      	cmp	r3, #0
 8045ad6:	d00b      	beq.n	8045af0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8045ad8:	687b      	ldr	r3, [r7, #4]
 8045ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045ade:	695b      	ldr	r3, [r3, #20]
 8045ae0:	687a      	ldr	r2, [r7, #4]
 8045ae2:	7c12      	ldrb	r2, [r2, #16]
 8045ae4:	f107 0108 	add.w	r1, r7, #8
 8045ae8:	4610      	mov	r0, r2
 8045aea:	4798      	blx	r3
 8045aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045aee:	e029      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045af0:	6839      	ldr	r1, [r7, #0]
 8045af2:	6878      	ldr	r0, [r7, #4]
 8045af4:	f000 fa63 	bl	8045fbe <USBD_CtlError>
            err++;
 8045af8:	7afb      	ldrb	r3, [r7, #11]
 8045afa:	3301      	adds	r3, #1
 8045afc:	72fb      	strb	r3, [r7, #11]
          break;
 8045afe:	e021      	b.n	8045b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8045b00:	687b      	ldr	r3, [r7, #4]
 8045b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045b06:	699b      	ldr	r3, [r3, #24]
 8045b08:	2b00      	cmp	r3, #0
 8045b0a:	d00b      	beq.n	8045b24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8045b0c:	687b      	ldr	r3, [r7, #4]
 8045b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8045b12:	699b      	ldr	r3, [r3, #24]
 8045b14:	687a      	ldr	r2, [r7, #4]
 8045b16:	7c12      	ldrb	r2, [r2, #16]
 8045b18:	f107 0108 	add.w	r1, r7, #8
 8045b1c:	4610      	mov	r0, r2
 8045b1e:	4798      	blx	r3
 8045b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045b22:	e00f      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045b24:	6839      	ldr	r1, [r7, #0]
 8045b26:	6878      	ldr	r0, [r7, #4]
 8045b28:	f000 fa49 	bl	8045fbe <USBD_CtlError>
            err++;
 8045b2c:	7afb      	ldrb	r3, [r7, #11]
 8045b2e:	3301      	adds	r3, #1
 8045b30:	72fb      	strb	r3, [r7, #11]
          break;
 8045b32:	e007      	b.n	8045b44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8045b34:	6839      	ldr	r1, [r7, #0]
 8045b36:	6878      	ldr	r0, [r7, #4]
 8045b38:	f000 fa41 	bl	8045fbe <USBD_CtlError>
          err++;
 8045b3c:	7afb      	ldrb	r3, [r7, #11]
 8045b3e:	3301      	adds	r3, #1
 8045b40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8045b42:	bf00      	nop
      }
      break;
 8045b44:	e037      	b.n	8045bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8045b46:	687b      	ldr	r3, [r7, #4]
 8045b48:	7c1b      	ldrb	r3, [r3, #16]
 8045b4a:	2b00      	cmp	r3, #0
 8045b4c:	d109      	bne.n	8045b62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8045b4e:	687b      	ldr	r3, [r7, #4]
 8045b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8045b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8045b56:	f107 0208 	add.w	r2, r7, #8
 8045b5a:	4610      	mov	r0, r2
 8045b5c:	4798      	blx	r3
 8045b5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8045b60:	e029      	b.n	8045bb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8045b62:	6839      	ldr	r1, [r7, #0]
 8045b64:	6878      	ldr	r0, [r7, #4]
 8045b66:	f000 fa2a 	bl	8045fbe <USBD_CtlError>
        err++;
 8045b6a:	7afb      	ldrb	r3, [r7, #11]
 8045b6c:	3301      	adds	r3, #1
 8045b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8045b70:	e021      	b.n	8045bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8045b72:	687b      	ldr	r3, [r7, #4]
 8045b74:	7c1b      	ldrb	r3, [r3, #16]
 8045b76:	2b00      	cmp	r3, #0
 8045b78:	d10d      	bne.n	8045b96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8045b7a:	687b      	ldr	r3, [r7, #4]
 8045b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8045b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8045b82:	f107 0208 	add.w	r2, r7, #8
 8045b86:	4610      	mov	r0, r2
 8045b88:	4798      	blx	r3
 8045b8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8045b8c:	68fb      	ldr	r3, [r7, #12]
 8045b8e:	3301      	adds	r3, #1
 8045b90:	2207      	movs	r2, #7
 8045b92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8045b94:	e00f      	b.n	8045bb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8045b96:	6839      	ldr	r1, [r7, #0]
 8045b98:	6878      	ldr	r0, [r7, #4]
 8045b9a:	f000 fa10 	bl	8045fbe <USBD_CtlError>
        err++;
 8045b9e:	7afb      	ldrb	r3, [r7, #11]
 8045ba0:	3301      	adds	r3, #1
 8045ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8045ba4:	e007      	b.n	8045bb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8045ba6:	6839      	ldr	r1, [r7, #0]
 8045ba8:	6878      	ldr	r0, [r7, #4]
 8045baa:	f000 fa08 	bl	8045fbe <USBD_CtlError>
      err++;
 8045bae:	7afb      	ldrb	r3, [r7, #11]
 8045bb0:	3301      	adds	r3, #1
 8045bb2:	72fb      	strb	r3, [r7, #11]
      break;
 8045bb4:	bf00      	nop
  }

  if (err != 0U)
 8045bb6:	7afb      	ldrb	r3, [r7, #11]
 8045bb8:	2b00      	cmp	r3, #0
 8045bba:	d11e      	bne.n	8045bfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8045bbc:	683b      	ldr	r3, [r7, #0]
 8045bbe:	88db      	ldrh	r3, [r3, #6]
 8045bc0:	2b00      	cmp	r3, #0
 8045bc2:	d016      	beq.n	8045bf2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8045bc4:	893b      	ldrh	r3, [r7, #8]
 8045bc6:	2b00      	cmp	r3, #0
 8045bc8:	d00e      	beq.n	8045be8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8045bca:	683b      	ldr	r3, [r7, #0]
 8045bcc:	88da      	ldrh	r2, [r3, #6]
 8045bce:	893b      	ldrh	r3, [r7, #8]
 8045bd0:	4293      	cmp	r3, r2
 8045bd2:	bf28      	it	cs
 8045bd4:	4613      	movcs	r3, r2
 8045bd6:	b29b      	uxth	r3, r3
 8045bd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8045bda:	893b      	ldrh	r3, [r7, #8]
 8045bdc:	461a      	mov	r2, r3
 8045bde:	68f9      	ldr	r1, [r7, #12]
 8045be0:	6878      	ldr	r0, [r7, #4]
 8045be2:	f000 fa69 	bl	80460b8 <USBD_CtlSendData>
 8045be6:	e009      	b.n	8045bfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8045be8:	6839      	ldr	r1, [r7, #0]
 8045bea:	6878      	ldr	r0, [r7, #4]
 8045bec:	f000 f9e7 	bl	8045fbe <USBD_CtlError>
 8045bf0:	e004      	b.n	8045bfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8045bf2:	6878      	ldr	r0, [r7, #4]
 8045bf4:	f000 faba 	bl	804616c <USBD_CtlSendStatus>
 8045bf8:	e000      	b.n	8045bfc <USBD_GetDescriptor+0x2cc>
    return;
 8045bfa:	bf00      	nop
  }
}
 8045bfc:	3710      	adds	r7, #16
 8045bfe:	46bd      	mov	sp, r7
 8045c00:	bd80      	pop	{r7, pc}
 8045c02:	bf00      	nop

08045c04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045c04:	b580      	push	{r7, lr}
 8045c06:	b084      	sub	sp, #16
 8045c08:	af00      	add	r7, sp, #0
 8045c0a:	6078      	str	r0, [r7, #4]
 8045c0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8045c0e:	683b      	ldr	r3, [r7, #0]
 8045c10:	889b      	ldrh	r3, [r3, #4]
 8045c12:	2b00      	cmp	r3, #0
 8045c14:	d131      	bne.n	8045c7a <USBD_SetAddress+0x76>
 8045c16:	683b      	ldr	r3, [r7, #0]
 8045c18:	88db      	ldrh	r3, [r3, #6]
 8045c1a:	2b00      	cmp	r3, #0
 8045c1c:	d12d      	bne.n	8045c7a <USBD_SetAddress+0x76>
 8045c1e:	683b      	ldr	r3, [r7, #0]
 8045c20:	885b      	ldrh	r3, [r3, #2]
 8045c22:	2b7f      	cmp	r3, #127	@ 0x7f
 8045c24:	d829      	bhi.n	8045c7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8045c26:	683b      	ldr	r3, [r7, #0]
 8045c28:	885b      	ldrh	r3, [r3, #2]
 8045c2a:	b2db      	uxtb	r3, r3
 8045c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045c30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045c32:	687b      	ldr	r3, [r7, #4]
 8045c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045c38:	b2db      	uxtb	r3, r3
 8045c3a:	2b03      	cmp	r3, #3
 8045c3c:	d104      	bne.n	8045c48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8045c3e:	6839      	ldr	r1, [r7, #0]
 8045c40:	6878      	ldr	r0, [r7, #4]
 8045c42:	f000 f9bc 	bl	8045fbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045c46:	e01d      	b.n	8045c84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8045c48:	687b      	ldr	r3, [r7, #4]
 8045c4a:	7bfa      	ldrb	r2, [r7, #15]
 8045c4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8045c50:	7bfb      	ldrb	r3, [r7, #15]
 8045c52:	4619      	mov	r1, r3
 8045c54:	6878      	ldr	r0, [r7, #4]
 8045c56:	f000 fedb 	bl	8046a10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8045c5a:	6878      	ldr	r0, [r7, #4]
 8045c5c:	f000 fa86 	bl	804616c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8045c60:	7bfb      	ldrb	r3, [r7, #15]
 8045c62:	2b00      	cmp	r3, #0
 8045c64:	d004      	beq.n	8045c70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8045c66:	687b      	ldr	r3, [r7, #4]
 8045c68:	2202      	movs	r2, #2
 8045c6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045c6e:	e009      	b.n	8045c84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8045c70:	687b      	ldr	r3, [r7, #4]
 8045c72:	2201      	movs	r2, #1
 8045c74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045c78:	e004      	b.n	8045c84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8045c7a:	6839      	ldr	r1, [r7, #0]
 8045c7c:	6878      	ldr	r0, [r7, #4]
 8045c7e:	f000 f99e 	bl	8045fbe <USBD_CtlError>
  }
}
 8045c82:	bf00      	nop
 8045c84:	bf00      	nop
 8045c86:	3710      	adds	r7, #16
 8045c88:	46bd      	mov	sp, r7
 8045c8a:	bd80      	pop	{r7, pc}

08045c8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045c8c:	b580      	push	{r7, lr}
 8045c8e:	b084      	sub	sp, #16
 8045c90:	af00      	add	r7, sp, #0
 8045c92:	6078      	str	r0, [r7, #4]
 8045c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8045c96:	2300      	movs	r3, #0
 8045c98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8045c9a:	683b      	ldr	r3, [r7, #0]
 8045c9c:	885b      	ldrh	r3, [r3, #2]
 8045c9e:	b2da      	uxtb	r2, r3
 8045ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045ca2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8045ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045ca6:	781b      	ldrb	r3, [r3, #0]
 8045ca8:	2b01      	cmp	r3, #1
 8045caa:	d905      	bls.n	8045cb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8045cac:	6839      	ldr	r1, [r7, #0]
 8045cae:	6878      	ldr	r0, [r7, #4]
 8045cb0:	f000 f985 	bl	8045fbe <USBD_CtlError>
    return USBD_FAIL;
 8045cb4:	2303      	movs	r3, #3
 8045cb6:	e08c      	b.n	8045dd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8045cb8:	687b      	ldr	r3, [r7, #4]
 8045cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045cbe:	b2db      	uxtb	r3, r3
 8045cc0:	2b02      	cmp	r3, #2
 8045cc2:	d002      	beq.n	8045cca <USBD_SetConfig+0x3e>
 8045cc4:	2b03      	cmp	r3, #3
 8045cc6:	d029      	beq.n	8045d1c <USBD_SetConfig+0x90>
 8045cc8:	e075      	b.n	8045db6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8045cca:	4b44      	ldr	r3, [pc, #272]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045ccc:	781b      	ldrb	r3, [r3, #0]
 8045cce:	2b00      	cmp	r3, #0
 8045cd0:	d020      	beq.n	8045d14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8045cd2:	4b42      	ldr	r3, [pc, #264]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045cd4:	781b      	ldrb	r3, [r3, #0]
 8045cd6:	461a      	mov	r2, r3
 8045cd8:	687b      	ldr	r3, [r7, #4]
 8045cda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8045cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045cde:	781b      	ldrb	r3, [r3, #0]
 8045ce0:	4619      	mov	r1, r3
 8045ce2:	6878      	ldr	r0, [r7, #4]
 8045ce4:	f7fe ffe3 	bl	8044cae <USBD_SetClassConfig>
 8045ce8:	4603      	mov	r3, r0
 8045cea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8045cec:	7bfb      	ldrb	r3, [r7, #15]
 8045cee:	2b00      	cmp	r3, #0
 8045cf0:	d008      	beq.n	8045d04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8045cf2:	6839      	ldr	r1, [r7, #0]
 8045cf4:	6878      	ldr	r0, [r7, #4]
 8045cf6:	f000 f962 	bl	8045fbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8045cfa:	687b      	ldr	r3, [r7, #4]
 8045cfc:	2202      	movs	r2, #2
 8045cfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8045d02:	e065      	b.n	8045dd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8045d04:	6878      	ldr	r0, [r7, #4]
 8045d06:	f000 fa31 	bl	804616c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8045d0a:	687b      	ldr	r3, [r7, #4]
 8045d0c:	2203      	movs	r2, #3
 8045d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8045d12:	e05d      	b.n	8045dd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8045d14:	6878      	ldr	r0, [r7, #4]
 8045d16:	f000 fa29 	bl	804616c <USBD_CtlSendStatus>
      break;
 8045d1a:	e059      	b.n	8045dd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8045d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045d1e:	781b      	ldrb	r3, [r3, #0]
 8045d20:	2b00      	cmp	r3, #0
 8045d22:	d112      	bne.n	8045d4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8045d24:	687b      	ldr	r3, [r7, #4]
 8045d26:	2202      	movs	r2, #2
 8045d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8045d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045d2e:	781b      	ldrb	r3, [r3, #0]
 8045d30:	461a      	mov	r2, r3
 8045d32:	687b      	ldr	r3, [r7, #4]
 8045d34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8045d36:	4b29      	ldr	r3, [pc, #164]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045d38:	781b      	ldrb	r3, [r3, #0]
 8045d3a:	4619      	mov	r1, r3
 8045d3c:	6878      	ldr	r0, [r7, #4]
 8045d3e:	f7fe ffd2 	bl	8044ce6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8045d42:	6878      	ldr	r0, [r7, #4]
 8045d44:	f000 fa12 	bl	804616c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8045d48:	e042      	b.n	8045dd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8045d4a:	4b24      	ldr	r3, [pc, #144]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045d4c:	781b      	ldrb	r3, [r3, #0]
 8045d4e:	461a      	mov	r2, r3
 8045d50:	687b      	ldr	r3, [r7, #4]
 8045d52:	685b      	ldr	r3, [r3, #4]
 8045d54:	429a      	cmp	r2, r3
 8045d56:	d02a      	beq.n	8045dae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8045d58:	687b      	ldr	r3, [r7, #4]
 8045d5a:	685b      	ldr	r3, [r3, #4]
 8045d5c:	b2db      	uxtb	r3, r3
 8045d5e:	4619      	mov	r1, r3
 8045d60:	6878      	ldr	r0, [r7, #4]
 8045d62:	f7fe ffc0 	bl	8044ce6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8045d66:	4b1d      	ldr	r3, [pc, #116]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045d68:	781b      	ldrb	r3, [r3, #0]
 8045d6a:	461a      	mov	r2, r3
 8045d6c:	687b      	ldr	r3, [r7, #4]
 8045d6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8045d70:	4b1a      	ldr	r3, [pc, #104]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045d72:	781b      	ldrb	r3, [r3, #0]
 8045d74:	4619      	mov	r1, r3
 8045d76:	6878      	ldr	r0, [r7, #4]
 8045d78:	f7fe ff99 	bl	8044cae <USBD_SetClassConfig>
 8045d7c:	4603      	mov	r3, r0
 8045d7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8045d80:	7bfb      	ldrb	r3, [r7, #15]
 8045d82:	2b00      	cmp	r3, #0
 8045d84:	d00f      	beq.n	8045da6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8045d86:	6839      	ldr	r1, [r7, #0]
 8045d88:	6878      	ldr	r0, [r7, #4]
 8045d8a:	f000 f918 	bl	8045fbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8045d8e:	687b      	ldr	r3, [r7, #4]
 8045d90:	685b      	ldr	r3, [r3, #4]
 8045d92:	b2db      	uxtb	r3, r3
 8045d94:	4619      	mov	r1, r3
 8045d96:	6878      	ldr	r0, [r7, #4]
 8045d98:	f7fe ffa5 	bl	8044ce6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8045d9c:	687b      	ldr	r3, [r7, #4]
 8045d9e:	2202      	movs	r2, #2
 8045da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8045da4:	e014      	b.n	8045dd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8045da6:	6878      	ldr	r0, [r7, #4]
 8045da8:	f000 f9e0 	bl	804616c <USBD_CtlSendStatus>
      break;
 8045dac:	e010      	b.n	8045dd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8045dae:	6878      	ldr	r0, [r7, #4]
 8045db0:	f000 f9dc 	bl	804616c <USBD_CtlSendStatus>
      break;
 8045db4:	e00c      	b.n	8045dd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8045db6:	6839      	ldr	r1, [r7, #0]
 8045db8:	6878      	ldr	r0, [r7, #4]
 8045dba:	f000 f900 	bl	8045fbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8045dbe:	4b07      	ldr	r3, [pc, #28]	@ (8045ddc <USBD_SetConfig+0x150>)
 8045dc0:	781b      	ldrb	r3, [r3, #0]
 8045dc2:	4619      	mov	r1, r3
 8045dc4:	6878      	ldr	r0, [r7, #4]
 8045dc6:	f7fe ff8e 	bl	8044ce6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8045dca:	2303      	movs	r3, #3
 8045dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8045dce:	bf00      	nop
  }

  return ret;
 8045dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8045dd2:	4618      	mov	r0, r3
 8045dd4:	3710      	adds	r7, #16
 8045dd6:	46bd      	mov	sp, r7
 8045dd8:	bd80      	pop	{r7, pc}
 8045dda:	bf00      	nop
 8045ddc:	2000011c 	.word	0x2000011c

08045de0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045de0:	b580      	push	{r7, lr}
 8045de2:	b082      	sub	sp, #8
 8045de4:	af00      	add	r7, sp, #0
 8045de6:	6078      	str	r0, [r7, #4]
 8045de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8045dea:	683b      	ldr	r3, [r7, #0]
 8045dec:	88db      	ldrh	r3, [r3, #6]
 8045dee:	2b01      	cmp	r3, #1
 8045df0:	d004      	beq.n	8045dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8045df2:	6839      	ldr	r1, [r7, #0]
 8045df4:	6878      	ldr	r0, [r7, #4]
 8045df6:	f000 f8e2 	bl	8045fbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8045dfa:	e023      	b.n	8045e44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8045dfc:	687b      	ldr	r3, [r7, #4]
 8045dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045e02:	b2db      	uxtb	r3, r3
 8045e04:	2b02      	cmp	r3, #2
 8045e06:	dc02      	bgt.n	8045e0e <USBD_GetConfig+0x2e>
 8045e08:	2b00      	cmp	r3, #0
 8045e0a:	dc03      	bgt.n	8045e14 <USBD_GetConfig+0x34>
 8045e0c:	e015      	b.n	8045e3a <USBD_GetConfig+0x5a>
 8045e0e:	2b03      	cmp	r3, #3
 8045e10:	d00b      	beq.n	8045e2a <USBD_GetConfig+0x4a>
 8045e12:	e012      	b.n	8045e3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8045e14:	687b      	ldr	r3, [r7, #4]
 8045e16:	2200      	movs	r2, #0
 8045e18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8045e1a:	687b      	ldr	r3, [r7, #4]
 8045e1c:	3308      	adds	r3, #8
 8045e1e:	2201      	movs	r2, #1
 8045e20:	4619      	mov	r1, r3
 8045e22:	6878      	ldr	r0, [r7, #4]
 8045e24:	f000 f948 	bl	80460b8 <USBD_CtlSendData>
        break;
 8045e28:	e00c      	b.n	8045e44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8045e2a:	687b      	ldr	r3, [r7, #4]
 8045e2c:	3304      	adds	r3, #4
 8045e2e:	2201      	movs	r2, #1
 8045e30:	4619      	mov	r1, r3
 8045e32:	6878      	ldr	r0, [r7, #4]
 8045e34:	f000 f940 	bl	80460b8 <USBD_CtlSendData>
        break;
 8045e38:	e004      	b.n	8045e44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8045e3a:	6839      	ldr	r1, [r7, #0]
 8045e3c:	6878      	ldr	r0, [r7, #4]
 8045e3e:	f000 f8be 	bl	8045fbe <USBD_CtlError>
        break;
 8045e42:	bf00      	nop
}
 8045e44:	bf00      	nop
 8045e46:	3708      	adds	r7, #8
 8045e48:	46bd      	mov	sp, r7
 8045e4a:	bd80      	pop	{r7, pc}

08045e4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045e4c:	b580      	push	{r7, lr}
 8045e4e:	b082      	sub	sp, #8
 8045e50:	af00      	add	r7, sp, #0
 8045e52:	6078      	str	r0, [r7, #4]
 8045e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8045e56:	687b      	ldr	r3, [r7, #4]
 8045e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045e5c:	b2db      	uxtb	r3, r3
 8045e5e:	3b01      	subs	r3, #1
 8045e60:	2b02      	cmp	r3, #2
 8045e62:	d81e      	bhi.n	8045ea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8045e64:	683b      	ldr	r3, [r7, #0]
 8045e66:	88db      	ldrh	r3, [r3, #6]
 8045e68:	2b02      	cmp	r3, #2
 8045e6a:	d004      	beq.n	8045e76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8045e6c:	6839      	ldr	r1, [r7, #0]
 8045e6e:	6878      	ldr	r0, [r7, #4]
 8045e70:	f000 f8a5 	bl	8045fbe <USBD_CtlError>
        break;
 8045e74:	e01a      	b.n	8045eac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8045e76:	687b      	ldr	r3, [r7, #4]
 8045e78:	2201      	movs	r2, #1
 8045e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8045e7c:	687b      	ldr	r3, [r7, #4]
 8045e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8045e82:	2b00      	cmp	r3, #0
 8045e84:	d005      	beq.n	8045e92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8045e86:	687b      	ldr	r3, [r7, #4]
 8045e88:	68db      	ldr	r3, [r3, #12]
 8045e8a:	f043 0202 	orr.w	r2, r3, #2
 8045e8e:	687b      	ldr	r3, [r7, #4]
 8045e90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8045e92:	687b      	ldr	r3, [r7, #4]
 8045e94:	330c      	adds	r3, #12
 8045e96:	2202      	movs	r2, #2
 8045e98:	4619      	mov	r1, r3
 8045e9a:	6878      	ldr	r0, [r7, #4]
 8045e9c:	f000 f90c 	bl	80460b8 <USBD_CtlSendData>
      break;
 8045ea0:	e004      	b.n	8045eac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8045ea2:	6839      	ldr	r1, [r7, #0]
 8045ea4:	6878      	ldr	r0, [r7, #4]
 8045ea6:	f000 f88a 	bl	8045fbe <USBD_CtlError>
      break;
 8045eaa:	bf00      	nop
  }
}
 8045eac:	bf00      	nop
 8045eae:	3708      	adds	r7, #8
 8045eb0:	46bd      	mov	sp, r7
 8045eb2:	bd80      	pop	{r7, pc}

08045eb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045eb4:	b580      	push	{r7, lr}
 8045eb6:	b082      	sub	sp, #8
 8045eb8:	af00      	add	r7, sp, #0
 8045eba:	6078      	str	r0, [r7, #4]
 8045ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8045ebe:	683b      	ldr	r3, [r7, #0]
 8045ec0:	885b      	ldrh	r3, [r3, #2]
 8045ec2:	2b01      	cmp	r3, #1
 8045ec4:	d107      	bne.n	8045ed6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8045ec6:	687b      	ldr	r3, [r7, #4]
 8045ec8:	2201      	movs	r2, #1
 8045eca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8045ece:	6878      	ldr	r0, [r7, #4]
 8045ed0:	f000 f94c 	bl	804616c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8045ed4:	e013      	b.n	8045efe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8045ed6:	683b      	ldr	r3, [r7, #0]
 8045ed8:	885b      	ldrh	r3, [r3, #2]
 8045eda:	2b02      	cmp	r3, #2
 8045edc:	d10b      	bne.n	8045ef6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8045ede:	683b      	ldr	r3, [r7, #0]
 8045ee0:	889b      	ldrh	r3, [r3, #4]
 8045ee2:	0a1b      	lsrs	r3, r3, #8
 8045ee4:	b29b      	uxth	r3, r3
 8045ee6:	b2da      	uxtb	r2, r3
 8045ee8:	687b      	ldr	r3, [r7, #4]
 8045eea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8045eee:	6878      	ldr	r0, [r7, #4]
 8045ef0:	f000 f93c 	bl	804616c <USBD_CtlSendStatus>
}
 8045ef4:	e003      	b.n	8045efe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8045ef6:	6839      	ldr	r1, [r7, #0]
 8045ef8:	6878      	ldr	r0, [r7, #4]
 8045efa:	f000 f860 	bl	8045fbe <USBD_CtlError>
}
 8045efe:	bf00      	nop
 8045f00:	3708      	adds	r7, #8
 8045f02:	46bd      	mov	sp, r7
 8045f04:	bd80      	pop	{r7, pc}

08045f06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045f06:	b580      	push	{r7, lr}
 8045f08:	b082      	sub	sp, #8
 8045f0a:	af00      	add	r7, sp, #0
 8045f0c:	6078      	str	r0, [r7, #4]
 8045f0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8045f10:	687b      	ldr	r3, [r7, #4]
 8045f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8045f16:	b2db      	uxtb	r3, r3
 8045f18:	3b01      	subs	r3, #1
 8045f1a:	2b02      	cmp	r3, #2
 8045f1c:	d80b      	bhi.n	8045f36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8045f1e:	683b      	ldr	r3, [r7, #0]
 8045f20:	885b      	ldrh	r3, [r3, #2]
 8045f22:	2b01      	cmp	r3, #1
 8045f24:	d10c      	bne.n	8045f40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8045f26:	687b      	ldr	r3, [r7, #4]
 8045f28:	2200      	movs	r2, #0
 8045f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8045f2e:	6878      	ldr	r0, [r7, #4]
 8045f30:	f000 f91c 	bl	804616c <USBD_CtlSendStatus>
      }
      break;
 8045f34:	e004      	b.n	8045f40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8045f36:	6839      	ldr	r1, [r7, #0]
 8045f38:	6878      	ldr	r0, [r7, #4]
 8045f3a:	f000 f840 	bl	8045fbe <USBD_CtlError>
      break;
 8045f3e:	e000      	b.n	8045f42 <USBD_ClrFeature+0x3c>
      break;
 8045f40:	bf00      	nop
  }
}
 8045f42:	bf00      	nop
 8045f44:	3708      	adds	r7, #8
 8045f46:	46bd      	mov	sp, r7
 8045f48:	bd80      	pop	{r7, pc}

08045f4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8045f4a:	b580      	push	{r7, lr}
 8045f4c:	b084      	sub	sp, #16
 8045f4e:	af00      	add	r7, sp, #0
 8045f50:	6078      	str	r0, [r7, #4]
 8045f52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8045f54:	683b      	ldr	r3, [r7, #0]
 8045f56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8045f58:	68fb      	ldr	r3, [r7, #12]
 8045f5a:	781a      	ldrb	r2, [r3, #0]
 8045f5c:	687b      	ldr	r3, [r7, #4]
 8045f5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8045f60:	68fb      	ldr	r3, [r7, #12]
 8045f62:	3301      	adds	r3, #1
 8045f64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8045f66:	68fb      	ldr	r3, [r7, #12]
 8045f68:	781a      	ldrb	r2, [r3, #0]
 8045f6a:	687b      	ldr	r3, [r7, #4]
 8045f6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8045f6e:	68fb      	ldr	r3, [r7, #12]
 8045f70:	3301      	adds	r3, #1
 8045f72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8045f74:	68f8      	ldr	r0, [r7, #12]
 8045f76:	f7ff fa40 	bl	80453fa <SWAPBYTE>
 8045f7a:	4603      	mov	r3, r0
 8045f7c:	461a      	mov	r2, r3
 8045f7e:	687b      	ldr	r3, [r7, #4]
 8045f80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8045f82:	68fb      	ldr	r3, [r7, #12]
 8045f84:	3301      	adds	r3, #1
 8045f86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8045f88:	68fb      	ldr	r3, [r7, #12]
 8045f8a:	3301      	adds	r3, #1
 8045f8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8045f8e:	68f8      	ldr	r0, [r7, #12]
 8045f90:	f7ff fa33 	bl	80453fa <SWAPBYTE>
 8045f94:	4603      	mov	r3, r0
 8045f96:	461a      	mov	r2, r3
 8045f98:	687b      	ldr	r3, [r7, #4]
 8045f9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8045f9c:	68fb      	ldr	r3, [r7, #12]
 8045f9e:	3301      	adds	r3, #1
 8045fa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8045fa2:	68fb      	ldr	r3, [r7, #12]
 8045fa4:	3301      	adds	r3, #1
 8045fa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8045fa8:	68f8      	ldr	r0, [r7, #12]
 8045faa:	f7ff fa26 	bl	80453fa <SWAPBYTE>
 8045fae:	4603      	mov	r3, r0
 8045fb0:	461a      	mov	r2, r3
 8045fb2:	687b      	ldr	r3, [r7, #4]
 8045fb4:	80da      	strh	r2, [r3, #6]
}
 8045fb6:	bf00      	nop
 8045fb8:	3710      	adds	r7, #16
 8045fba:	46bd      	mov	sp, r7
 8045fbc:	bd80      	pop	{r7, pc}

08045fbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045fbe:	b580      	push	{r7, lr}
 8045fc0:	b082      	sub	sp, #8
 8045fc2:	af00      	add	r7, sp, #0
 8045fc4:	6078      	str	r0, [r7, #4]
 8045fc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8045fc8:	2180      	movs	r1, #128	@ 0x80
 8045fca:	6878      	ldr	r0, [r7, #4]
 8045fcc:	f000 fcb6 	bl	804693c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8045fd0:	2100      	movs	r1, #0
 8045fd2:	6878      	ldr	r0, [r7, #4]
 8045fd4:	f000 fcb2 	bl	804693c <USBD_LL_StallEP>
}
 8045fd8:	bf00      	nop
 8045fda:	3708      	adds	r7, #8
 8045fdc:	46bd      	mov	sp, r7
 8045fde:	bd80      	pop	{r7, pc}

08045fe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8045fe0:	b580      	push	{r7, lr}
 8045fe2:	b086      	sub	sp, #24
 8045fe4:	af00      	add	r7, sp, #0
 8045fe6:	60f8      	str	r0, [r7, #12]
 8045fe8:	60b9      	str	r1, [r7, #8]
 8045fea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8045fec:	2300      	movs	r3, #0
 8045fee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8045ff0:	68fb      	ldr	r3, [r7, #12]
 8045ff2:	2b00      	cmp	r3, #0
 8045ff4:	d042      	beq.n	804607c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8045ff6:	68fb      	ldr	r3, [r7, #12]
 8045ff8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8045ffa:	6938      	ldr	r0, [r7, #16]
 8045ffc:	f000 f842 	bl	8046084 <USBD_GetLen>
 8046000:	4603      	mov	r3, r0
 8046002:	3301      	adds	r3, #1
 8046004:	005b      	lsls	r3, r3, #1
 8046006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804600a:	d808      	bhi.n	804601e <USBD_GetString+0x3e>
 804600c:	6938      	ldr	r0, [r7, #16]
 804600e:	f000 f839 	bl	8046084 <USBD_GetLen>
 8046012:	4603      	mov	r3, r0
 8046014:	3301      	adds	r3, #1
 8046016:	b29b      	uxth	r3, r3
 8046018:	005b      	lsls	r3, r3, #1
 804601a:	b29a      	uxth	r2, r3
 804601c:	e001      	b.n	8046022 <USBD_GetString+0x42>
 804601e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8046022:	687b      	ldr	r3, [r7, #4]
 8046024:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8046026:	7dfb      	ldrb	r3, [r7, #23]
 8046028:	68ba      	ldr	r2, [r7, #8]
 804602a:	4413      	add	r3, r2
 804602c:	687a      	ldr	r2, [r7, #4]
 804602e:	7812      	ldrb	r2, [r2, #0]
 8046030:	701a      	strb	r2, [r3, #0]
  idx++;
 8046032:	7dfb      	ldrb	r3, [r7, #23]
 8046034:	3301      	adds	r3, #1
 8046036:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8046038:	7dfb      	ldrb	r3, [r7, #23]
 804603a:	68ba      	ldr	r2, [r7, #8]
 804603c:	4413      	add	r3, r2
 804603e:	2203      	movs	r2, #3
 8046040:	701a      	strb	r2, [r3, #0]
  idx++;
 8046042:	7dfb      	ldrb	r3, [r7, #23]
 8046044:	3301      	adds	r3, #1
 8046046:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8046048:	e013      	b.n	8046072 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 804604a:	7dfb      	ldrb	r3, [r7, #23]
 804604c:	68ba      	ldr	r2, [r7, #8]
 804604e:	4413      	add	r3, r2
 8046050:	693a      	ldr	r2, [r7, #16]
 8046052:	7812      	ldrb	r2, [r2, #0]
 8046054:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8046056:	693b      	ldr	r3, [r7, #16]
 8046058:	3301      	adds	r3, #1
 804605a:	613b      	str	r3, [r7, #16]
    idx++;
 804605c:	7dfb      	ldrb	r3, [r7, #23]
 804605e:	3301      	adds	r3, #1
 8046060:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8046062:	7dfb      	ldrb	r3, [r7, #23]
 8046064:	68ba      	ldr	r2, [r7, #8]
 8046066:	4413      	add	r3, r2
 8046068:	2200      	movs	r2, #0
 804606a:	701a      	strb	r2, [r3, #0]
    idx++;
 804606c:	7dfb      	ldrb	r3, [r7, #23]
 804606e:	3301      	adds	r3, #1
 8046070:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8046072:	693b      	ldr	r3, [r7, #16]
 8046074:	781b      	ldrb	r3, [r3, #0]
 8046076:	2b00      	cmp	r3, #0
 8046078:	d1e7      	bne.n	804604a <USBD_GetString+0x6a>
 804607a:	e000      	b.n	804607e <USBD_GetString+0x9e>
    return;
 804607c:	bf00      	nop
  }
}
 804607e:	3718      	adds	r7, #24
 8046080:	46bd      	mov	sp, r7
 8046082:	bd80      	pop	{r7, pc}

08046084 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8046084:	b480      	push	{r7}
 8046086:	b085      	sub	sp, #20
 8046088:	af00      	add	r7, sp, #0
 804608a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 804608c:	2300      	movs	r3, #0
 804608e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8046090:	687b      	ldr	r3, [r7, #4]
 8046092:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8046094:	e005      	b.n	80460a2 <USBD_GetLen+0x1e>
  {
    len++;
 8046096:	7bfb      	ldrb	r3, [r7, #15]
 8046098:	3301      	adds	r3, #1
 804609a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 804609c:	68bb      	ldr	r3, [r7, #8]
 804609e:	3301      	adds	r3, #1
 80460a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80460a2:	68bb      	ldr	r3, [r7, #8]
 80460a4:	781b      	ldrb	r3, [r3, #0]
 80460a6:	2b00      	cmp	r3, #0
 80460a8:	d1f5      	bne.n	8046096 <USBD_GetLen+0x12>
  }

  return len;
 80460aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80460ac:	4618      	mov	r0, r3
 80460ae:	3714      	adds	r7, #20
 80460b0:	46bd      	mov	sp, r7
 80460b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80460b6:	4770      	bx	lr

080460b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80460b8:	b580      	push	{r7, lr}
 80460ba:	b084      	sub	sp, #16
 80460bc:	af00      	add	r7, sp, #0
 80460be:	60f8      	str	r0, [r7, #12]
 80460c0:	60b9      	str	r1, [r7, #8]
 80460c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80460c4:	68fb      	ldr	r3, [r7, #12]
 80460c6:	2202      	movs	r2, #2
 80460c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80460cc:	68fb      	ldr	r3, [r7, #12]
 80460ce:	687a      	ldr	r2, [r7, #4]
 80460d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80460d2:	68fb      	ldr	r3, [r7, #12]
 80460d4:	687a      	ldr	r2, [r7, #4]
 80460d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80460d8:	687b      	ldr	r3, [r7, #4]
 80460da:	68ba      	ldr	r2, [r7, #8]
 80460dc:	2100      	movs	r1, #0
 80460de:	68f8      	ldr	r0, [r7, #12]
 80460e0:	f000 fcb5 	bl	8046a4e <USBD_LL_Transmit>

  return USBD_OK;
 80460e4:	2300      	movs	r3, #0
}
 80460e6:	4618      	mov	r0, r3
 80460e8:	3710      	adds	r7, #16
 80460ea:	46bd      	mov	sp, r7
 80460ec:	bd80      	pop	{r7, pc}

080460ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80460ee:	b580      	push	{r7, lr}
 80460f0:	b084      	sub	sp, #16
 80460f2:	af00      	add	r7, sp, #0
 80460f4:	60f8      	str	r0, [r7, #12]
 80460f6:	60b9      	str	r1, [r7, #8]
 80460f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80460fa:	687b      	ldr	r3, [r7, #4]
 80460fc:	68ba      	ldr	r2, [r7, #8]
 80460fe:	2100      	movs	r1, #0
 8046100:	68f8      	ldr	r0, [r7, #12]
 8046102:	f000 fca4 	bl	8046a4e <USBD_LL_Transmit>

  return USBD_OK;
 8046106:	2300      	movs	r3, #0
}
 8046108:	4618      	mov	r0, r3
 804610a:	3710      	adds	r7, #16
 804610c:	46bd      	mov	sp, r7
 804610e:	bd80      	pop	{r7, pc}

08046110 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8046110:	b580      	push	{r7, lr}
 8046112:	b084      	sub	sp, #16
 8046114:	af00      	add	r7, sp, #0
 8046116:	60f8      	str	r0, [r7, #12]
 8046118:	60b9      	str	r1, [r7, #8]
 804611a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 804611c:	68fb      	ldr	r3, [r7, #12]
 804611e:	2203      	movs	r2, #3
 8046120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8046124:	68fb      	ldr	r3, [r7, #12]
 8046126:	687a      	ldr	r2, [r7, #4]
 8046128:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 804612c:	68fb      	ldr	r3, [r7, #12]
 804612e:	687a      	ldr	r2, [r7, #4]
 8046130:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8046134:	687b      	ldr	r3, [r7, #4]
 8046136:	68ba      	ldr	r2, [r7, #8]
 8046138:	2100      	movs	r1, #0
 804613a:	68f8      	ldr	r0, [r7, #12]
 804613c:	f000 fca8 	bl	8046a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8046140:	2300      	movs	r3, #0
}
 8046142:	4618      	mov	r0, r3
 8046144:	3710      	adds	r7, #16
 8046146:	46bd      	mov	sp, r7
 8046148:	bd80      	pop	{r7, pc}

0804614a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 804614a:	b580      	push	{r7, lr}
 804614c:	b084      	sub	sp, #16
 804614e:	af00      	add	r7, sp, #0
 8046150:	60f8      	str	r0, [r7, #12]
 8046152:	60b9      	str	r1, [r7, #8]
 8046154:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8046156:	687b      	ldr	r3, [r7, #4]
 8046158:	68ba      	ldr	r2, [r7, #8]
 804615a:	2100      	movs	r1, #0
 804615c:	68f8      	ldr	r0, [r7, #12]
 804615e:	f000 fc97 	bl	8046a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8046162:	2300      	movs	r3, #0
}
 8046164:	4618      	mov	r0, r3
 8046166:	3710      	adds	r7, #16
 8046168:	46bd      	mov	sp, r7
 804616a:	bd80      	pop	{r7, pc}

0804616c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 804616c:	b580      	push	{r7, lr}
 804616e:	b082      	sub	sp, #8
 8046170:	af00      	add	r7, sp, #0
 8046172:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8046174:	687b      	ldr	r3, [r7, #4]
 8046176:	2204      	movs	r2, #4
 8046178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 804617c:	2300      	movs	r3, #0
 804617e:	2200      	movs	r2, #0
 8046180:	2100      	movs	r1, #0
 8046182:	6878      	ldr	r0, [r7, #4]
 8046184:	f000 fc63 	bl	8046a4e <USBD_LL_Transmit>

  return USBD_OK;
 8046188:	2300      	movs	r3, #0
}
 804618a:	4618      	mov	r0, r3
 804618c:	3708      	adds	r7, #8
 804618e:	46bd      	mov	sp, r7
 8046190:	bd80      	pop	{r7, pc}

08046192 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8046192:	b580      	push	{r7, lr}
 8046194:	b082      	sub	sp, #8
 8046196:	af00      	add	r7, sp, #0
 8046198:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 804619a:	687b      	ldr	r3, [r7, #4]
 804619c:	2205      	movs	r2, #5
 804619e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80461a2:	2300      	movs	r3, #0
 80461a4:	2200      	movs	r2, #0
 80461a6:	2100      	movs	r1, #0
 80461a8:	6878      	ldr	r0, [r7, #4]
 80461aa:	f000 fc71 	bl	8046a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80461ae:	2300      	movs	r3, #0
}
 80461b0:	4618      	mov	r0, r3
 80461b2:	3708      	adds	r7, #8
 80461b4:	46bd      	mov	sp, r7
 80461b6:	bd80      	pop	{r7, pc}

080461b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80461b8:	b580      	push	{r7, lr}
 80461ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80461bc:	2200      	movs	r2, #0
 80461be:	4912      	ldr	r1, [pc, #72]	@ (8046208 <MX_USB_DEVICE_Init+0x50>)
 80461c0:	4812      	ldr	r0, [pc, #72]	@ (804620c <MX_USB_DEVICE_Init+0x54>)
 80461c2:	f7fe fcf7 	bl	8044bb4 <USBD_Init>
 80461c6:	4603      	mov	r3, r0
 80461c8:	2b00      	cmp	r3, #0
 80461ca:	d001      	beq.n	80461d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80461cc:	f7fa fa52 	bl	8040674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80461d0:	490f      	ldr	r1, [pc, #60]	@ (8046210 <MX_USB_DEVICE_Init+0x58>)
 80461d2:	480e      	ldr	r0, [pc, #56]	@ (804620c <MX_USB_DEVICE_Init+0x54>)
 80461d4:	f7fe fd1e 	bl	8044c14 <USBD_RegisterClass>
 80461d8:	4603      	mov	r3, r0
 80461da:	2b00      	cmp	r3, #0
 80461dc:	d001      	beq.n	80461e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80461de:	f7fa fa49 	bl	8040674 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80461e2:	490c      	ldr	r1, [pc, #48]	@ (8046214 <MX_USB_DEVICE_Init+0x5c>)
 80461e4:	4809      	ldr	r0, [pc, #36]	@ (804620c <MX_USB_DEVICE_Init+0x54>)
 80461e6:	f7fe fc55 	bl	8044a94 <USBD_CDC_RegisterInterface>
 80461ea:	4603      	mov	r3, r0
 80461ec:	2b00      	cmp	r3, #0
 80461ee:	d001      	beq.n	80461f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80461f0:	f7fa fa40 	bl	8040674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80461f4:	4805      	ldr	r0, [pc, #20]	@ (804620c <MX_USB_DEVICE_Init+0x54>)
 80461f6:	f7fe fd43 	bl	8044c80 <USBD_Start>
 80461fa:	4603      	mov	r3, r0
 80461fc:	2b00      	cmp	r3, #0
 80461fe:	d001      	beq.n	8046204 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8046200:	f7fa fa38 	bl	8040674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8046204:	bf00      	nop
 8046206:	bd80      	pop	{r7, pc}
 8046208:	200000ac 	.word	0x200000ac
 804620c:	20000120 	.word	0x20000120
 8046210:	20000018 	.word	0x20000018
 8046214:	20000098 	.word	0x20000098

08046218 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8046218:	b580      	push	{r7, lr}
 804621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 804621c:	2200      	movs	r2, #0
 804621e:	4905      	ldr	r1, [pc, #20]	@ (8046234 <CDC_Init_FS+0x1c>)
 8046220:	4805      	ldr	r0, [pc, #20]	@ (8046238 <CDC_Init_FS+0x20>)
 8046222:	f7fe fc51 	bl	8044ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8046226:	4905      	ldr	r1, [pc, #20]	@ (804623c <CDC_Init_FS+0x24>)
 8046228:	4803      	ldr	r0, [pc, #12]	@ (8046238 <CDC_Init_FS+0x20>)
 804622a:	f7fe fc6f 	bl	8044b0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 804622e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8046230:	4618      	mov	r0, r3
 8046232:	bd80      	pop	{r7, pc}
 8046234:	20000bfc 	.word	0x20000bfc
 8046238:	20000120 	.word	0x20000120
 804623c:	200003fc 	.word	0x200003fc

08046240 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8046240:	b480      	push	{r7}
 8046242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8046244:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8046246:	4618      	mov	r0, r3
 8046248:	46bd      	mov	sp, r7
 804624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804624e:	4770      	bx	lr

08046250 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8046250:	b480      	push	{r7}
 8046252:	b083      	sub	sp, #12
 8046254:	af00      	add	r7, sp, #0
 8046256:	4603      	mov	r3, r0
 8046258:	6039      	str	r1, [r7, #0]
 804625a:	71fb      	strb	r3, [r7, #7]
 804625c:	4613      	mov	r3, r2
 804625e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8046260:	79fb      	ldrb	r3, [r7, #7]
 8046262:	2b23      	cmp	r3, #35	@ 0x23
 8046264:	d84a      	bhi.n	80462fc <CDC_Control_FS+0xac>
 8046266:	a201      	add	r2, pc, #4	@ (adr r2, 804626c <CDC_Control_FS+0x1c>)
 8046268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804626c:	080462fd 	.word	0x080462fd
 8046270:	080462fd 	.word	0x080462fd
 8046274:	080462fd 	.word	0x080462fd
 8046278:	080462fd 	.word	0x080462fd
 804627c:	080462fd 	.word	0x080462fd
 8046280:	080462fd 	.word	0x080462fd
 8046284:	080462fd 	.word	0x080462fd
 8046288:	080462fd 	.word	0x080462fd
 804628c:	080462fd 	.word	0x080462fd
 8046290:	080462fd 	.word	0x080462fd
 8046294:	080462fd 	.word	0x080462fd
 8046298:	080462fd 	.word	0x080462fd
 804629c:	080462fd 	.word	0x080462fd
 80462a0:	080462fd 	.word	0x080462fd
 80462a4:	080462fd 	.word	0x080462fd
 80462a8:	080462fd 	.word	0x080462fd
 80462ac:	080462fd 	.word	0x080462fd
 80462b0:	080462fd 	.word	0x080462fd
 80462b4:	080462fd 	.word	0x080462fd
 80462b8:	080462fd 	.word	0x080462fd
 80462bc:	080462fd 	.word	0x080462fd
 80462c0:	080462fd 	.word	0x080462fd
 80462c4:	080462fd 	.word	0x080462fd
 80462c8:	080462fd 	.word	0x080462fd
 80462cc:	080462fd 	.word	0x080462fd
 80462d0:	080462fd 	.word	0x080462fd
 80462d4:	080462fd 	.word	0x080462fd
 80462d8:	080462fd 	.word	0x080462fd
 80462dc:	080462fd 	.word	0x080462fd
 80462e0:	080462fd 	.word	0x080462fd
 80462e4:	080462fd 	.word	0x080462fd
 80462e8:	080462fd 	.word	0x080462fd
 80462ec:	080462fd 	.word	0x080462fd
 80462f0:	080462fd 	.word	0x080462fd
 80462f4:	080462fd 	.word	0x080462fd
 80462f8:	080462fd 	.word	0x080462fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80462fc:	bf00      	nop
  }

  return (USBD_OK);
 80462fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8046300:	4618      	mov	r0, r3
 8046302:	370c      	adds	r7, #12
 8046304:	46bd      	mov	sp, r7
 8046306:	f85d 7b04 	ldr.w	r7, [sp], #4
 804630a:	4770      	bx	lr

0804630c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 804630c:	b580      	push	{r7, lr}
 804630e:	b082      	sub	sp, #8
 8046310:	af00      	add	r7, sp, #0
 8046312:	6078      	str	r0, [r7, #4]
 8046314:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8046316:	6879      	ldr	r1, [r7, #4]
 8046318:	4805      	ldr	r0, [pc, #20]	@ (8046330 <CDC_Receive_FS+0x24>)
 804631a:	f7fe fbf7 	bl	8044b0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 804631e:	4804      	ldr	r0, [pc, #16]	@ (8046330 <CDC_Receive_FS+0x24>)
 8046320:	f7fe fc12 	bl	8044b48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8046324:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8046326:	4618      	mov	r0, r3
 8046328:	3708      	adds	r7, #8
 804632a:	46bd      	mov	sp, r7
 804632c:	bd80      	pop	{r7, pc}
 804632e:	bf00      	nop
 8046330:	20000120 	.word	0x20000120

08046334 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8046334:	b480      	push	{r7}
 8046336:	b087      	sub	sp, #28
 8046338:	af00      	add	r7, sp, #0
 804633a:	60f8      	str	r0, [r7, #12]
 804633c:	60b9      	str	r1, [r7, #8]
 804633e:	4613      	mov	r3, r2
 8046340:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8046342:	2300      	movs	r3, #0
 8046344:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8046346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 804634a:	4618      	mov	r0, r3
 804634c:	371c      	adds	r7, #28
 804634e:	46bd      	mov	sp, r7
 8046350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046354:	4770      	bx	lr
	...

08046358 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046358:	b480      	push	{r7}
 804635a:	b083      	sub	sp, #12
 804635c:	af00      	add	r7, sp, #0
 804635e:	4603      	mov	r3, r0
 8046360:	6039      	str	r1, [r7, #0]
 8046362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8046364:	683b      	ldr	r3, [r7, #0]
 8046366:	2212      	movs	r2, #18
 8046368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 804636a:	4b03      	ldr	r3, [pc, #12]	@ (8046378 <USBD_FS_DeviceDescriptor+0x20>)
}
 804636c:	4618      	mov	r0, r3
 804636e:	370c      	adds	r7, #12
 8046370:	46bd      	mov	sp, r7
 8046372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046376:	4770      	bx	lr
 8046378:	200000c8 	.word	0x200000c8

0804637c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804637c:	b480      	push	{r7}
 804637e:	b083      	sub	sp, #12
 8046380:	af00      	add	r7, sp, #0
 8046382:	4603      	mov	r3, r0
 8046384:	6039      	str	r1, [r7, #0]
 8046386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8046388:	683b      	ldr	r3, [r7, #0]
 804638a:	2204      	movs	r2, #4
 804638c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 804638e:	4b03      	ldr	r3, [pc, #12]	@ (804639c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8046390:	4618      	mov	r0, r3
 8046392:	370c      	adds	r7, #12
 8046394:	46bd      	mov	sp, r7
 8046396:	f85d 7b04 	ldr.w	r7, [sp], #4
 804639a:	4770      	bx	lr
 804639c:	200000dc 	.word	0x200000dc

080463a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80463a0:	b580      	push	{r7, lr}
 80463a2:	b082      	sub	sp, #8
 80463a4:	af00      	add	r7, sp, #0
 80463a6:	4603      	mov	r3, r0
 80463a8:	6039      	str	r1, [r7, #0]
 80463aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80463ac:	79fb      	ldrb	r3, [r7, #7]
 80463ae:	2b00      	cmp	r3, #0
 80463b0:	d105      	bne.n	80463be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80463b2:	683a      	ldr	r2, [r7, #0]
 80463b4:	4907      	ldr	r1, [pc, #28]	@ (80463d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80463b6:	4808      	ldr	r0, [pc, #32]	@ (80463d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80463b8:	f7ff fe12 	bl	8045fe0 <USBD_GetString>
 80463bc:	e004      	b.n	80463c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80463be:	683a      	ldr	r2, [r7, #0]
 80463c0:	4904      	ldr	r1, [pc, #16]	@ (80463d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80463c2:	4805      	ldr	r0, [pc, #20]	@ (80463d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80463c4:	f7ff fe0c 	bl	8045fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80463c8:	4b02      	ldr	r3, [pc, #8]	@ (80463d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80463ca:	4618      	mov	r0, r3
 80463cc:	3708      	adds	r7, #8
 80463ce:	46bd      	mov	sp, r7
 80463d0:	bd80      	pop	{r7, pc}
 80463d2:	bf00      	nop
 80463d4:	200013fc 	.word	0x200013fc
 80463d8:	08046bf0 	.word	0x08046bf0

080463dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80463dc:	b580      	push	{r7, lr}
 80463de:	b082      	sub	sp, #8
 80463e0:	af00      	add	r7, sp, #0
 80463e2:	4603      	mov	r3, r0
 80463e4:	6039      	str	r1, [r7, #0]
 80463e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80463e8:	683a      	ldr	r2, [r7, #0]
 80463ea:	4904      	ldr	r1, [pc, #16]	@ (80463fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80463ec:	4804      	ldr	r0, [pc, #16]	@ (8046400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80463ee:	f7ff fdf7 	bl	8045fe0 <USBD_GetString>
  return USBD_StrDesc;
 80463f2:	4b02      	ldr	r3, [pc, #8]	@ (80463fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80463f4:	4618      	mov	r0, r3
 80463f6:	3708      	adds	r7, #8
 80463f8:	46bd      	mov	sp, r7
 80463fa:	bd80      	pop	{r7, pc}
 80463fc:	200013fc 	.word	0x200013fc
 8046400:	08046c08 	.word	0x08046c08

08046404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046404:	b580      	push	{r7, lr}
 8046406:	b082      	sub	sp, #8
 8046408:	af00      	add	r7, sp, #0
 804640a:	4603      	mov	r3, r0
 804640c:	6039      	str	r1, [r7, #0]
 804640e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8046410:	683b      	ldr	r3, [r7, #0]
 8046412:	221a      	movs	r2, #26
 8046414:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8046416:	f000 f843 	bl	80464a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 804641a:	4b02      	ldr	r3, [pc, #8]	@ (8046424 <USBD_FS_SerialStrDescriptor+0x20>)
}
 804641c:	4618      	mov	r0, r3
 804641e:	3708      	adds	r7, #8
 8046420:	46bd      	mov	sp, r7
 8046422:	bd80      	pop	{r7, pc}
 8046424:	200000e0 	.word	0x200000e0

08046428 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046428:	b580      	push	{r7, lr}
 804642a:	b082      	sub	sp, #8
 804642c:	af00      	add	r7, sp, #0
 804642e:	4603      	mov	r3, r0
 8046430:	6039      	str	r1, [r7, #0]
 8046432:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8046434:	79fb      	ldrb	r3, [r7, #7]
 8046436:	2b00      	cmp	r3, #0
 8046438:	d105      	bne.n	8046446 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 804643a:	683a      	ldr	r2, [r7, #0]
 804643c:	4907      	ldr	r1, [pc, #28]	@ (804645c <USBD_FS_ConfigStrDescriptor+0x34>)
 804643e:	4808      	ldr	r0, [pc, #32]	@ (8046460 <USBD_FS_ConfigStrDescriptor+0x38>)
 8046440:	f7ff fdce 	bl	8045fe0 <USBD_GetString>
 8046444:	e004      	b.n	8046450 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8046446:	683a      	ldr	r2, [r7, #0]
 8046448:	4904      	ldr	r1, [pc, #16]	@ (804645c <USBD_FS_ConfigStrDescriptor+0x34>)
 804644a:	4805      	ldr	r0, [pc, #20]	@ (8046460 <USBD_FS_ConfigStrDescriptor+0x38>)
 804644c:	f7ff fdc8 	bl	8045fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8046450:	4b02      	ldr	r3, [pc, #8]	@ (804645c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8046452:	4618      	mov	r0, r3
 8046454:	3708      	adds	r7, #8
 8046456:	46bd      	mov	sp, r7
 8046458:	bd80      	pop	{r7, pc}
 804645a:	bf00      	nop
 804645c:	200013fc 	.word	0x200013fc
 8046460:	08046c1c 	.word	0x08046c1c

08046464 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046464:	b580      	push	{r7, lr}
 8046466:	b082      	sub	sp, #8
 8046468:	af00      	add	r7, sp, #0
 804646a:	4603      	mov	r3, r0
 804646c:	6039      	str	r1, [r7, #0]
 804646e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8046470:	79fb      	ldrb	r3, [r7, #7]
 8046472:	2b00      	cmp	r3, #0
 8046474:	d105      	bne.n	8046482 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8046476:	683a      	ldr	r2, [r7, #0]
 8046478:	4907      	ldr	r1, [pc, #28]	@ (8046498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 804647a:	4808      	ldr	r0, [pc, #32]	@ (804649c <USBD_FS_InterfaceStrDescriptor+0x38>)
 804647c:	f7ff fdb0 	bl	8045fe0 <USBD_GetString>
 8046480:	e004      	b.n	804648c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8046482:	683a      	ldr	r2, [r7, #0]
 8046484:	4904      	ldr	r1, [pc, #16]	@ (8046498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8046486:	4805      	ldr	r0, [pc, #20]	@ (804649c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8046488:	f7ff fdaa 	bl	8045fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 804648c:	4b02      	ldr	r3, [pc, #8]	@ (8046498 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 804648e:	4618      	mov	r0, r3
 8046490:	3708      	adds	r7, #8
 8046492:	46bd      	mov	sp, r7
 8046494:	bd80      	pop	{r7, pc}
 8046496:	bf00      	nop
 8046498:	200013fc 	.word	0x200013fc
 804649c:	08046c28 	.word	0x08046c28

080464a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80464a0:	b580      	push	{r7, lr}
 80464a2:	b084      	sub	sp, #16
 80464a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80464a6:	68fa      	ldr	r2, [r7, #12]
 80464a8:	68bb      	ldr	r3, [r7, #8]
 80464aa:	4413      	add	r3, r2
 80464ac:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80464ae:	68fb      	ldr	r3, [r7, #12]
 80464b0:	2b00      	cmp	r3, #0
 80464b2:	d009      	beq.n	80464c8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80464b4:	2208      	movs	r2, #8
 80464b6:	4906      	ldr	r1, [pc, #24]	@ (80464d0 <Get_SerialNum+0x30>)
 80464b8:	68f8      	ldr	r0, [r7, #12]
 80464ba:	f000 f80d 	bl	80464d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80464be:	2204      	movs	r2, #4
 80464c0:	4904      	ldr	r1, [pc, #16]	@ (80464d4 <Get_SerialNum+0x34>)
 80464c2:	6878      	ldr	r0, [r7, #4]
 80464c4:	f000 f808 	bl	80464d8 <IntToUnicode>
  }
}
 80464c8:	bf00      	nop
 80464ca:	3710      	adds	r7, #16
 80464cc:	46bd      	mov	sp, r7
 80464ce:	bd80      	pop	{r7, pc}
 80464d0:	200000e2 	.word	0x200000e2
 80464d4:	200000f2 	.word	0x200000f2

080464d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80464d8:	b480      	push	{r7}
 80464da:	b087      	sub	sp, #28
 80464dc:	af00      	add	r7, sp, #0
 80464de:	60f8      	str	r0, [r7, #12]
 80464e0:	60b9      	str	r1, [r7, #8]
 80464e2:	4613      	mov	r3, r2
 80464e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80464e6:	2300      	movs	r3, #0
 80464e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80464ea:	2300      	movs	r3, #0
 80464ec:	75fb      	strb	r3, [r7, #23]
 80464ee:	e027      	b.n	8046540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80464f0:	68fb      	ldr	r3, [r7, #12]
 80464f2:	0f1b      	lsrs	r3, r3, #28
 80464f4:	2b09      	cmp	r3, #9
 80464f6:	d80b      	bhi.n	8046510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80464f8:	68fb      	ldr	r3, [r7, #12]
 80464fa:	0f1b      	lsrs	r3, r3, #28
 80464fc:	b2da      	uxtb	r2, r3
 80464fe:	7dfb      	ldrb	r3, [r7, #23]
 8046500:	005b      	lsls	r3, r3, #1
 8046502:	4619      	mov	r1, r3
 8046504:	68bb      	ldr	r3, [r7, #8]
 8046506:	440b      	add	r3, r1
 8046508:	3230      	adds	r2, #48	@ 0x30
 804650a:	b2d2      	uxtb	r2, r2
 804650c:	701a      	strb	r2, [r3, #0]
 804650e:	e00a      	b.n	8046526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8046510:	68fb      	ldr	r3, [r7, #12]
 8046512:	0f1b      	lsrs	r3, r3, #28
 8046514:	b2da      	uxtb	r2, r3
 8046516:	7dfb      	ldrb	r3, [r7, #23]
 8046518:	005b      	lsls	r3, r3, #1
 804651a:	4619      	mov	r1, r3
 804651c:	68bb      	ldr	r3, [r7, #8]
 804651e:	440b      	add	r3, r1
 8046520:	3237      	adds	r2, #55	@ 0x37
 8046522:	b2d2      	uxtb	r2, r2
 8046524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8046526:	68fb      	ldr	r3, [r7, #12]
 8046528:	011b      	lsls	r3, r3, #4
 804652a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 804652c:	7dfb      	ldrb	r3, [r7, #23]
 804652e:	005b      	lsls	r3, r3, #1
 8046530:	3301      	adds	r3, #1
 8046532:	68ba      	ldr	r2, [r7, #8]
 8046534:	4413      	add	r3, r2
 8046536:	2200      	movs	r2, #0
 8046538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 804653a:	7dfb      	ldrb	r3, [r7, #23]
 804653c:	3301      	adds	r3, #1
 804653e:	75fb      	strb	r3, [r7, #23]
 8046540:	7dfa      	ldrb	r2, [r7, #23]
 8046542:	79fb      	ldrb	r3, [r7, #7]
 8046544:	429a      	cmp	r2, r3
 8046546:	d3d3      	bcc.n	80464f0 <IntToUnicode+0x18>
  }
}
 8046548:	bf00      	nop
 804654a:	bf00      	nop
 804654c:	371c      	adds	r7, #28
 804654e:	46bd      	mov	sp, r7
 8046550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046554:	4770      	bx	lr
	...

08046558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8046558:	b580      	push	{r7, lr}
 804655a:	b08a      	sub	sp, #40	@ 0x28
 804655c:	af00      	add	r7, sp, #0
 804655e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8046560:	f107 0314 	add.w	r3, r7, #20
 8046564:	2200      	movs	r2, #0
 8046566:	601a      	str	r2, [r3, #0]
 8046568:	605a      	str	r2, [r3, #4]
 804656a:	609a      	str	r2, [r3, #8]
 804656c:	60da      	str	r2, [r3, #12]
 804656e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8046570:	687b      	ldr	r3, [r7, #4]
 8046572:	681b      	ldr	r3, [r3, #0]
 8046574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8046578:	d13a      	bne.n	80465f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804657a:	2300      	movs	r3, #0
 804657c:	613b      	str	r3, [r7, #16]
 804657e:	4b1e      	ldr	r3, [pc, #120]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 8046580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8046582:	4a1d      	ldr	r2, [pc, #116]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 8046584:	f043 0301 	orr.w	r3, r3, #1
 8046588:	6313      	str	r3, [r2, #48]	@ 0x30
 804658a:	4b1b      	ldr	r3, [pc, #108]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 804658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804658e:	f003 0301 	and.w	r3, r3, #1
 8046592:	613b      	str	r3, [r7, #16]
 8046594:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8046596:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 804659a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804659c:	2302      	movs	r3, #2
 804659e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80465a0:	2300      	movs	r3, #0
 80465a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80465a4:	2303      	movs	r3, #3
 80465a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80465a8:	230a      	movs	r3, #10
 80465aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80465ac:	f107 0314 	add.w	r3, r7, #20
 80465b0:	4619      	mov	r1, r3
 80465b2:	4812      	ldr	r0, [pc, #72]	@ (80465fc <HAL_PCD_MspInit+0xa4>)
 80465b4:	f7fa faae 	bl	8040b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80465b8:	4b0f      	ldr	r3, [pc, #60]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 80465ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80465bc:	4a0e      	ldr	r2, [pc, #56]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 80465be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80465c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80465c4:	2300      	movs	r3, #0
 80465c6:	60fb      	str	r3, [r7, #12]
 80465c8:	4b0b      	ldr	r3, [pc, #44]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 80465ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80465cc:	4a0a      	ldr	r2, [pc, #40]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 80465ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80465d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80465d4:	4b08      	ldr	r3, [pc, #32]	@ (80465f8 <HAL_PCD_MspInit+0xa0>)
 80465d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80465d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80465dc:	60fb      	str	r3, [r7, #12]
 80465de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80465e0:	2200      	movs	r2, #0
 80465e2:	2100      	movs	r1, #0
 80465e4:	2043      	movs	r0, #67	@ 0x43
 80465e6:	f7fa fa5e 	bl	8040aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80465ea:	2043      	movs	r0, #67	@ 0x43
 80465ec:	f7fa fa77 	bl	8040ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80465f0:	bf00      	nop
 80465f2:	3728      	adds	r7, #40	@ 0x28
 80465f4:	46bd      	mov	sp, r7
 80465f6:	bd80      	pop	{r7, pc}
 80465f8:	40023800 	.word	0x40023800
 80465fc:	40020000 	.word	0x40020000

08046600 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046600:	b580      	push	{r7, lr}
 8046602:	b082      	sub	sp, #8
 8046604:	af00      	add	r7, sp, #0
 8046606:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8046608:	687b      	ldr	r3, [r7, #4]
 804660a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 804660e:	687b      	ldr	r3, [r7, #4]
 8046610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8046614:	4619      	mov	r1, r3
 8046616:	4610      	mov	r0, r2
 8046618:	f7fe fb7f 	bl	8044d1a <USBD_LL_SetupStage>
}
 804661c:	bf00      	nop
 804661e:	3708      	adds	r7, #8
 8046620:	46bd      	mov	sp, r7
 8046622:	bd80      	pop	{r7, pc}

08046624 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046624:	b580      	push	{r7, lr}
 8046626:	b082      	sub	sp, #8
 8046628:	af00      	add	r7, sp, #0
 804662a:	6078      	str	r0, [r7, #4]
 804662c:	460b      	mov	r3, r1
 804662e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8046630:	687b      	ldr	r3, [r7, #4]
 8046632:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8046636:	78fa      	ldrb	r2, [r7, #3]
 8046638:	6879      	ldr	r1, [r7, #4]
 804663a:	4613      	mov	r3, r2
 804663c:	00db      	lsls	r3, r3, #3
 804663e:	4413      	add	r3, r2
 8046640:	009b      	lsls	r3, r3, #2
 8046642:	440b      	add	r3, r1
 8046644:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8046648:	681a      	ldr	r2, [r3, #0]
 804664a:	78fb      	ldrb	r3, [r7, #3]
 804664c:	4619      	mov	r1, r3
 804664e:	f7fe fbb9 	bl	8044dc4 <USBD_LL_DataOutStage>
}
 8046652:	bf00      	nop
 8046654:	3708      	adds	r7, #8
 8046656:	46bd      	mov	sp, r7
 8046658:	bd80      	pop	{r7, pc}

0804665a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804665a:	b580      	push	{r7, lr}
 804665c:	b082      	sub	sp, #8
 804665e:	af00      	add	r7, sp, #0
 8046660:	6078      	str	r0, [r7, #4]
 8046662:	460b      	mov	r3, r1
 8046664:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8046666:	687b      	ldr	r3, [r7, #4]
 8046668:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804666c:	78fa      	ldrb	r2, [r7, #3]
 804666e:	6879      	ldr	r1, [r7, #4]
 8046670:	4613      	mov	r3, r2
 8046672:	00db      	lsls	r3, r3, #3
 8046674:	4413      	add	r3, r2
 8046676:	009b      	lsls	r3, r3, #2
 8046678:	440b      	add	r3, r1
 804667a:	3320      	adds	r3, #32
 804667c:	681a      	ldr	r2, [r3, #0]
 804667e:	78fb      	ldrb	r3, [r7, #3]
 8046680:	4619      	mov	r1, r3
 8046682:	f7fe fc52 	bl	8044f2a <USBD_LL_DataInStage>
}
 8046686:	bf00      	nop
 8046688:	3708      	adds	r7, #8
 804668a:	46bd      	mov	sp, r7
 804668c:	bd80      	pop	{r7, pc}

0804668e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804668e:	b580      	push	{r7, lr}
 8046690:	b082      	sub	sp, #8
 8046692:	af00      	add	r7, sp, #0
 8046694:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8046696:	687b      	ldr	r3, [r7, #4]
 8046698:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804669c:	4618      	mov	r0, r3
 804669e:	f7fe fd8c 	bl	80451ba <USBD_LL_SOF>
}
 80466a2:	bf00      	nop
 80466a4:	3708      	adds	r7, #8
 80466a6:	46bd      	mov	sp, r7
 80466a8:	bd80      	pop	{r7, pc}

080466aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80466aa:	b580      	push	{r7, lr}
 80466ac:	b084      	sub	sp, #16
 80466ae:	af00      	add	r7, sp, #0
 80466b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80466b2:	2301      	movs	r3, #1
 80466b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80466b6:	687b      	ldr	r3, [r7, #4]
 80466b8:	79db      	ldrb	r3, [r3, #7]
 80466ba:	2b00      	cmp	r3, #0
 80466bc:	d102      	bne.n	80466c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80466be:	2300      	movs	r3, #0
 80466c0:	73fb      	strb	r3, [r7, #15]
 80466c2:	e008      	b.n	80466d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80466c4:	687b      	ldr	r3, [r7, #4]
 80466c6:	79db      	ldrb	r3, [r3, #7]
 80466c8:	2b02      	cmp	r3, #2
 80466ca:	d102      	bne.n	80466d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80466cc:	2301      	movs	r3, #1
 80466ce:	73fb      	strb	r3, [r7, #15]
 80466d0:	e001      	b.n	80466d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80466d2:	f7f9 ffcf 	bl	8040674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80466d6:	687b      	ldr	r3, [r7, #4]
 80466d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80466dc:	7bfa      	ldrb	r2, [r7, #15]
 80466de:	4611      	mov	r1, r2
 80466e0:	4618      	mov	r0, r3
 80466e2:	f7fe fd26 	bl	8045132 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80466e6:	687b      	ldr	r3, [r7, #4]
 80466e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80466ec:	4618      	mov	r0, r3
 80466ee:	f7fe fcce 	bl	804508e <USBD_LL_Reset>
}
 80466f2:	bf00      	nop
 80466f4:	3710      	adds	r7, #16
 80466f6:	46bd      	mov	sp, r7
 80466f8:	bd80      	pop	{r7, pc}
	...

080466fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80466fc:	b580      	push	{r7, lr}
 80466fe:	b082      	sub	sp, #8
 8046700:	af00      	add	r7, sp, #0
 8046702:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8046704:	687b      	ldr	r3, [r7, #4]
 8046706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804670a:	4618      	mov	r0, r3
 804670c:	f7fe fd21 	bl	8045152 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8046710:	687b      	ldr	r3, [r7, #4]
 8046712:	681b      	ldr	r3, [r3, #0]
 8046714:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8046718:	681b      	ldr	r3, [r3, #0]
 804671a:	687a      	ldr	r2, [r7, #4]
 804671c:	6812      	ldr	r2, [r2, #0]
 804671e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8046722:	f043 0301 	orr.w	r3, r3, #1
 8046726:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8046728:	687b      	ldr	r3, [r7, #4]
 804672a:	7adb      	ldrb	r3, [r3, #11]
 804672c:	2b00      	cmp	r3, #0
 804672e:	d005      	beq.n	804673c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8046730:	4b04      	ldr	r3, [pc, #16]	@ (8046744 <HAL_PCD_SuspendCallback+0x48>)
 8046732:	691b      	ldr	r3, [r3, #16]
 8046734:	4a03      	ldr	r2, [pc, #12]	@ (8046744 <HAL_PCD_SuspendCallback+0x48>)
 8046736:	f043 0306 	orr.w	r3, r3, #6
 804673a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 804673c:	bf00      	nop
 804673e:	3708      	adds	r7, #8
 8046740:	46bd      	mov	sp, r7
 8046742:	bd80      	pop	{r7, pc}
 8046744:	e000ed00 	.word	0xe000ed00

08046748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046748:	b580      	push	{r7, lr}
 804674a:	b082      	sub	sp, #8
 804674c:	af00      	add	r7, sp, #0
 804674e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8046750:	687b      	ldr	r3, [r7, #4]
 8046752:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8046756:	4618      	mov	r0, r3
 8046758:	f7fe fd17 	bl	804518a <USBD_LL_Resume>
}
 804675c:	bf00      	nop
 804675e:	3708      	adds	r7, #8
 8046760:	46bd      	mov	sp, r7
 8046762:	bd80      	pop	{r7, pc}

08046764 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046764:	b580      	push	{r7, lr}
 8046766:	b082      	sub	sp, #8
 8046768:	af00      	add	r7, sp, #0
 804676a:	6078      	str	r0, [r7, #4]
 804676c:	460b      	mov	r3, r1
 804676e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8046770:	687b      	ldr	r3, [r7, #4]
 8046772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8046776:	78fa      	ldrb	r2, [r7, #3]
 8046778:	4611      	mov	r1, r2
 804677a:	4618      	mov	r0, r3
 804677c:	f7fe fd6f 	bl	804525e <USBD_LL_IsoOUTIncomplete>
}
 8046780:	bf00      	nop
 8046782:	3708      	adds	r7, #8
 8046784:	46bd      	mov	sp, r7
 8046786:	bd80      	pop	{r7, pc}

08046788 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046788:	b580      	push	{r7, lr}
 804678a:	b082      	sub	sp, #8
 804678c:	af00      	add	r7, sp, #0
 804678e:	6078      	str	r0, [r7, #4]
 8046790:	460b      	mov	r3, r1
 8046792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8046794:	687b      	ldr	r3, [r7, #4]
 8046796:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804679a:	78fa      	ldrb	r2, [r7, #3]
 804679c:	4611      	mov	r1, r2
 804679e:	4618      	mov	r0, r3
 80467a0:	f7fe fd2b 	bl	80451fa <USBD_LL_IsoINIncomplete>
}
 80467a4:	bf00      	nop
 80467a6:	3708      	adds	r7, #8
 80467a8:	46bd      	mov	sp, r7
 80467aa:	bd80      	pop	{r7, pc}

080467ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80467ac:	b580      	push	{r7, lr}
 80467ae:	b082      	sub	sp, #8
 80467b0:	af00      	add	r7, sp, #0
 80467b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80467b4:	687b      	ldr	r3, [r7, #4]
 80467b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80467ba:	4618      	mov	r0, r3
 80467bc:	f7fe fd81 	bl	80452c2 <USBD_LL_DevConnected>
}
 80467c0:	bf00      	nop
 80467c2:	3708      	adds	r7, #8
 80467c4:	46bd      	mov	sp, r7
 80467c6:	bd80      	pop	{r7, pc}

080467c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80467c8:	b580      	push	{r7, lr}
 80467ca:	b082      	sub	sp, #8
 80467cc:	af00      	add	r7, sp, #0
 80467ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80467d0:	687b      	ldr	r3, [r7, #4]
 80467d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80467d6:	4618      	mov	r0, r3
 80467d8:	f7fe fd7e 	bl	80452d8 <USBD_LL_DevDisconnected>
}
 80467dc:	bf00      	nop
 80467de:	3708      	adds	r7, #8
 80467e0:	46bd      	mov	sp, r7
 80467e2:	bd80      	pop	{r7, pc}

080467e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80467e4:	b580      	push	{r7, lr}
 80467e6:	b082      	sub	sp, #8
 80467e8:	af00      	add	r7, sp, #0
 80467ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80467ec:	687b      	ldr	r3, [r7, #4]
 80467ee:	781b      	ldrb	r3, [r3, #0]
 80467f0:	2b00      	cmp	r3, #0
 80467f2:	d13c      	bne.n	804686e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80467f4:	4a20      	ldr	r2, [pc, #128]	@ (8046878 <USBD_LL_Init+0x94>)
 80467f6:	687b      	ldr	r3, [r7, #4]
 80467f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80467fc:	687b      	ldr	r3, [r7, #4]
 80467fe:	4a1e      	ldr	r2, [pc, #120]	@ (8046878 <USBD_LL_Init+0x94>)
 8046800:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8046804:	4b1c      	ldr	r3, [pc, #112]	@ (8046878 <USBD_LL_Init+0x94>)
 8046806:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 804680a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 804680c:	4b1a      	ldr	r3, [pc, #104]	@ (8046878 <USBD_LL_Init+0x94>)
 804680e:	2204      	movs	r2, #4
 8046810:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8046812:	4b19      	ldr	r3, [pc, #100]	@ (8046878 <USBD_LL_Init+0x94>)
 8046814:	2202      	movs	r2, #2
 8046816:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8046818:	4b17      	ldr	r3, [pc, #92]	@ (8046878 <USBD_LL_Init+0x94>)
 804681a:	2200      	movs	r2, #0
 804681c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 804681e:	4b16      	ldr	r3, [pc, #88]	@ (8046878 <USBD_LL_Init+0x94>)
 8046820:	2202      	movs	r2, #2
 8046822:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8046824:	4b14      	ldr	r3, [pc, #80]	@ (8046878 <USBD_LL_Init+0x94>)
 8046826:	2200      	movs	r2, #0
 8046828:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 804682a:	4b13      	ldr	r3, [pc, #76]	@ (8046878 <USBD_LL_Init+0x94>)
 804682c:	2200      	movs	r2, #0
 804682e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8046830:	4b11      	ldr	r3, [pc, #68]	@ (8046878 <USBD_LL_Init+0x94>)
 8046832:	2200      	movs	r2, #0
 8046834:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8046836:	4b10      	ldr	r3, [pc, #64]	@ (8046878 <USBD_LL_Init+0x94>)
 8046838:	2200      	movs	r2, #0
 804683a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 804683c:	4b0e      	ldr	r3, [pc, #56]	@ (8046878 <USBD_LL_Init+0x94>)
 804683e:	2200      	movs	r2, #0
 8046840:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8046842:	480d      	ldr	r0, [pc, #52]	@ (8046878 <USBD_LL_Init+0x94>)
 8046844:	f7fa fb1b 	bl	8040e7e <HAL_PCD_Init>
 8046848:	4603      	mov	r3, r0
 804684a:	2b00      	cmp	r3, #0
 804684c:	d001      	beq.n	8046852 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 804684e:	f7f9 ff11 	bl	8040674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8046852:	2180      	movs	r1, #128	@ 0x80
 8046854:	4808      	ldr	r0, [pc, #32]	@ (8046878 <USBD_LL_Init+0x94>)
 8046856:	f7fb fd48 	bl	80422ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 804685a:	2240      	movs	r2, #64	@ 0x40
 804685c:	2100      	movs	r1, #0
 804685e:	4806      	ldr	r0, [pc, #24]	@ (8046878 <USBD_LL_Init+0x94>)
 8046860:	f7fb fcfc 	bl	804225c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8046864:	2280      	movs	r2, #128	@ 0x80
 8046866:	2101      	movs	r1, #1
 8046868:	4803      	ldr	r0, [pc, #12]	@ (8046878 <USBD_LL_Init+0x94>)
 804686a:	f7fb fcf7 	bl	804225c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 804686e:	2300      	movs	r3, #0
}
 8046870:	4618      	mov	r0, r3
 8046872:	3708      	adds	r7, #8
 8046874:	46bd      	mov	sp, r7
 8046876:	bd80      	pop	{r7, pc}
 8046878:	200015fc 	.word	0x200015fc

0804687c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 804687c:	b580      	push	{r7, lr}
 804687e:	b084      	sub	sp, #16
 8046880:	af00      	add	r7, sp, #0
 8046882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046884:	2300      	movs	r3, #0
 8046886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046888:	2300      	movs	r3, #0
 804688a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 804688c:	687b      	ldr	r3, [r7, #4]
 804688e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8046892:	4618      	mov	r0, r3
 8046894:	f7fa fc02 	bl	804109c <HAL_PCD_Start>
 8046898:	4603      	mov	r3, r0
 804689a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804689c:	7bfb      	ldrb	r3, [r7, #15]
 804689e:	4618      	mov	r0, r3
 80468a0:	f000 f942 	bl	8046b28 <USBD_Get_USB_Status>
 80468a4:	4603      	mov	r3, r0
 80468a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80468a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80468aa:	4618      	mov	r0, r3
 80468ac:	3710      	adds	r7, #16
 80468ae:	46bd      	mov	sp, r7
 80468b0:	bd80      	pop	{r7, pc}

080468b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80468b2:	b580      	push	{r7, lr}
 80468b4:	b084      	sub	sp, #16
 80468b6:	af00      	add	r7, sp, #0
 80468b8:	6078      	str	r0, [r7, #4]
 80468ba:	4608      	mov	r0, r1
 80468bc:	4611      	mov	r1, r2
 80468be:	461a      	mov	r2, r3
 80468c0:	4603      	mov	r3, r0
 80468c2:	70fb      	strb	r3, [r7, #3]
 80468c4:	460b      	mov	r3, r1
 80468c6:	70bb      	strb	r3, [r7, #2]
 80468c8:	4613      	mov	r3, r2
 80468ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80468cc:	2300      	movs	r3, #0
 80468ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80468d0:	2300      	movs	r3, #0
 80468d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80468d4:	687b      	ldr	r3, [r7, #4]
 80468d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80468da:	78bb      	ldrb	r3, [r7, #2]
 80468dc:	883a      	ldrh	r2, [r7, #0]
 80468de:	78f9      	ldrb	r1, [r7, #3]
 80468e0:	f7fb f8d6 	bl	8041a90 <HAL_PCD_EP_Open>
 80468e4:	4603      	mov	r3, r0
 80468e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80468e8:	7bfb      	ldrb	r3, [r7, #15]
 80468ea:	4618      	mov	r0, r3
 80468ec:	f000 f91c 	bl	8046b28 <USBD_Get_USB_Status>
 80468f0:	4603      	mov	r3, r0
 80468f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80468f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80468f6:	4618      	mov	r0, r3
 80468f8:	3710      	adds	r7, #16
 80468fa:	46bd      	mov	sp, r7
 80468fc:	bd80      	pop	{r7, pc}

080468fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80468fe:	b580      	push	{r7, lr}
 8046900:	b084      	sub	sp, #16
 8046902:	af00      	add	r7, sp, #0
 8046904:	6078      	str	r0, [r7, #4]
 8046906:	460b      	mov	r3, r1
 8046908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804690a:	2300      	movs	r3, #0
 804690c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804690e:	2300      	movs	r3, #0
 8046910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8046912:	687b      	ldr	r3, [r7, #4]
 8046914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8046918:	78fa      	ldrb	r2, [r7, #3]
 804691a:	4611      	mov	r1, r2
 804691c:	4618      	mov	r0, r3
 804691e:	f7fb f921 	bl	8041b64 <HAL_PCD_EP_Close>
 8046922:	4603      	mov	r3, r0
 8046924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046926:	7bfb      	ldrb	r3, [r7, #15]
 8046928:	4618      	mov	r0, r3
 804692a:	f000 f8fd 	bl	8046b28 <USBD_Get_USB_Status>
 804692e:	4603      	mov	r3, r0
 8046930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8046932:	7bbb      	ldrb	r3, [r7, #14]
}
 8046934:	4618      	mov	r0, r3
 8046936:	3710      	adds	r7, #16
 8046938:	46bd      	mov	sp, r7
 804693a:	bd80      	pop	{r7, pc}

0804693c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804693c:	b580      	push	{r7, lr}
 804693e:	b084      	sub	sp, #16
 8046940:	af00      	add	r7, sp, #0
 8046942:	6078      	str	r0, [r7, #4]
 8046944:	460b      	mov	r3, r1
 8046946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046948:	2300      	movs	r3, #0
 804694a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804694c:	2300      	movs	r3, #0
 804694e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8046950:	687b      	ldr	r3, [r7, #4]
 8046952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8046956:	78fa      	ldrb	r2, [r7, #3]
 8046958:	4611      	mov	r1, r2
 804695a:	4618      	mov	r0, r3
 804695c:	f7fb f9d9 	bl	8041d12 <HAL_PCD_EP_SetStall>
 8046960:	4603      	mov	r3, r0
 8046962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046964:	7bfb      	ldrb	r3, [r7, #15]
 8046966:	4618      	mov	r0, r3
 8046968:	f000 f8de 	bl	8046b28 <USBD_Get_USB_Status>
 804696c:	4603      	mov	r3, r0
 804696e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8046970:	7bbb      	ldrb	r3, [r7, #14]
}
 8046972:	4618      	mov	r0, r3
 8046974:	3710      	adds	r7, #16
 8046976:	46bd      	mov	sp, r7
 8046978:	bd80      	pop	{r7, pc}

0804697a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804697a:	b580      	push	{r7, lr}
 804697c:	b084      	sub	sp, #16
 804697e:	af00      	add	r7, sp, #0
 8046980:	6078      	str	r0, [r7, #4]
 8046982:	460b      	mov	r3, r1
 8046984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046986:	2300      	movs	r3, #0
 8046988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804698a:	2300      	movs	r3, #0
 804698c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 804698e:	687b      	ldr	r3, [r7, #4]
 8046990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8046994:	78fa      	ldrb	r2, [r7, #3]
 8046996:	4611      	mov	r1, r2
 8046998:	4618      	mov	r0, r3
 804699a:	f7fb fa1d 	bl	8041dd8 <HAL_PCD_EP_ClrStall>
 804699e:	4603      	mov	r3, r0
 80469a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80469a2:	7bfb      	ldrb	r3, [r7, #15]
 80469a4:	4618      	mov	r0, r3
 80469a6:	f000 f8bf 	bl	8046b28 <USBD_Get_USB_Status>
 80469aa:	4603      	mov	r3, r0
 80469ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80469ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80469b0:	4618      	mov	r0, r3
 80469b2:	3710      	adds	r7, #16
 80469b4:	46bd      	mov	sp, r7
 80469b6:	bd80      	pop	{r7, pc}

080469b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80469b8:	b480      	push	{r7}
 80469ba:	b085      	sub	sp, #20
 80469bc:	af00      	add	r7, sp, #0
 80469be:	6078      	str	r0, [r7, #4]
 80469c0:	460b      	mov	r3, r1
 80469c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80469c4:	687b      	ldr	r3, [r7, #4]
 80469c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80469ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80469cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80469d0:	2b00      	cmp	r3, #0
 80469d2:	da0b      	bge.n	80469ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80469d4:	78fb      	ldrb	r3, [r7, #3]
 80469d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80469da:	68f9      	ldr	r1, [r7, #12]
 80469dc:	4613      	mov	r3, r2
 80469de:	00db      	lsls	r3, r3, #3
 80469e0:	4413      	add	r3, r2
 80469e2:	009b      	lsls	r3, r3, #2
 80469e4:	440b      	add	r3, r1
 80469e6:	3316      	adds	r3, #22
 80469e8:	781b      	ldrb	r3, [r3, #0]
 80469ea:	e00b      	b.n	8046a04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80469ec:	78fb      	ldrb	r3, [r7, #3]
 80469ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80469f2:	68f9      	ldr	r1, [r7, #12]
 80469f4:	4613      	mov	r3, r2
 80469f6:	00db      	lsls	r3, r3, #3
 80469f8:	4413      	add	r3, r2
 80469fa:	009b      	lsls	r3, r3, #2
 80469fc:	440b      	add	r3, r1
 80469fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8046a02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8046a04:	4618      	mov	r0, r3
 8046a06:	3714      	adds	r7, #20
 8046a08:	46bd      	mov	sp, r7
 8046a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a0e:	4770      	bx	lr

08046a10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8046a10:	b580      	push	{r7, lr}
 8046a12:	b084      	sub	sp, #16
 8046a14:	af00      	add	r7, sp, #0
 8046a16:	6078      	str	r0, [r7, #4]
 8046a18:	460b      	mov	r3, r1
 8046a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046a1c:	2300      	movs	r3, #0
 8046a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046a20:	2300      	movs	r3, #0
 8046a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8046a24:	687b      	ldr	r3, [r7, #4]
 8046a26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8046a2a:	78fa      	ldrb	r2, [r7, #3]
 8046a2c:	4611      	mov	r1, r2
 8046a2e:	4618      	mov	r0, r3
 8046a30:	f7fb f80a 	bl	8041a48 <HAL_PCD_SetAddress>
 8046a34:	4603      	mov	r3, r0
 8046a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046a38:	7bfb      	ldrb	r3, [r7, #15]
 8046a3a:	4618      	mov	r0, r3
 8046a3c:	f000 f874 	bl	8046b28 <USBD_Get_USB_Status>
 8046a40:	4603      	mov	r3, r0
 8046a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8046a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8046a46:	4618      	mov	r0, r3
 8046a48:	3710      	adds	r7, #16
 8046a4a:	46bd      	mov	sp, r7
 8046a4c:	bd80      	pop	{r7, pc}

08046a4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8046a4e:	b580      	push	{r7, lr}
 8046a50:	b086      	sub	sp, #24
 8046a52:	af00      	add	r7, sp, #0
 8046a54:	60f8      	str	r0, [r7, #12]
 8046a56:	607a      	str	r2, [r7, #4]
 8046a58:	603b      	str	r3, [r7, #0]
 8046a5a:	460b      	mov	r3, r1
 8046a5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046a5e:	2300      	movs	r3, #0
 8046a60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046a62:	2300      	movs	r3, #0
 8046a64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8046a66:	68fb      	ldr	r3, [r7, #12]
 8046a68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8046a6c:	7af9      	ldrb	r1, [r7, #11]
 8046a6e:	683b      	ldr	r3, [r7, #0]
 8046a70:	687a      	ldr	r2, [r7, #4]
 8046a72:	f7fb f914 	bl	8041c9e <HAL_PCD_EP_Transmit>
 8046a76:	4603      	mov	r3, r0
 8046a78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046a7a:	7dfb      	ldrb	r3, [r7, #23]
 8046a7c:	4618      	mov	r0, r3
 8046a7e:	f000 f853 	bl	8046b28 <USBD_Get_USB_Status>
 8046a82:	4603      	mov	r3, r0
 8046a84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8046a86:	7dbb      	ldrb	r3, [r7, #22]
}
 8046a88:	4618      	mov	r0, r3
 8046a8a:	3718      	adds	r7, #24
 8046a8c:	46bd      	mov	sp, r7
 8046a8e:	bd80      	pop	{r7, pc}

08046a90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8046a90:	b580      	push	{r7, lr}
 8046a92:	b086      	sub	sp, #24
 8046a94:	af00      	add	r7, sp, #0
 8046a96:	60f8      	str	r0, [r7, #12]
 8046a98:	607a      	str	r2, [r7, #4]
 8046a9a:	603b      	str	r3, [r7, #0]
 8046a9c:	460b      	mov	r3, r1
 8046a9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046aa0:	2300      	movs	r3, #0
 8046aa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046aa4:	2300      	movs	r3, #0
 8046aa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8046aa8:	68fb      	ldr	r3, [r7, #12]
 8046aaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8046aae:	7af9      	ldrb	r1, [r7, #11]
 8046ab0:	683b      	ldr	r3, [r7, #0]
 8046ab2:	687a      	ldr	r2, [r7, #4]
 8046ab4:	f7fb f8a0 	bl	8041bf8 <HAL_PCD_EP_Receive>
 8046ab8:	4603      	mov	r3, r0
 8046aba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046abc:	7dfb      	ldrb	r3, [r7, #23]
 8046abe:	4618      	mov	r0, r3
 8046ac0:	f000 f832 	bl	8046b28 <USBD_Get_USB_Status>
 8046ac4:	4603      	mov	r3, r0
 8046ac6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8046ac8:	7dbb      	ldrb	r3, [r7, #22]
}
 8046aca:	4618      	mov	r0, r3
 8046acc:	3718      	adds	r7, #24
 8046ace:	46bd      	mov	sp, r7
 8046ad0:	bd80      	pop	{r7, pc}

08046ad2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8046ad2:	b580      	push	{r7, lr}
 8046ad4:	b082      	sub	sp, #8
 8046ad6:	af00      	add	r7, sp, #0
 8046ad8:	6078      	str	r0, [r7, #4]
 8046ada:	460b      	mov	r3, r1
 8046adc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8046ade:	687b      	ldr	r3, [r7, #4]
 8046ae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8046ae4:	78fa      	ldrb	r2, [r7, #3]
 8046ae6:	4611      	mov	r1, r2
 8046ae8:	4618      	mov	r0, r3
 8046aea:	f7fb f8c0 	bl	8041c6e <HAL_PCD_EP_GetRxCount>
 8046aee:	4603      	mov	r3, r0
}
 8046af0:	4618      	mov	r0, r3
 8046af2:	3708      	adds	r7, #8
 8046af4:	46bd      	mov	sp, r7
 8046af6:	bd80      	pop	{r7, pc}

08046af8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8046af8:	b480      	push	{r7}
 8046afa:	b083      	sub	sp, #12
 8046afc:	af00      	add	r7, sp, #0
 8046afe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8046b00:	4b03      	ldr	r3, [pc, #12]	@ (8046b10 <USBD_static_malloc+0x18>)
}
 8046b02:	4618      	mov	r0, r3
 8046b04:	370c      	adds	r7, #12
 8046b06:	46bd      	mov	sp, r7
 8046b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b0c:	4770      	bx	lr
 8046b0e:	bf00      	nop
 8046b10:	20001ae0 	.word	0x20001ae0

08046b14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8046b14:	b480      	push	{r7}
 8046b16:	b083      	sub	sp, #12
 8046b18:	af00      	add	r7, sp, #0
 8046b1a:	6078      	str	r0, [r7, #4]

}
 8046b1c:	bf00      	nop
 8046b1e:	370c      	adds	r7, #12
 8046b20:	46bd      	mov	sp, r7
 8046b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b26:	4770      	bx	lr

08046b28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8046b28:	b480      	push	{r7}
 8046b2a:	b085      	sub	sp, #20
 8046b2c:	af00      	add	r7, sp, #0
 8046b2e:	4603      	mov	r3, r0
 8046b30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046b32:	2300      	movs	r3, #0
 8046b34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8046b36:	79fb      	ldrb	r3, [r7, #7]
 8046b38:	2b03      	cmp	r3, #3
 8046b3a:	d817      	bhi.n	8046b6c <USBD_Get_USB_Status+0x44>
 8046b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8046b44 <USBD_Get_USB_Status+0x1c>)
 8046b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046b42:	bf00      	nop
 8046b44:	08046b55 	.word	0x08046b55
 8046b48:	08046b5b 	.word	0x08046b5b
 8046b4c:	08046b61 	.word	0x08046b61
 8046b50:	08046b67 	.word	0x08046b67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8046b54:	2300      	movs	r3, #0
 8046b56:	73fb      	strb	r3, [r7, #15]
    break;
 8046b58:	e00b      	b.n	8046b72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8046b5a:	2303      	movs	r3, #3
 8046b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8046b5e:	e008      	b.n	8046b72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8046b60:	2301      	movs	r3, #1
 8046b62:	73fb      	strb	r3, [r7, #15]
    break;
 8046b64:	e005      	b.n	8046b72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8046b66:	2303      	movs	r3, #3
 8046b68:	73fb      	strb	r3, [r7, #15]
    break;
 8046b6a:	e002      	b.n	8046b72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8046b6c:	2303      	movs	r3, #3
 8046b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8046b70:	bf00      	nop
  }
  return usb_status;
 8046b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8046b74:	4618      	mov	r0, r3
 8046b76:	3714      	adds	r7, #20
 8046b78:	46bd      	mov	sp, r7
 8046b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b7e:	4770      	bx	lr

08046b80 <memset>:
 8046b80:	4402      	add	r2, r0
 8046b82:	4603      	mov	r3, r0
 8046b84:	4293      	cmp	r3, r2
 8046b86:	d100      	bne.n	8046b8a <memset+0xa>
 8046b88:	4770      	bx	lr
 8046b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8046b8e:	e7f9      	b.n	8046b84 <memset+0x4>

08046b90 <__libc_init_array>:
 8046b90:	b570      	push	{r4, r5, r6, lr}
 8046b92:	4d0d      	ldr	r5, [pc, #52]	@ (8046bc8 <__libc_init_array+0x38>)
 8046b94:	4c0d      	ldr	r4, [pc, #52]	@ (8046bcc <__libc_init_array+0x3c>)
 8046b96:	1b64      	subs	r4, r4, r5
 8046b98:	10a4      	asrs	r4, r4, #2
 8046b9a:	2600      	movs	r6, #0
 8046b9c:	42a6      	cmp	r6, r4
 8046b9e:	d109      	bne.n	8046bb4 <__libc_init_array+0x24>
 8046ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8046bd0 <__libc_init_array+0x40>)
 8046ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8046bd4 <__libc_init_array+0x44>)
 8046ba4:	f000 f818 	bl	8046bd8 <_init>
 8046ba8:	1b64      	subs	r4, r4, r5
 8046baa:	10a4      	asrs	r4, r4, #2
 8046bac:	2600      	movs	r6, #0
 8046bae:	42a6      	cmp	r6, r4
 8046bb0:	d105      	bne.n	8046bbe <__libc_init_array+0x2e>
 8046bb2:	bd70      	pop	{r4, r5, r6, pc}
 8046bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8046bb8:	4798      	blx	r3
 8046bba:	3601      	adds	r6, #1
 8046bbc:	e7ee      	b.n	8046b9c <__libc_init_array+0xc>
 8046bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8046bc2:	4798      	blx	r3
 8046bc4:	3601      	adds	r6, #1
 8046bc6:	e7f2      	b.n	8046bae <__libc_init_array+0x1e>
 8046bc8:	08046c50 	.word	0x08046c50
 8046bcc:	08046c50 	.word	0x08046c50
 8046bd0:	08046c50 	.word	0x08046c50
 8046bd4:	08046c54 	.word	0x08046c54

08046bd8 <_init>:
 8046bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046bda:	bf00      	nop
 8046bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8046bde:	bc08      	pop	{r3}
 8046be0:	469e      	mov	lr, r3
 8046be2:	4770      	bx	lr

08046be4 <_fini>:
 8046be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046be6:	bf00      	nop
 8046be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8046bea:	bc08      	pop	{r3}
 8046bec:	469e      	mov	lr, r3
 8046bee:	4770      	bx	lr
