
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006e80  08006e80  00007e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed8  08006ed8  000080fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed8  08006ed8  00007ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ee0  08006ee0  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00007ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00007ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006ee8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080fc  2**0
                  CONTENTS
 10 .bss          00001c04  200000fc  200000fc  000080fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d00  20001d00  000080fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dded  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf2  00000000  00000000  00015f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00018c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089c  00000000  00000000  000197c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a8e  00000000  00000000  0001a064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010771  00000000  00000000  0003caf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c413e  00000000  00000000  0004d263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001113a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002df4  00000000  00000000  001113e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001141d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e68 	.word	0x08006e68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006e68 	.word	0x08006e68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_GPIO_Init+0x9c>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000554 <MX_GPIO_Init+0x9c>)
 80004d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_GPIO_Init+0x9c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <MX_GPIO_Init+0x9c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a18      	ldr	r2, [pc, #96]	@ (8000554 <MX_GPIO_Init+0x9c>)
 80004f4:	f043 0308 	orr.w	r3, r3, #8
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_GPIO_Init+0x9c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_GPIO_Init+0x9c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <MX_GPIO_Init+0x9c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_GPIO_Init+0x9c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <MX_GPIO_Init+0xa0>)
 800052a:	f000 fcef 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800052e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4619      	mov	r1, r3
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_GPIO_Init+0xa0>)
 8000548:	f000 fb44 	bl	8000bd4 <HAL_GPIO_Init>

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40023800 	.word	0x40023800
 8000558:	40020c00 	.word	0x40020c00

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 f959 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f81b 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f7ff ffa5 	bl	80004b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800056e:	f005 ff6b 	bl	8006448 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 10; ++i)
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	e00b      	b.n	8000590 <main+0x34>
	  {
		  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8000578:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <main+0x40>)
 800057e:	f000 fcde 	bl	8000f3e <HAL_GPIO_TogglePin>
		  HAL_Delay(300);
 8000582:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000586:	f000 f9ef 	bl	8000968 <HAL_Delay>
	  for (int i = 0; i < 10; ++i)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b09      	cmp	r3, #9
 8000594:	ddf0      	ble.n	8000578 <main+0x1c>
	  }
	  goto_application();
 8000596:	f000 f86d 	bl	8000674 <goto_application>
	  for (int i = 0; i < 10; ++i)
 800059a:	e7ea      	b.n	8000572 <main+0x16>
 800059c:	40020c00 	.word	0x40020c00

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	@ 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 fc2e 	bl	8006e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	@ (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	@ (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	@ (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	@ 0xa8
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fef7 	bl	8002418 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f84e 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f958 	bl	8002908 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f837 	bl	80006d0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  //printf("Gonna Jump to Application\n");
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <goto_application+0x4c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	607b      	str	r3, [r7, #4]
  //__set_MSP(*(volatile uint32_t*) 0x08040000);
  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET );    //Green LED OFF
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000686:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <goto_application+0x50>)
 8000688:	f000 fc40 	bl	8000f0c <HAL_GPIO_WritePin>

  /* Reset the Clock */
  HAL_RCC_DeInit();
 800068c:	f002 fb34 	bl	8002cf8 <HAL_RCC_DeInit>
  HAL_DeInit();
 8000690:	f000 f8e4 	bl	800085c <HAL_DeInit>
  __set_MSP(*(volatile uint32_t*) 0x08040000);
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <goto_application+0x54>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f383 8808 	msr	MSP, r3
}
 80006a0:	bf00      	nop
  SysTick->CTRL = 0;
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <goto_application+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <goto_application+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80006ae:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <goto_application+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  /* Jump to application */
  app_reset_handler();    //call the app reset handler
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4798      	blx	r3
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08040004 	.word	0x08040004
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	08040000 	.word	0x08040000
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <Error_Handler+0x8>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <HAL_MspInit+0x4c>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <HAL_MspInit+0x4c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	@ 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f8d1 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <OTG_FS_IRQHandler+0x10>)
 8000792:	f000 fd32 	bl	80011fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200015fc 	.word	0x200015fc

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	@ (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007c8:	f7ff ffea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	@ (8000804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f006 fb15 	bl	8006e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff feb1 	bl	800055c <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000808:	08006ee8 	.word	0x08006ee8
  ldr r2, =_sbss
 800080c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000810:	20001d00 	.word	0x20001d00

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_Init+0x40>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <HAL_Init+0x40>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <HAL_Init+0x40>)
 800082e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <HAL_Init+0x40>)
 800083a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800083e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f985 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f83e 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff ff46 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023c00 	.word	0x40023c00

0800085c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <HAL_DeInit+0x50>)
 8000864:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800086c:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_DeInit+0x4c>)
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_DeInit+0x54>)
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <HAL_DeInit+0x4c>)
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <HAL_DeInit+0x58>)
 800087c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800087e:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000886:	22c1      	movs	r2, #193	@ 0xc1
 8000888:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <HAL_DeInit+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000892:	2201      	movs	r2, #1
 8000894:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000896:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <HAL_DeInit+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800089c:	f000 f80c 	bl	80008b8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	f6fec9ff 	.word	0xf6fec9ff
 80008b0:	04777933 	.word	0x04777933
 80008b4:	226011ff 	.word	0x226011ff

080008b8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f967 	bl	8000bba <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 f92f 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	@ (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	20000118 	.word	0x20000118

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000118 	.word	0x20000118

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff ffee 	bl	8000950 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffde 	bl	8000950 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	@ (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	@ (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	@ (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	@ 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff3e 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff31 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e16b      	b.n	8000ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 815a 	bne.w	8000ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80b4 	beq.w	8000ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b60      	ldr	r3, [pc, #384]	@ (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a5f      	ldr	r2, [pc, #380]	@ (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a5b      	ldr	r2, [pc, #364]	@ (8000ee4 <HAL_GPIO_Init+0x310>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a52      	ldr	r2, [pc, #328]	@ (8000ee8 <HAL_GPIO_Init+0x314>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d02b      	beq.n	8000dfa <HAL_GPIO_Init+0x226>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a51      	ldr	r2, [pc, #324]	@ (8000eec <HAL_GPIO_Init+0x318>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d025      	beq.n	8000df6 <HAL_GPIO_Init+0x222>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a50      	ldr	r2, [pc, #320]	@ (8000ef0 <HAL_GPIO_Init+0x31c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d01f      	beq.n	8000df2 <HAL_GPIO_Init+0x21e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef4 <HAL_GPIO_Init+0x320>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x21a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef8 <HAL_GPIO_Init+0x324>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x216>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8000efc <HAL_GPIO_Init+0x328>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x212>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f00 <HAL_GPIO_Init+0x32c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x20e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8000f04 <HAL_GPIO_Init+0x330>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x20a>
 8000dda:	2307      	movs	r3, #7
 8000ddc:	e00e      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dde:	2308      	movs	r3, #8
 8000de0:	e00c      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000de2:	2306      	movs	r3, #6
 8000de4:	e00a      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	@ (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a32      	ldr	r2, [pc, #200]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b30      	ldr	r3, [pc, #192]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a27      	ldr	r2, [pc, #156]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e92:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebc:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	f67f ae90 	bls.w	8000bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	041a      	lsls	r2, r3, #16
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	400b      	ands	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e101      	b.n	8001188 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d106      	bne.n	8000fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f005 fc22 	bl	80067e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fb2:	d102      	bne.n	8000fba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 f87f 	bl	80030c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7c1a      	ldrb	r2, [r3, #16]
 8000fcc:	f88d 2000 	strb.w	r2, [sp]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd4:	f001 ff5e 	bl	8002e94 <USB_CoreInit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0ce      	b.n	8001188 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f877 	bl	80030e4 <USB_SetCurrentMode>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0bf      	b.n	8001188 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e04a      	b.n	80010a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3315      	adds	r3, #21
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3314      	adds	r3, #20
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b298      	uxth	r0, r3
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	332e      	adds	r3, #46	@ 0x2e
 800104a:	4602      	mov	r2, r0
 800104c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3318      	adds	r3, #24
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	331c      	adds	r3, #28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	3320      	adds	r3, #32
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3324      	adds	r3, #36	@ 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	3301      	adds	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3af      	bcc.n	800100e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e044      	b.n	800113e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3b5      	bcc.n	80010b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7c1a      	ldrb	r2, [r3, #16]
 8001150:	f88d 2000 	strb.w	r2, [sp]
 8001154:	3304      	adds	r3, #4
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	f002 f810 	bl	800317c <USB_DevInit>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00c      	b.n	8001188 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f003 f85a 	bl	800423a <USB_DevDisconnect>

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_PCD_Start+0x1c>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e022      	b.n	80011f2 <HAL_PCD_Start+0x62>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 ff61 	bl	80030a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 f808 	bl	80041f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b08d      	sub	sp, #52	@ 0x34
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 f8c6 	bl	80043a2 <USB_GetMode>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 848c 	bne.w	8001b36 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f82a 	bl	800427c <USB_ReadInterrupts>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8482 	beq.w	8001b34 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f003 f817 	bl	800427c <USB_ReadInterrupts>
 800124e:	4603      	mov	r3, r0
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b02      	cmp	r3, #2
 8001256:	d107      	bne.n	8001268 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f002 0202 	and.w	r2, r2, #2
 8001266:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f003 f805 	bl	800427c <USB_ReadInterrupts>
 8001272:	4603      	mov	r3, r0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b10      	cmp	r3, #16
 800127a:	d161      	bne.n	8001340 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0210 	bic.w	r2, r2, #16
 800128a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f003 020f 	and.w	r2, r3, #15
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	3304      	adds	r3, #4
 80012aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	0c5b      	lsrs	r3, r3, #17
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d124      	bne.n	8001302 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d035      	beq.n	8001330 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	6a38      	ldr	r0, [r7, #32]
 80012d8:	f002 fe3c 	bl	8003f54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e8:	441a      	add	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fa:	441a      	add	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	e016      	b.n	8001330 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	0c5b      	lsrs	r3, r3, #17
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	2b06      	cmp	r3, #6
 800130c:	d110      	bne.n	8001330 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001314:	2208      	movs	r2, #8
 8001316:	4619      	mov	r1, r3
 8001318:	6a38      	ldr	r0, [r7, #32]
 800131a:	f002 fe1b 	bl	8003f54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0210 	orr.w	r2, r2, #16
 800133e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f002 ff99 	bl	800427c <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001350:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001354:	f040 80a7 	bne.w	80014a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 ff9e 	bl	80042a2 <USB_ReadDevAllOutEpInterrupt>
 8001366:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001368:	e099      	b.n	800149e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 808e 	beq.w	8001492 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f002 ffc2 	bl	800430a <USB_ReadDevOutEPInterrupt>
 8001386:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00c      	beq.n	80013ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	015a      	lsls	r2, r3, #5
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800139e:	461a      	mov	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fea4 	bl	80020f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	015a      	lsls	r2, r3, #5
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	4413      	add	r3, r2
 80013be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c2:	461a      	mov	r2, r3
 80013c4:	2308      	movs	r3, #8
 80013c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 ff7a 	bl	80022c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d008      	beq.n	80013ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	015a      	lsls	r2, r3, #5
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013e6:	461a      	mov	r2, r3
 80013e8:	2310      	movs	r3, #16
 80013ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d030      	beq.n	8001458 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	2b80      	cmp	r3, #128	@ 0x80
 8001400:	d109      	bne.n	8001416 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001410:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001414:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	3304      	adds	r3, #4
 800142a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	78db      	ldrb	r3, [r3, #3]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2200      	movs	r2, #0
 8001438:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f005 fad7 	bl	80069f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001452:	461a      	mov	r2, r3
 8001454:	2302      	movs	r3, #2
 8001456:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800146e:	461a      	mov	r2, r3
 8001470:	2320      	movs	r3, #32
 8001472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800148a:	461a      	mov	r2, r3
 800148c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001490:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f47f af62 	bne.w	800136a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fee6 	bl	800427c <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014ba:	f040 80db 	bne.w	8001674 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 ff07 	bl	80042d6 <USB_ReadDevAllInEpInterrupt>
 80014c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014ce:	e0cd      	b.n	800166c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80c2 	beq.w	8001660 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ff2d 	bl	8004346 <USB_ReadDevInEPInterrupt>
 80014ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d057      	beq.n	80015a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	2201      	movs	r2, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800150c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	69f9      	ldr	r1, [r7, #28]
 8001514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001518:	4013      	ands	r3, r2
 800151a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001528:	461a      	mov	r2, r3
 800152a:	2301      	movs	r3, #1
 800152c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	799b      	ldrb	r3, [r3, #6]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d132      	bne.n	800159c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3320      	adds	r3, #32
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154c:	4613      	mov	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4403      	add	r3, r0
 8001556:	331c      	adds	r3, #28
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4419      	add	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4403      	add	r3, r0
 800156a:	3320      	adds	r3, #32
 800156c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <HAL_PCD_IRQHandler+0x3a2>
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	3324      	adds	r3, #36	@ 0x24
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001594:	461a      	mov	r2, r3
 8001596:	2101      	movs	r1, #1
 8001598:	f002 ff34 	bl	8004404 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f005 f9a1 	bl	80068ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015be:	461a      	mov	r2, r3
 80015c0:	2308      	movs	r3, #8
 80015c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015da:	461a      	mov	r2, r3
 80015dc:	2310      	movs	r3, #16
 80015de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015f6:	461a      	mov	r2, r3
 80015f8:	2340      	movs	r3, #64	@ 0x40
 80015fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d023      	beq.n	800164e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001608:	6a38      	ldr	r0, [r7, #32]
 800160a:	f001 ff1b 	bl	8003444 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800160e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	3310      	adds	r3, #16
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	3304      	adds	r3, #4
 8001620:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2200      	movs	r2, #0
 800162e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f005 f9ee 	bl	8006a18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2302      	movs	r3, #2
 800164c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fcbd 	bl	8001fda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	3301      	adds	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166e:	2b00      	cmp	r3, #0
 8001670:	f47f af2e 	bne.w	80014d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fdff 	bl	800427c <USB_ReadInterrupts>
 800167e:	4603      	mov	r3, r0
 8001680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001688:	d122      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fea4 	bl	8002400 <HAL_PCDEx_LPM_Callback>
 80016b8:	e002      	b.n	80016c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f005 f98c 	bl	80069d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fdd1 	bl	800427c <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016e4:	d112      	bne.n	800170c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f005 f948 	bl	800698c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800170a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fdb3 	bl	800427c <USB_ReadInterrupts>
 8001716:	4603      	mov	r3, r0
 8001718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001720:	f040 80b7 	bne.w	8001892 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2110      	movs	r1, #16
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fe80 	bl	8003444 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001748:	e046      	b.n	80017d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800174a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001756:	461a      	mov	r2, r3
 8001758:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800175c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800176e:	0151      	lsls	r1, r2, #5
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	440a      	add	r2, r1
 8001774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001778:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800177c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800177e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800178a:	461a      	mov	r2, r3
 800178c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001790:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a2:	0151      	lsls	r1, r2, #5
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	440a      	add	r2, r1
 80017a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017c2:	0151      	lsls	r1, r2, #5
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	440a      	add	r2, r1
 80017c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d4:	3301      	adds	r3, #1
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	791b      	ldrb	r3, [r3, #4]
 80017dc:	461a      	mov	r2, r3
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d3b2      	bcc.n	800174a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80017f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7bdb      	ldrb	r3, [r3, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d016      	beq.n	800182e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001810:	f043 030b 	orr.w	r3, r3, #11
 8001814:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001826:	f043 030b 	orr.w	r3, r3, #11
 800182a:	6453      	str	r3, [r2, #68]	@ 0x44
 800182c:	e015      	b.n	800185a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800183c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001840:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001844:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001854:	f043 030b 	orr.w	r3, r3, #11
 8001858:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001868:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800186c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800187c:	461a      	mov	r2, r3
 800187e:	f002 fdc1 	bl	8004404 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fcf0 	bl	800427c <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018a6:	d123      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fd86 	bl	80043be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fe3d 	bl	8003536 <USB_GetDevSpeed>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681c      	ldr	r4, [r3, #0]
 80018c8:	f001 fa0a 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 80018cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018d2:	461a      	mov	r2, r3
 80018d4:	4620      	mov	r0, r4
 80018d6:	f001 fb41 	bl	8002f5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f005 f82d 	bl	800693a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80018ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fcc1 	bl	800427c <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b08      	cmp	r3, #8
 8001902:	d10a      	bne.n	800191a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f005 f80a 	bl	800691e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f002 0208 	and.w	r2, r2, #8
 8001918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f002 fcac 	bl	800427c <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	2b80      	cmp	r3, #128	@ 0x80
 800192c:	d123      	bne.n	8001976 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	e014      	b.n	800196a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fb0a 	bl	8001f78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	3301      	adds	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	461a      	mov	r2, r3
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	4293      	cmp	r3, r2
 8001974:	d3e4      	bcc.n	8001940 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fc7e 	bl	800427c <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800198a:	d13c      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198c:	2301      	movs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001990:	e02b      	b.n	80019ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3318      	adds	r3, #24
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d115      	bne.n	80019e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da12      	bge.n	80019e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	3317      	adds	r3, #23
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 faca 	bl	8001f78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	3301      	adds	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d3cd      	bcc.n	8001992 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fc36 	bl	800427c <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a1a:	d156      	bne.n	8001aca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a20:	e045      	b.n	8001aae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d12e      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da2b      	bge.n	8001aa8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d121      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa4:	6053      	str	r3, [r2, #4]
            break;
 8001aa6:	e008      	b.n	8001aba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	3301      	adds	r3, #1
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	791b      	ldrb	r3, [r3, #4]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d3b3      	bcc.n	8001a22 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fbd4 	bl	800427c <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ade:	d10a      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f004 ffab 	bl	8006a3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fbbe 	bl	800427c <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d115      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f004 ff9b 	bl	8006a58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e000      	b.n	8001b36 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001b34:	bf00      	nop
    }
  }
}
 8001b36:	3734      	adds	r7, #52	@ 0x34
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_SetAddress+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e012      	b.n	8001b7c <HAL_PCD_SetAddress+0x40>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fb1d 	bl	80041ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	70fb      	strb	r3, [r7, #3]
 8001b96:	460b      	mov	r3, r1
 8001b98:	803b      	strh	r3, [r7, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da0f      	bge.n	8001bca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	3310      	adds	r3, #16
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	705a      	strb	r2, [r3, #1]
 8001bc8:	e00f      	b.n	8001bea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 020f 	and.w	r2, r3, #15
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	3304      	adds	r3, #4
 8001be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001bf6:	883b      	ldrh	r3, [r7, #0]
 8001bf8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	78ba      	ldrb	r2, [r7, #2]
 8001c04:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c18:	78bb      	ldrb	r3, [r7, #2]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_EP_Open+0xae>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00e      	b.n	8001c50 <HAL_PCD_EP_Open+0xcc>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fc9d 	bl	8003580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0f      	bge.n	8001c8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	e00f      	b.n	8001cac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_Close+0x6e>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_Close+0x8c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fcdb 	bl	8003690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f003 020f 	and.w	r2, r3, #15
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	799b      	ldrb	r3, [r3, #6]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	799b      	ldrb	r3, [r3, #6]
 8001d50:	461a      	mov	r2, r3
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	f001 fd78 	bl	8003848 <USB_EPStartXfer>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001d84:	681b      	ldr	r3, [r3, #0]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3310      	adds	r3, #16
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	799b      	ldrb	r3, [r3, #6]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	799b      	ldrb	r3, [r3, #6]
 8001df4:	461a      	mov	r2, r3
 8001df6:	6979      	ldr	r1, [r7, #20]
 8001df8:	f001 fd26 	bl	8003848 <USB_EPStartXfer>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	7912      	ldrb	r2, [r2, #4]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04f      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da0f      	bge.n	8001e4c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3310      	adds	r3, #16
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	705a      	strb	r2, [r3, #1]
 8001e4a:	e00d      	b.n	8001e68 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_EP_SetStall+0x82>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e01d      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xbe>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 f8b4 	bl	8004004 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7999      	ldrb	r1, [r3, #6]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f002 faa5 	bl	8004404 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	7912      	ldrb	r2, [r2, #4]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e042      	b.n	8001f70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3310      	adds	r3, #16
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00f      	b.n	8001f32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_ClrStall+0x86>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_ClrStall+0xa4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 f8bd 	bl	80040e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0c      	bge.n	8001fa6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3310      	adds	r3, #16
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e00c      	b.n	8001fc0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 fedc 	bl	8003d84 <USB_EPStopXfer>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b08a      	sub	sp, #40	@ 0x28
 8001fde:	af02      	add	r7, sp, #8
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d901      	bls.n	8002012 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06b      	b.n	80020ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	d902      	bls.n	800202e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3303      	adds	r3, #3
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002036:	e02a      	b.n	800208e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	429a      	cmp	r2, r3
 800204c:	d902      	bls.n	8002054 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3303      	adds	r3, #3
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4603      	mov	r3, r0
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f001 ff31 	bl	8003ed8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	441a      	add	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	441a      	add	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d809      	bhi.n	80020b8 <PCD_WriteEmptyTxFifo+0xde>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d203      	bcs.n	80020b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1bf      	bne.n	8002038 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d811      	bhi.n	80020e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	2201      	movs	r2, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	43db      	mvns	r3, r3
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020e4:	4013      	ands	r3, r2
 80020e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	333c      	adds	r3, #60	@ 0x3c
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d17b      	bne.n	8002222 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4a61      	ldr	r2, [pc, #388]	@ (80022bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	f240 80b9 	bls.w	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80b3 	beq.w	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	e0a7      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	2320      	movs	r3, #32
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e098      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 8093 	bne.w	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4a4b      	ldr	r2, [pc, #300]	@ (80022bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d90f      	bls.n	80021b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a8:	461a      	mov	r2, r3
 80021aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	e07e      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	0159      	lsls	r1, r3, #5
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	1ad2      	subs	r2, r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021fc:	461a      	mov	r2, r3
 80021fe:	2101      	movs	r1, #1
 8002200:	f002 f900 	bl	8004404 <USB_EP0_OutStart>
 8002204:	e006      	b.n	8002214 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	441a      	add	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f004 fb4a 	bl	80068b4 <HAL_PCD_DataOutStageCallback>
 8002220:	e046      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4a26      	ldr	r2, [pc, #152]	@ (80022c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d124      	bne.n	8002274 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	e032      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	2320      	movs	r3, #32
 8002264:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f004 fb21 	bl	80068b4 <HAL_PCD_DataOutStageCallback>
 8002272:	e01d      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800229c:	461a      	mov	r2, r3
 800229e:	2100      	movs	r1, #0
 80022a0:	f002 f8b0 	bl	8004404 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f004 fb02 	bl	80068b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	4f54300a 	.word	0x4f54300a
 80022c0:	4f54310a 	.word	0x4f54310a

080022c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	333c      	adds	r3, #60	@ 0x3c
 80022dc:	3304      	adds	r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a15      	ldr	r2, [pc, #84]	@ (800234c <PCD_EP_OutSetupPacket_int+0x88>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d90e      	bls.n	8002318 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002316:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f004 fab9 	bl	8006890 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <PCD_EP_OutSetupPacket_int+0x88>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d90c      	bls.n	8002340 <PCD_EP_OutSetupPacket_int+0x7c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	799b      	ldrb	r3, [r3, #6]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002338:	461a      	mov	r2, r3
 800233a:	2101      	movs	r1, #1
 800233c:	f002 f862 	bl	8004404 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a

08002350 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
 800235c:	4613      	mov	r3, r2
 800235e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	0419      	lsls	r1, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	430a      	orrs	r2, r1
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28
 800237c:	e028      	b.n	80023d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e00d      	b.n	80023ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3340      	adds	r3, #64	@ 0x40
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3ec      	bcc.n	8002392 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023b8:	883b      	ldrh	r3, [r7, #0]
 80023ba:	0418      	lsls	r0, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4302      	orrs	r2, r0
 80023c8:	3340      	adds	r3, #64	@ 0x40
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e267      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d075      	beq.n	8002522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002436:	4b88      	ldr	r3, [pc, #544]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00c      	beq.n	800245c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b85      	ldr	r3, [pc, #532]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800244a:	2b08      	cmp	r3, #8
 800244c:	d112      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d157      	bne.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e242      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x74>
 800247e:	4b76      	ldr	r3, [pc, #472]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a75      	ldr	r2, [pc, #468]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b70      	ldr	r3, [pc, #448]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6f      	ldr	r2, [pc, #444]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 80024b0:	4b69      	ldr	r3, [pc, #420]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a68      	ldr	r2, [pc, #416]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b66      	ldr	r3, [pc, #408]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a65      	ldr	r2, [pc, #404]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fa3e 	bl	8000950 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fa3a 	bl	8000950 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e207      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fa2a 	bl	8000950 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fa26 	bl	8000950 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1f3      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b51      	ldr	r3, [pc, #324]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252e:	4b4a      	ldr	r3, [pc, #296]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b47      	ldr	r3, [pc, #284]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b44      	ldr	r3, [pc, #272]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1c7      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4937      	ldr	r1, [pc, #220]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b34      	ldr	r3, [pc, #208]	@ (800265c <HAL_RCC_OscConfig+0x244>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe f9df 	bl	8000950 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe f9db 	bl	8000950 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1a8      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b28      	ldr	r3, [pc, #160]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4925      	ldr	r1, [pc, #148]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_RCC_OscConfig+0x244>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe f9be 	bl	8000950 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe f9ba 	bl	8000950 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e187      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d036      	beq.n	8002670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_RCC_OscConfig+0x248>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe f99e 	bl	8000950 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe f99a 	bl	8000950 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e167      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_OscConfig+0x240>)
 800262c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x200>
 8002636:	e01b      	b.n	8002670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002638:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_OscConfig+0x248>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe f987 	bl	8000950 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	e00e      	b.n	8002664 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe f983 	bl	8000950 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d907      	bls.n	8002664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e150      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
 8002658:	40023800 	.word	0x40023800
 800265c:	42470000 	.word	0x42470000
 8002660:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b88      	ldr	r3, [pc, #544]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ea      	bne.n	8002646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8097 	beq.w	80027ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b81      	ldr	r3, [pc, #516]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b7d      	ldr	r3, [pc, #500]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	4a7c      	ldr	r2, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	@ 0x40
 800269e:	4b7a      	ldr	r3, [pc, #488]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b77      	ldr	r3, [pc, #476]	@ (800288c <HAL_RCC_OscConfig+0x474>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b74      	ldr	r3, [pc, #464]	@ (800288c <HAL_RCC_OscConfig+0x474>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a73      	ldr	r2, [pc, #460]	@ (800288c <HAL_RCC_OscConfig+0x474>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe f943 	bl	8000950 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe f93f 	bl	8000950 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e10c      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <HAL_RCC_OscConfig+0x474>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x2ea>
 80026f4:	4b64      	ldr	r3, [pc, #400]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a63      	ldr	r2, [pc, #396]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x324>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x30c>
 800270a:	4b5f      	ldr	r3, [pc, #380]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	4a5e      	ldr	r2, [pc, #376]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	@ 0x70
 8002716:	4b5c      	ldr	r3, [pc, #368]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	4a5b      	ldr	r2, [pc, #364]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	@ 0x70
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x324>
 8002724:	4b58      	ldr	r3, [pc, #352]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a57      	ldr	r2, [pc, #348]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	4b55      	ldr	r3, [pc, #340]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4a54      	ldr	r2, [pc, #336]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe f904 	bl	8000950 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7fe f900 	bl	8000950 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0cb      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	4b49      	ldr	r3, [pc, #292]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ee      	beq.n	800274c <HAL_RCC_OscConfig+0x334>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7fe f8ee 	bl	8000950 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe f8ea 	bl	8000950 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0b5      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	4b3e      	ldr	r3, [pc, #248]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ee      	bne.n	8002778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	4a38      	ldr	r2, [pc, #224]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a1 	beq.w	80028f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b6:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d05c      	beq.n	800287c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d141      	bne.n	800284e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <HAL_RCC_OscConfig+0x478>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe f8be 	bl	8000950 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe f8ba 	bl	8000950 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e087      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	491b      	ldr	r1, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_RCC_OscConfig+0x478>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe f893 	bl	8000950 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe f88f 	bl	8000950 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e05c      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x416>
 800284c:	e054      	b.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <HAL_RCC_OscConfig+0x478>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f87c 	bl	8000950 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe f878 	bl	8000950 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e045      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_OscConfig+0x470>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x444>
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e038      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002894:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x4ec>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d028      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d121      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d11a      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0cc      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b68      	ldr	r3, [pc, #416]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d90c      	bls.n	8002944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b65      	ldr	r3, [pc, #404]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a58      	ldr	r2, [pc, #352]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a52      	ldr	r2, [pc, #328]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800297e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d044      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e067      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b37      	ldr	r3, [pc, #220]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4934      	ldr	r1, [pc, #208]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fd ffaa 	bl	8000950 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fd ffa6 	bl	8000950 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e04f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b25      	ldr	r3, [pc, #148]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d20c      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b22      	ldr	r3, [pc, #136]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd ff0a 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08006ec8 	.word	0x08006ec8
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b094      	sub	sp, #80	@ 0x50
 8002ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aec:	4b79      	ldr	r3, [pc, #484]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d00d      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x40>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	f200 80e1 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b06:	e0db      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b73      	ldr	r3, [pc, #460]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b0c:	e0db      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0e:	4b73      	ldr	r3, [pc, #460]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b12:	e0d8      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	2200      	movs	r2, #0
 8002b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	f04f 0000 	mov.w	r0, #0
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	0159      	lsls	r1, r3, #5
 8002b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b58:	0150      	lsls	r0, r2, #5
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4621      	mov	r1, r4
 8002b60:	1a51      	subs	r1, r2, r1
 8002b62:	6139      	str	r1, [r7, #16]
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b78:	4659      	mov	r1, fp
 8002b7a:	018b      	lsls	r3, r1, #6
 8002b7c:	4651      	mov	r1, sl
 8002b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b82:	4651      	mov	r1, sl
 8002b84:	018a      	lsls	r2, r1, #6
 8002b86:	4651      	mov	r1, sl
 8002b88:	ebb2 0801 	subs.w	r8, r2, r1
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba6:	4690      	mov	r8, r2
 8002ba8:	4699      	mov	r9, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	eb18 0303 	adds.w	r3, r8, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	eb49 0303 	adc.w	r3, r9, r3
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	024b      	lsls	r3, r1, #9
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	024a      	lsls	r2, r1, #9
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be4:	f7fd faf0 	bl	80001c8 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf0:	e058      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	0159      	lsls	r1, r3, #5
 8002c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1e:	0150      	lsls	r0, r2, #5
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4641      	mov	r1, r8
 8002c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c44:	ebb2 040a 	subs.w	r4, r2, sl
 8002c48:	eb63 050b 	sbc.w	r5, r3, fp
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	00eb      	lsls	r3, r5, #3
 8002c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5a:	00e2      	lsls	r2, r4, #3
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	461d      	mov	r5, r3
 8002c60:	4643      	mov	r3, r8
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	464b      	mov	r3, r9
 8002c68:	eb45 0303 	adc.w	r3, r5, r3
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	028b      	lsls	r3, r1, #10
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c84:	4621      	mov	r1, r4
 8002c86:	028a      	lsls	r2, r1, #10
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	61fa      	str	r2, [r7, #28]
 8002c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c98:	f7fd fa96 	bl	80001c8 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3750      	adds	r7, #80	@ 0x50
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	007a1200 	.word	0x007a1200

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cfe:	f7fd fe27 	bl	8000950 <HAL_GetTick>
 8002d02:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d04:	4b5d      	ldr	r3, [pc, #372]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5c      	ldr	r2, [pc, #368]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d12:	f7fd fe1d 	bl	8000950 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0a7      	b.n	8002e74 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002d24:	4b55      	ldr	r3, [pc, #340]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002d30:	4b52      	ldr	r3, [pc, #328]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a51      	ldr	r2, [pc, #324]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d3c:	f7fd fe08 	bl	8000950 <HAL_GetTick>
 8002d40:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002d42:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4a:	f7fd fe01 	bl	8000950 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e089      	b.n	8002e74 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002d60:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ee      	bne.n	8002d4a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d6c:	f7fd fdf0 	bl	8000950 <HAL_GetTick>
 8002d70:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002d72:	4b42      	ldr	r3, [pc, #264]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a41      	ldr	r2, [pc, #260]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d78:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fd fde6 	bl	8000950 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e070      	b.n	8002e74 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d9e:	f7fd fdd7 	bl	8000950 <HAL_GetTick>
 8002da2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002da4:	4b35      	ldr	r3, [pc, #212]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a34      	ldr	r2, [pc, #208]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fd fdcd 	bl	8000950 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e057      	b.n	8002e74 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002dd0:	f7fd fdbe 	bl	8000950 <HAL_GetTick>
 8002dd4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002dd6:	4b29      	ldr	r3, [pc, #164]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a28      	ldr	r2, [pc, #160]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002ddc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002de0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002de4:	f7fd fdb4 	bl	8000950 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e03e      	b.n	8002e74 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002df6:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e04:	4a1e      	ldr	r2, [pc, #120]	@ (8002e80 <HAL_RCC_DeInit+0x188>)
 8002e06:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002e08:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e84 <HAL_RCC_DeInit+0x18c>)
 8002e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e16:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002e1a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e26:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002e28:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e2e:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8002e32:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a10      	ldr	r2, [pc, #64]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e3e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <HAL_RCC_DeInit+0x184>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_DeInit+0x190>)
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <HAL_RCC_DeInit+0x194>)
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <HAL_RCC_DeInit+0x198>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fd30 	bl	80008c8 <HAL_InitTick>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	04003010 	.word	0x04003010
 8002e84:	20003000 	.word	0x20003000
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	20000004 	.word	0x20000004

08002e94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e94:	b084      	sub	sp, #16
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	f107 001c 	add.w	r0, r7, #28
 8002ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ea6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d123      	bne.n	8002ef6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f001 fae8 	bl	80044c0 <USB_CoreReset>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e01b      	b.n	8002f2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f001 fadc 	bl	80044c0 <USB_CoreReset>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f20:	e005      	b.n	8002f2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f2e:	7fbb      	ldrb	r3, [r7, #30]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10b      	bne.n	8002f4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f043 0206 	orr.w	r2, r3, #6
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f58:	b004      	add	sp, #16
 8002f5a:	4770      	bx	lr

08002f5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d165      	bne.n	800303c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4a41      	ldr	r2, [pc, #260]	@ (8003078 <USB_SetTurnaroundTime+0x11c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d906      	bls.n	8002f86 <USB_SetTurnaroundTime+0x2a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a40      	ldr	r2, [pc, #256]	@ (800307c <USB_SetTurnaroundTime+0x120>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d202      	bcs.n	8002f86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f80:	230f      	movs	r3, #15
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e062      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4a3c      	ldr	r2, [pc, #240]	@ (800307c <USB_SetTurnaroundTime+0x120>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d306      	bcc.n	8002f9c <USB_SetTurnaroundTime+0x40>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a3b      	ldr	r2, [pc, #236]	@ (8003080 <USB_SetTurnaroundTime+0x124>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d202      	bcs.n	8002f9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f96:	230e      	movs	r3, #14
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e057      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4a38      	ldr	r2, [pc, #224]	@ (8003080 <USB_SetTurnaroundTime+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d306      	bcc.n	8002fb2 <USB_SetTurnaroundTime+0x56>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a37      	ldr	r2, [pc, #220]	@ (8003084 <USB_SetTurnaroundTime+0x128>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d202      	bcs.n	8002fb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002fac:	230d      	movs	r3, #13
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e04c      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4a33      	ldr	r2, [pc, #204]	@ (8003084 <USB_SetTurnaroundTime+0x128>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d306      	bcc.n	8002fc8 <USB_SetTurnaroundTime+0x6c>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <USB_SetTurnaroundTime+0x12c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e041      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a2f      	ldr	r2, [pc, #188]	@ (8003088 <USB_SetTurnaroundTime+0x12c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d906      	bls.n	8002fde <USB_SetTurnaroundTime+0x82>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800308c <USB_SetTurnaroundTime+0x130>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d802      	bhi.n	8002fde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002fd8:	230b      	movs	r3, #11
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e036      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800308c <USB_SetTurnaroundTime+0x130>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d906      	bls.n	8002ff4 <USB_SetTurnaroundTime+0x98>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4a29      	ldr	r2, [pc, #164]	@ (8003090 <USB_SetTurnaroundTime+0x134>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d802      	bhi.n	8002ff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002fee:	230a      	movs	r3, #10
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e02b      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <USB_SetTurnaroundTime+0x134>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d906      	bls.n	800300a <USB_SetTurnaroundTime+0xae>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <USB_SetTurnaroundTime+0x138>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d202      	bcs.n	800300a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003004:	2309      	movs	r3, #9
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e020      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <USB_SetTurnaroundTime+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d306      	bcc.n	8003020 <USB_SetTurnaroundTime+0xc4>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <USB_SetTurnaroundTime+0x13c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d802      	bhi.n	8003020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800301a:	2308      	movs	r3, #8
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e015      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <USB_SetTurnaroundTime+0x13c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d906      	bls.n	8003036 <USB_SetTurnaroundTime+0xda>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a1c      	ldr	r2, [pc, #112]	@ (800309c <USB_SetTurnaroundTime+0x140>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d202      	bcs.n	8003036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003030:	2307      	movs	r3, #7
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e00a      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003036:	2306      	movs	r3, #6
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e007      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003042:	2309      	movs	r3, #9
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e001      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003048:	2309      	movs	r3, #9
 800304a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	029b      	lsls	r3, r3, #10
 8003060:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	00d8acbf 	.word	0x00d8acbf
 800307c:	00e4e1c0 	.word	0x00e4e1c0
 8003080:	00f42400 	.word	0x00f42400
 8003084:	01067380 	.word	0x01067380
 8003088:	011a499f 	.word	0x011a499f
 800308c:	01312cff 	.word	0x01312cff
 8003090:	014ca43f 	.word	0x014ca43f
 8003094:	016e3600 	.word	0x016e3600
 8003098:	01a6ab1f 	.word	0x01a6ab1f
 800309c:	01e84800 	.word	0x01e84800

080030a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d115      	bne.n	8003132 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003112:	200a      	movs	r0, #10
 8003114:	f7fd fc28 	bl	8000968 <HAL_Delay>
      ms += 10U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	330a      	adds	r3, #10
 800311c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f001 f93f 	bl	80043a2 <USB_GetMode>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d01e      	beq.n	8003168 <USB_SetCurrentMode+0x84>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2bc7      	cmp	r3, #199	@ 0xc7
 800312e:	d9f0      	bls.n	8003112 <USB_SetCurrentMode+0x2e>
 8003130:	e01a      	b.n	8003168 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d115      	bne.n	8003164 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003144:	200a      	movs	r0, #10
 8003146:	f7fd fc0f 	bl	8000968 <HAL_Delay>
      ms += 10U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	330a      	adds	r3, #10
 800314e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f001 f926 	bl	80043a2 <USB_GetMode>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <USB_SetCurrentMode+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003160:	d9f0      	bls.n	8003144 <USB_SetCurrentMode+0x60>
 8003162:	e001      	b.n	8003168 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e005      	b.n	8003174 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2bc8      	cmp	r3, #200	@ 0xc8
 800316c:	d101      	bne.n	8003172 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800317c:	b084      	sub	sp, #16
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800318a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e009      	b.n	80031b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3340      	adds	r3, #64	@ 0x40
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0e      	cmp	r3, #14
 80031b4:	d9f2      	bls.n	800319c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11c      	bne.n	80031f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80031f6:	e00b      	b.n	8003210 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10d      	bne.n	8003240 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800322c:	2100      	movs	r1, #0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f968 	bl	8003504 <USB_SetDevSpeed>
 8003234:	e008      	b.n	8003248 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003236:	2101      	movs	r1, #1
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f963 	bl	8003504 <USB_SetDevSpeed>
 800323e:	e003      	b.n	8003248 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003240:	2103      	movs	r1, #3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f95e 	bl	8003504 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003248:	2110      	movs	r1, #16
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8fa 	bl	8003444 <USB_FlushTxFifo>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f924 	bl	80034a8 <USB_FlushRxFifo>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003270:	461a      	mov	r2, r3
 8003272:	2300      	movs	r3, #0
 8003274:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003288:	461a      	mov	r2, r3
 800328a:	2300      	movs	r3, #0
 800328c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e043      	b.n	800331c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032aa:	d118      	bne.n	80032de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032be:	461a      	mov	r2, r3
 80032c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e013      	b.n	80032f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e008      	b.n	80032f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fc:	461a      	mov	r2, r3
 80032fe:	2300      	movs	r3, #0
 8003300:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800330e:	461a      	mov	r2, r3
 8003310:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	3301      	adds	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003320:	461a      	mov	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4293      	cmp	r3, r2
 8003326:	d3b5      	bcc.n	8003294 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e043      	b.n	80033b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003344:	d118      	bne.n	8003378 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e013      	b.n	800338a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e008      	b.n	800338a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a8:	461a      	mov	r2, r3
 80033aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	3301      	adds	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033ba:	461a      	mov	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d3b5      	bcc.n	800332e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80033e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <USB_DevInit+0x2c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003404:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f043 0208 	orr.w	r2, r3, #8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003418:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800343c:	b004      	add	sp, #16
 800343e:	4770      	bx	lr
 8003440:	803c3800 	.word	0x803c3800

08003444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800345e:	d901      	bls.n	8003464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e01b      	b.n	800349c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	daf2      	bge.n	8003452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	019b      	lsls	r3, r3, #6
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003488:	d901      	bls.n	800348e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e006      	b.n	800349c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d0f0      	beq.n	800347c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034c0:	d901      	bls.n	80034c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e018      	b.n	80034f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	daf2      	bge.n	80034b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2210      	movs	r2, #16
 80034d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034e4:	d901      	bls.n	80034ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e006      	b.n	80034f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d0f0      	beq.n	80034d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]
 800355a:	e00a      	b.n	8003572 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d002      	beq.n	8003568 <USB_GetDevSpeed+0x32>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d102      	bne.n	800356e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003568:	2302      	movs	r3, #2
 800356a:	75fb      	strb	r3, [r7, #23]
 800356c:	e001      	b.n	8003572 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800356e:	230f      	movs	r3, #15
 8003570:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d13a      	bne.n	8003612 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d155      	bne.n	8003680 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	059b      	lsls	r3, r3, #22
 80035f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035f8:	4313      	orrs	r3, r2
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e036      	b.n	8003680 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d11a      	bne.n	8003680 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	791b      	ldrb	r3, [r3, #4]
 8003664:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003666:	430b      	orrs	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d161      	bne.n	8003770 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036c2:	d11f      	bne.n	8003704 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	0151      	lsls	r1, r2, #5
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	440a      	add	r2, r1
 80036da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003702:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	b29b      	uxth	r3, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003724:	4013      	ands	r3, r2
 8003726:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003748:	4013      	ands	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	0159      	lsls	r1, r3, #5
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	440b      	add	r3, r1
 8003762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003766:	4619      	mov	r1, r3
 8003768:	4b35      	ldr	r3, [pc, #212]	@ (8003840 <USB_DeactivateEndpoint+0x1b0>)
 800376a:	4013      	ands	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
 800376e:	e060      	b.n	8003832 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003786:	d11f      	bne.n	80037c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	440a      	add	r2, r1
 800379e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	43db      	mvns	r3, r3
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037e8:	4013      	ands	r3, r2
 80037ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	43db      	mvns	r3, r3
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800380c:	4013      	ands	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	440b      	add	r3, r1
 8003826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382a:	4619      	mov	r1, r3
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <USB_DeactivateEndpoint+0x1b4>)
 800382e:	4013      	ands	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	ec337800 	.word	0xec337800
 8003844:	eff37800 	.word	0xeff37800

08003848 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 817f 	bne.w	8003b68 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d132      	bne.n	80038d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800388c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003890:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038d0:	0cdb      	lsrs	r3, r3, #19
 80038d2:	04db      	lsls	r3, r3, #19
 80038d4:	6113      	str	r3, [r2, #16]
 80038d6:	e097      	b.n	8003a08 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038f2:	0cdb      	lsrs	r3, r3, #19
 80038f4:	04db      	lsls	r3, r3, #19
 80038f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003912:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003916:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800391a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11a      	bne.n	8003958 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003950:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003954:	6113      	str	r3, [r2, #16]
 8003956:	e044      	b.n	80039e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4413      	add	r3, r2
 8003962:	1e5a      	subs	r2, r3, #1
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	04d9      	lsls	r1, r3, #19
 8003980:	4ba4      	ldr	r3, [pc, #656]	@ (8003c14 <USB_EPStartXfer+0x3cc>)
 8003982:	400b      	ands	r3, r1
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	0148      	lsls	r0, r1, #5
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	4401      	add	r1, r0
 800398c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	791b      	ldrb	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d122      	bne.n	80039e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80039ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	075b      	lsls	r3, r3, #29
 80039ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	0148      	lsls	r0, r1, #5
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	4401      	add	r1, r0
 80039da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	69b9      	ldr	r1, [r7, #24]
 80039fa:	0148      	lsls	r0, r1, #5
 80039fc:	69f9      	ldr	r1, [r7, #28]
 80039fe:	4401      	add	r1, r0
 8003a00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d14b      	bne.n	8003aa6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	791b      	ldrb	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d128      	bne.n	8003a84 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d110      	bne.n	8003a64 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00f      	b.n	8003a84 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a82:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e166      	b.n	8003d74 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ac0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ac4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d015      	beq.n	8003afa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 814e 	beq.w	8003d74 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	69f9      	ldr	r1, [r7, #28]
 8003af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af4:	4313      	orrs	r3, r2
 8003af6:	634b      	str	r3, [r1, #52]	@ 0x34
 8003af8:	e13c      	b.n	8003d74 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d110      	bne.n	8003b2c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00f      	b.n	8003b4c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	68d9      	ldr	r1, [r3, #12]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	b298      	uxth	r0, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	4603      	mov	r3, r0
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f9b9 	bl	8003ed8 <USB_WritePacket>
 8003b66:	e105      	b.n	8003d74 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b82:	0cdb      	lsrs	r3, r3, #19
 8003b84:	04db      	lsls	r3, r3, #19
 8003b86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ba2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ba6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003baa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d132      	bne.n	8003c18 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be0:	69b9      	ldr	r1, [r7, #24]
 8003be2:	0148      	lsls	r0, r1, #5
 8003be4:	69f9      	ldr	r1, [r7, #28]
 8003be6:	4401      	add	r1, r0
 8003be8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003bec:	4313      	orrs	r3, r2
 8003bee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c0e:	6113      	str	r3, [r2, #16]
 8003c10:	e062      	b.n	8003cd8 <USB_EPStartXfer+0x490>
 8003c12:	bf00      	nop
 8003c14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d123      	bne.n	8003c68 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	0148      	lsls	r0, r1, #5
 8003c3a:	69f9      	ldr	r1, [r7, #28]
 8003c3c:	4401      	add	r1, r0
 8003c3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c64:	6113      	str	r3, [r2, #16]
 8003c66:	e037      	b.n	8003cd8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	8afa      	ldrh	r2, [r7, #22]
 8003c84:	fb03 f202 	mul.w	r2, r3, r2
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	8afb      	ldrh	r3, [r7, #22]
 8003c9c:	04d9      	lsls	r1, r3, #19
 8003c9e:	4b38      	ldr	r3, [pc, #224]	@ (8003d80 <USB_EPStartXfer+0x538>)
 8003ca0:	400b      	ands	r3, r1
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	0148      	lsls	r0, r1, #5
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	4401      	add	r1, r0
 8003caa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	0148      	lsls	r0, r1, #5
 8003ccc:	69f9      	ldr	r1, [r7, #28]
 8003cce:	4401      	add	r1, r0
 8003cd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d10d      	bne.n	8003cfa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	68d9      	ldr	r1, [r3, #12]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	791b      	ldrb	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d128      	bne.n	8003d54 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d110      	bne.n	8003d34 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00f      	b.n	8003d54 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	1ff80000 	.word	0x1ff80000

08003d84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d14a      	bne.n	8003e38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dba:	f040 8086 	bne.w	8003eca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ddc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003de0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d902      	bls.n	8003e1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
          break;
 8003e1a:	e056      	b.n	8003eca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e34:	d0e7      	beq.n	8003e06 <USB_EPStopXfer+0x82>
 8003e36:	e048      	b.n	8003eca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e50:	d13b      	bne.n	8003eca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d902      	bls.n	8003eb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
          break;
 8003eae:	e00c      	b.n	8003eca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ec8:	d0e7      	beq.n	8003e9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	@ 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	71fb      	strb	r3, [r7, #7]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d123      	bne.n	8003f46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003efe:	88bb      	ldrh	r3, [r7, #4]
 8003f00:	3303      	adds	r3, #3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e018      	b.n	8003f3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	031a      	lsls	r2, r3, #12
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f18:	461a      	mov	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3e2      	bcc.n	8003f0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3724      	adds	r7, #36	@ 0x24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b08b      	sub	sp, #44	@ 0x2c
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	e014      	b.n	8003faa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	3301      	adds	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	3301      	adds	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d3e6      	bcc.n	8003f80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fb2:	8bfb      	ldrh	r3, [r7, #30]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01e      	beq.n	8003ff6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	701a      	strb	r2, [r3, #0]
      i++;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003fea:	8bfb      	ldrh	r3, [r7, #30]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ff0:	8bfb      	ldrh	r3, [r7, #30]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ea      	bne.n	8003fcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	372c      	adds	r7, #44	@ 0x2c
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d12c      	bne.n	800407a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db12      	blt.n	8004058 <USB_EPSetStall+0x54>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00f      	beq.n	8004058 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004052:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004056:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004072:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e02b      	b.n	80040d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	db12      	blt.n	80040b2 <USB_EPSetStall+0xae>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00f      	beq.n	80040b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d128      	bne.n	800414e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	0151      	lsls	r1, r2, #5
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	440a      	add	r2, r1
 8004112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004116:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800411a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	791b      	ldrb	r3, [r3, #4]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d003      	beq.n	800412c <USB_EPClearStall+0x4c>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	791b      	ldrb	r3, [r3, #4]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d138      	bne.n	800419e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e027      	b.n	800419e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	440a      	add	r2, r1
 8004164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004168:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800416c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d003      	beq.n	800417e <USB_EPClearStall+0x9e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	791b      	ldrb	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d10f      	bne.n	800419e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004226:	f023 0302 	bic.w	r3, r3, #2
 800422a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004254:	f023 0303 	bic.w	r3, r3, #3
 8004258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4013      	ands	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	0c1b      	lsrs	r3, r3, #16
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	b29b      	uxth	r3, r3
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004338:	68bb      	ldr	r3, [r7, #8]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004346:	b480      	push	{r7}
 8004348:	b087      	sub	sp, #28
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004368:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	01db      	lsls	r3, r3, #7
 8004378:	b2db      	uxtb	r3, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004394:	68bb      	ldr	r3, [r7, #8]
}
 8004396:	4618      	mov	r0, r3
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0301 	and.w	r3, r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043dc:	f023 0307 	bic.w	r3, r3, #7
 80043e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	460b      	mov	r3, r1
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	333c      	adds	r3, #60	@ 0x3c
 800441a:	3304      	adds	r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <USB_EP0_OutStart+0xb8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d90a      	bls.n	800443e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004438:	d101      	bne.n	800443e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e037      	b.n	80044ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800445c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800446c:	f043 0318 	orr.w	r3, r3, #24
 8004470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004480:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004484:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d10f      	bne.n	80044ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80044aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	4f54300a 	.word	0x4f54300a

080044c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044d8:	d901      	bls.n	80044de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e01b      	b.n	8004516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	daf2      	bge.n	80044cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004502:	d901      	bls.n	8004508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d0f0      	beq.n	80044f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004530:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004534:	f002 fc28 	bl	8006d88 <USBD_static_malloc>
 8004538:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	32b0      	adds	r2, #176	@ 0xb0
 800454a:	2100      	movs	r1, #0
 800454c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004550:	2302      	movs	r3, #2
 8004552:	e0d4      	b.n	80046fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004554:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004558:	2100      	movs	r1, #0
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f002 fc58 	bl	8006e10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	32b0      	adds	r2, #176	@ 0xb0
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	32b0      	adds	r2, #176	@ 0xb0
 800457a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7c1b      	ldrb	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d138      	bne.n	80045fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800458c:	4b5e      	ldr	r3, [pc, #376]	@ (8004708 <USBD_CDC_Init+0x1e4>)
 800458e:	7819      	ldrb	r1, [r3, #0]
 8004590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004594:	2202      	movs	r2, #2
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f002 fad3 	bl	8006b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800459c:	4b5a      	ldr	r3, [pc, #360]	@ (8004708 <USBD_CDC_Init+0x1e4>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3324      	adds	r3, #36	@ 0x24
 80045b2:	2201      	movs	r2, #1
 80045b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045b6:	4b55      	ldr	r3, [pc, #340]	@ (800470c <USBD_CDC_Init+0x1e8>)
 80045b8:	7819      	ldrb	r1, [r3, #0]
 80045ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045be:	2202      	movs	r2, #2
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f002 fabe 	bl	8006b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045c6:	4b51      	ldr	r3, [pc, #324]	@ (800470c <USBD_CDC_Init+0x1e8>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 020f 	and.w	r2, r3, #15
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80045de:	2201      	movs	r2, #1
 80045e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004710 <USBD_CDC_Init+0x1ec>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3326      	adds	r3, #38	@ 0x26
 80045f8:	2210      	movs	r2, #16
 80045fa:	801a      	strh	r2, [r3, #0]
 80045fc:	e035      	b.n	800466a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045fe:	4b42      	ldr	r3, [pc, #264]	@ (8004708 <USBD_CDC_Init+0x1e4>)
 8004600:	7819      	ldrb	r1, [r3, #0]
 8004602:	2340      	movs	r3, #64	@ 0x40
 8004604:	2202      	movs	r2, #2
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f002 fa9b 	bl	8006b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800460c:	4b3e      	ldr	r3, [pc, #248]	@ (8004708 <USBD_CDC_Init+0x1e4>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3324      	adds	r3, #36	@ 0x24
 8004622:	2201      	movs	r2, #1
 8004624:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <USBD_CDC_Init+0x1e8>)
 8004628:	7819      	ldrb	r1, [r3, #0]
 800462a:	2340      	movs	r3, #64	@ 0x40
 800462c:	2202      	movs	r2, #2
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f002 fa87 	bl	8006b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004634:	4b35      	ldr	r3, [pc, #212]	@ (800470c <USBD_CDC_Init+0x1e8>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800464c:	2201      	movs	r2, #1
 800464e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004650:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <USBD_CDC_Init+0x1ec>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	3326      	adds	r3, #38	@ 0x26
 8004666:	2210      	movs	r2, #16
 8004668:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800466a:	4b29      	ldr	r3, [pc, #164]	@ (8004710 <USBD_CDC_Init+0x1ec>)
 800466c:	7819      	ldrb	r1, [r3, #0]
 800466e:	2308      	movs	r3, #8
 8004670:	2203      	movs	r2, #3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f002 fa65 	bl	8006b42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004678:	4b25      	ldr	r3, [pc, #148]	@ (8004710 <USBD_CDC_Init+0x1ec>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3324      	adds	r3, #36	@ 0x24
 800468e:	2201      	movs	r2, #1
 8004690:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	33b0      	adds	r3, #176	@ 0xb0
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80046c8:	2302      	movs	r3, #2
 80046ca:	e018      	b.n	80046fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	7c1b      	ldrb	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046d4:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <USBD_CDC_Init+0x1e8>)
 80046d6:	7819      	ldrb	r1, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f002 fb1c 	bl	8006d20 <USBD_LL_PrepareReceive>
 80046e8:	e008      	b.n	80046fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046ea:	4b08      	ldr	r3, [pc, #32]	@ (800470c <USBD_CDC_Init+0x1e8>)
 80046ec:	7819      	ldrb	r1, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046f4:	2340      	movs	r3, #64	@ 0x40
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f002 fb12 	bl	8006d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000093 	.word	0x20000093
 800470c:	20000094 	.word	0x20000094
 8004710:	20000095 	.word	0x20000095

08004714 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004720:	4b3a      	ldr	r3, [pc, #232]	@ (800480c <USBD_CDC_DeInit+0xf8>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f002 fa31 	bl	8006b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800472c:	4b37      	ldr	r3, [pc, #220]	@ (800480c <USBD_CDC_DeInit+0xf8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3324      	adds	r3, #36	@ 0x24
 8004742:	2200      	movs	r2, #0
 8004744:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004746:	4b32      	ldr	r3, [pc, #200]	@ (8004810 <USBD_CDC_DeInit+0xfc>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f002 fa1e 	bl	8006b8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004752:	4b2f      	ldr	r3, [pc, #188]	@ (8004810 <USBD_CDC_DeInit+0xfc>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f003 020f 	and.w	r2, r3, #15
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800476a:	2200      	movs	r2, #0
 800476c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800476e:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <USBD_CDC_DeInit+0x100>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f002 fa0a 	bl	8006b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800477a:	4b26      	ldr	r3, [pc, #152]	@ (8004814 <USBD_CDC_DeInit+0x100>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	3324      	adds	r3, #36	@ 0x24
 8004790:	2200      	movs	r2, #0
 8004792:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004794:	4b1f      	ldr	r3, [pc, #124]	@ (8004814 <USBD_CDC_DeInit+0x100>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f003 020f 	and.w	r2, r3, #15
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3326      	adds	r3, #38	@ 0x26
 80047aa:	2200      	movs	r2, #0
 80047ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	32b0      	adds	r2, #176	@ 0xb0
 80047b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01f      	beq.n	8004800 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	33b0      	adds	r3, #176	@ 0xb0
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	32b0      	adds	r2, #176	@ 0xb0
 80047de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f002 fade 	bl	8006da4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	32b0      	adds	r2, #176	@ 0xb0
 80047f2:	2100      	movs	r1, #0
 80047f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000093 	.word	0x20000093
 8004810:	20000094 	.word	0x20000094
 8004814:	20000095 	.word	0x20000095

08004818 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	32b0      	adds	r2, #176	@ 0xb0
 800482c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004830:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004844:	2303      	movs	r3, #3
 8004846:	e0bf      	b.n	80049c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004850:	2b00      	cmp	r3, #0
 8004852:	d050      	beq.n	80048f6 <USBD_CDC_Setup+0xde>
 8004854:	2b20      	cmp	r3, #32
 8004856:	f040 80af 	bne.w	80049b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	88db      	ldrh	r3, [r3, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03a      	beq.n	80048d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b25b      	sxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	da1b      	bge.n	80048a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	33b0      	adds	r3, #176	@ 0xb0
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004882:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	88d2      	ldrh	r2, [r2, #6]
 8004888:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	88db      	ldrh	r3, [r3, #6]
 800488e:	2b07      	cmp	r3, #7
 8004890:	bf28      	it	cs
 8004892:	2307      	movcs	r3, #7
 8004894:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	89fa      	ldrh	r2, [r7, #14]
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 fd53 	bl	8006348 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80048a2:	e090      	b.n	80049c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	785a      	ldrb	r2, [r3, #1]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	88db      	ldrh	r3, [r3, #6]
 80048b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80048b4:	d803      	bhi.n	80048be <USBD_CDC_Setup+0xa6>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	88db      	ldrh	r3, [r3, #6]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	e000      	b.n	80048c0 <USBD_CDC_Setup+0xa8>
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80048c6:	6939      	ldr	r1, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80048ce:	461a      	mov	r2, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 fd65 	bl	80063a0 <USBD_CtlPrepareRx>
      break;
 80048d6:	e076      	b.n	80049c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	33b0      	adds	r3, #176	@ 0xb0
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	7850      	ldrb	r0, [r2, #1]
 80048ee:	2200      	movs	r2, #0
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	4798      	blx	r3
      break;
 80048f4:	e067      	b.n	80049c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	2b0b      	cmp	r3, #11
 80048fc:	d851      	bhi.n	80049a2 <USBD_CDC_Setup+0x18a>
 80048fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004904 <USBD_CDC_Setup+0xec>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004935 	.word	0x08004935
 8004908:	080049b1 	.word	0x080049b1
 800490c:	080049a3 	.word	0x080049a3
 8004910:	080049a3 	.word	0x080049a3
 8004914:	080049a3 	.word	0x080049a3
 8004918:	080049a3 	.word	0x080049a3
 800491c:	080049a3 	.word	0x080049a3
 8004920:	080049a3 	.word	0x080049a3
 8004924:	080049a3 	.word	0x080049a3
 8004928:	080049a3 	.word	0x080049a3
 800492c:	0800495f 	.word	0x0800495f
 8004930:	08004989 	.word	0x08004989
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b03      	cmp	r3, #3
 800493e:	d107      	bne.n	8004950 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004940:	f107 030a 	add.w	r3, r7, #10
 8004944:	2202      	movs	r2, #2
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 fcfd 	bl	8006348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800494e:	e032      	b.n	80049b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fc7b 	bl	800624e <USBD_CtlError>
            ret = USBD_FAIL;
 8004958:	2303      	movs	r3, #3
 800495a:	75fb      	strb	r3, [r7, #23]
          break;
 800495c:	e02b      	b.n	80049b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b03      	cmp	r3, #3
 8004968:	d107      	bne.n	800497a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800496a:	f107 030d 	add.w	r3, r7, #13
 800496e:	2201      	movs	r2, #1
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f001 fce8 	bl	8006348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004978:	e01d      	b.n	80049b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 fc66 	bl	800624e <USBD_CtlError>
            ret = USBD_FAIL;
 8004982:	2303      	movs	r3, #3
 8004984:	75fb      	strb	r3, [r7, #23]
          break;
 8004986:	e016      	b.n	80049b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d00f      	beq.n	80049b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 fc59 	bl	800624e <USBD_CtlError>
            ret = USBD_FAIL;
 800499c:	2303      	movs	r3, #3
 800499e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049a0:	e008      	b.n	80049b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 fc52 	bl	800624e <USBD_CtlError>
          ret = USBD_FAIL;
 80049aa:	2303      	movs	r3, #3
 80049ac:	75fb      	strb	r3, [r7, #23]
          break;
 80049ae:	e002      	b.n	80049b6 <USBD_CDC_Setup+0x19e>
          break;
 80049b0:	bf00      	nop
 80049b2:	e008      	b.n	80049c6 <USBD_CDC_Setup+0x1ae>
          break;
 80049b4:	bf00      	nop
      }
      break;
 80049b6:	e006      	b.n	80049c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 fc47 	bl	800624e <USBD_CtlError>
      ret = USBD_FAIL;
 80049c0:	2303      	movs	r3, #3
 80049c2:	75fb      	strb	r3, [r7, #23]
      break;
 80049c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80049e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	32b0      	adds	r2, #176	@ 0xb0
 80049ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e065      	b.n	8004ac6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	32b0      	adds	r2, #176	@ 0xb0
 8004a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3318      	adds	r3, #24
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02f      	beq.n	8004a84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3318      	adds	r3, #24
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 010f 	and.w	r1, r3, #15
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	460b      	mov	r3, r1
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4403      	add	r3, r0
 8004a4c:	331c      	adds	r3, #28
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d112      	bne.n	8004a84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3318      	adds	r3, #24
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a76:	78f9      	ldrb	r1, [r7, #3]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f002 f92e 	bl	8006cde <USBD_LL_Transmit>
 8004a82:	e01f      	b.n	8004ac4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	33b0      	adds	r3, #176	@ 0xb0
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d010      	beq.n	8004ac4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	33b0      	adds	r3, #176	@ 0xb0
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	32b0      	adds	r2, #176	@ 0xb0
 8004ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	32b0      	adds	r2, #176	@ 0xb0
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e01a      	b.n	8004b36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f002 f92c 	bl	8006d62 <USBD_LL_GetRxDataSize>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	33b0      	adds	r3, #176	@ 0xb0
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004b30:	4611      	mov	r1, r2
 8004b32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	32b0      	adds	r2, #176	@ 0xb0
 8004b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e024      	b.n	8004baa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	33b0      	adds	r3, #176	@ 0xb0
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <USBD_CDC_EP0_RxReady+0x6a>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004b7a:	2bff      	cmp	r3, #255	@ 0xff
 8004b7c:	d014      	beq.n	8004ba8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	33b0      	adds	r3, #176	@ 0xb0
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004b96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	22ff      	movs	r2, #255	@ 0xff
 8004ba4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bbc:	2182      	movs	r1, #130	@ 0x82
 8004bbe:	4818      	ldr	r0, [pc, #96]	@ (8004c20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bc0:	f000 fd0f 	bl	80055e2 <USBD_GetEpDesc>
 8004bc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4815      	ldr	r0, [pc, #84]	@ (8004c20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bca:	f000 fd0a 	bl	80055e2 <USBD_GetEpDesc>
 8004bce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004bd0:	2181      	movs	r1, #129	@ 0x81
 8004bd2:	4813      	ldr	r0, [pc, #76]	@ (8004c20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bd4:	f000 fd05 	bl	80055e2 <USBD_GetEpDesc>
 8004bd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2210      	movs	r2, #16
 8004be4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf4:	711a      	strb	r2, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c08:	711a      	strb	r2, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2243      	movs	r2, #67	@ 0x43
 8004c12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c14:	4b02      	ldr	r3, [pc, #8]	@ (8004c20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000050 	.word	0x20000050

08004c24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c2c:	2182      	movs	r1, #130	@ 0x82
 8004c2e:	4818      	ldr	r0, [pc, #96]	@ (8004c90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c30:	f000 fcd7 	bl	80055e2 <USBD_GetEpDesc>
 8004c34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c36:	2101      	movs	r1, #1
 8004c38:	4815      	ldr	r0, [pc, #84]	@ (8004c90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c3a:	f000 fcd2 	bl	80055e2 <USBD_GetEpDesc>
 8004c3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c40:	2181      	movs	r1, #129	@ 0x81
 8004c42:	4813      	ldr	r0, [pc, #76]	@ (8004c90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c44:	f000 fccd 	bl	80055e2 <USBD_GetEpDesc>
 8004c48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2210      	movs	r2, #16
 8004c54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	711a      	strb	r2, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f042 0202 	orr.w	r2, r2, #2
 8004c68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	711a      	strb	r2, [r3, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f042 0202 	orr.w	r2, r2, #2
 8004c7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2243      	movs	r2, #67	@ 0x43
 8004c82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c84:	4b02      	ldr	r3, [pc, #8]	@ (8004c90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000050 	.word	0x20000050

08004c94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c9c:	2182      	movs	r1, #130	@ 0x82
 8004c9e:	4818      	ldr	r0, [pc, #96]	@ (8004d00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ca0:	f000 fc9f 	bl	80055e2 <USBD_GetEpDesc>
 8004ca4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4815      	ldr	r0, [pc, #84]	@ (8004d00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004caa:	f000 fc9a 	bl	80055e2 <USBD_GetEpDesc>
 8004cae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cb0:	2181      	movs	r1, #129	@ 0x81
 8004cb2:	4813      	ldr	r0, [pc, #76]	@ (8004d00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cb4:	f000 fc95 	bl	80055e2 <USBD_GetEpDesc>
 8004cb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cd4:	711a      	strb	r2, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce8:	711a      	strb	r2, [r3, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2243      	movs	r2, #67	@ 0x43
 8004cf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cf4:	4b02      	ldr	r3, [pc, #8]	@ (8004d00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000050 	.word	0x20000050

08004d04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	220a      	movs	r2, #10
 8004d10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d12:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	2000000c 	.word	0x2000000c

08004d24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e009      	b.n	8004d4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	33b0      	adds	r3, #176	@ 0xb0
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	32b0      	adds	r2, #176	@ 0xb0
 8004d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e008      	b.n	8004d90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	32b0      	adds	r2, #176	@ 0xb0
 8004db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e004      	b.n	8004dca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	32b0      	adds	r2, #176	@ 0xb0
 8004dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	32b0      	adds	r2, #176	@ 0xb0
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e018      	b.n	8004e38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	7c1b      	ldrb	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <USBD_CDC_ReceivePacket+0x68>)
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 ff7f 	bl	8006d20 <USBD_LL_PrepareReceive>
 8004e22:	e008      	b.n	8004e36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <USBD_CDC_ReceivePacket+0x68>)
 8004e26:	7819      	ldrb	r1, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e2e:	2340      	movs	r3, #64	@ 0x40
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 ff75 	bl	8006d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000094 	.word	0x20000094

08004e44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e01f      	b.n	8004e9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	79fa      	ldrb	r2, [r7, #7]
 8004e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f001 fdef 	bl	8006a74 <USBD_LL_Init>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e025      	b.n	8004f08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	32ae      	adds	r2, #174	@ 0xae
 8004ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00f      	beq.n	8004ef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	32ae      	adds	r2, #174	@ 0xae
 8004ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	f107 020e 	add.w	r2, r7, #14
 8004eec:	4610      	mov	r0, r2
 8004eee:	4798      	blx	r3
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 fdf7 	bl	8006b0c <USBD_LL_Start>
 8004f1e:	4603      	mov	r3, r0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	4611      	mov	r1, r2
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	4611      	mov	r1, r2
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f90c 	bl	80061da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d01a      	beq.n	800501c <USBD_LL_SetupStage+0x72>
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d822      	bhi.n	8005030 <USBD_LL_SetupStage+0x86>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <USBD_LL_SetupStage+0x4a>
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d00a      	beq.n	8005008 <USBD_LL_SetupStage+0x5e>
 8004ff2:	e01d      	b.n	8005030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fb63 	bl	80056c8 <USBD_StdDevReq>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]
      break;
 8005006:	e020      	b.n	800504a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fbcb 	bl	80057ac <USBD_StdItfReq>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]
      break;
 800501a:	e016      	b.n	800504a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fc2d 	bl	8005884 <USBD_StdEPReq>
 800502a:	4603      	mov	r3, r0
 800502c:	73fb      	strb	r3, [r7, #15]
      break;
 800502e:	e00c      	b.n	800504a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005036:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800503a:	b2db      	uxtb	r3, r3
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 fdc4 	bl	8006bcc <USBD_LL_StallEP>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	bf00      	nop
  }

  return ret;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	460b      	mov	r3, r1
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d16e      	bne.n	800514a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800507a:	2b03      	cmp	r3, #3
 800507c:	f040 8098 	bne.w	80051b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	429a      	cmp	r2, r3
 800508a:	d913      	bls.n	80050b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	1ad2      	subs	r2, r2, r3
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bf28      	it	cs
 80050a6:	4613      	movcs	r3, r2
 80050a8:	461a      	mov	r2, r3
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f001 f994 	bl	80063da <USBD_CtlContinueRx>
 80050b2:	e07d      	b.n	80051b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d014      	beq.n	80050ec <USBD_LL_DataOutStage+0x98>
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d81d      	bhi.n	8005102 <USBD_LL_DataOutStage+0xae>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <USBD_LL_DataOutStage+0x7c>
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <USBD_LL_DataOutStage+0x82>
 80050ce:	e018      	b.n	8005102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	75bb      	strb	r3, [r7, #22]
            break;
 80050d4:	e018      	b.n	8005108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa64 	bl	80055ae <USBD_CoreFindIF>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75bb      	strb	r3, [r7, #22]
            break;
 80050ea:	e00d      	b.n	8005108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	4619      	mov	r1, r3
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fa66 	bl	80055c8 <USBD_CoreFindEP>
 80050fc:	4603      	mov	r3, r0
 80050fe:	75bb      	strb	r3, [r7, #22]
            break;
 8005100:	e002      	b.n	8005108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	75bb      	strb	r3, [r7, #22]
            break;
 8005106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005108:	7dbb      	ldrb	r3, [r7, #22]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d119      	bne.n	8005142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d113      	bne.n	8005142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800511a:	7dba      	ldrb	r2, [r7, #22]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	32ae      	adds	r2, #174	@ 0xae
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00b      	beq.n	8005142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800512a:	7dba      	ldrb	r2, [r7, #22]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005132:	7dba      	ldrb	r2, [r7, #22]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	32ae      	adds	r2, #174	@ 0xae
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 f95a 	bl	80063fc <USBD_CtlSendStatus>
 8005148:	e032      	b.n	80051b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fa37 	bl	80055c8 <USBD_CoreFindEP>
 800515a:	4603      	mov	r3, r0
 800515c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800515e:	7dbb      	ldrb	r3, [r7, #22]
 8005160:	2bff      	cmp	r3, #255	@ 0xff
 8005162:	d025      	beq.n	80051b0 <USBD_LL_DataOutStage+0x15c>
 8005164:	7dbb      	ldrb	r3, [r7, #22]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d122      	bne.n	80051b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b03      	cmp	r3, #3
 8005174:	d117      	bne.n	80051a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005176:	7dba      	ldrb	r2, [r7, #22]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	32ae      	adds	r2, #174	@ 0xae
 800517c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00f      	beq.n	80051a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005186:	7dba      	ldrb	r2, [r7, #22]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800518e:	7dba      	ldrb	r2, [r7, #22]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	32ae      	adds	r2, #174	@ 0xae
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	7afa      	ldrb	r2, [r7, #11]
 800519c:	4611      	mov	r1, r2
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	4798      	blx	r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	e000      	b.n	80051b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	460b      	mov	r3, r1
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80051c8:	7afb      	ldrb	r3, [r7, #11]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d16f      	bne.n	80052ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3314      	adds	r3, #20
 80051d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d15a      	bne.n	8005294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d914      	bls.n	8005214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f001 f8bc 	bl	800637e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005206:	2300      	movs	r3, #0
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f001 fd87 	bl	8006d20 <USBD_LL_PrepareReceive>
 8005212:	e03f      	b.n	8005294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	d11c      	bne.n	800525a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005228:	429a      	cmp	r2, r3
 800522a:	d316      	bcc.n	800525a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005236:	429a      	cmp	r2, r3
 8005238:	d20f      	bcs.n	800525a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800523a:	2200      	movs	r2, #0
 800523c:	2100      	movs	r1, #0
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f001 f89d 	bl	800637e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800524c:	2300      	movs	r3, #0
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 fd64 	bl	8006d20 <USBD_LL_PrepareReceive>
 8005258:	e01c      	b.n	8005294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d10f      	bne.n	8005286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005286:	2180      	movs	r1, #128	@ 0x80
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f001 fc9f 	bl	8006bcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f001 f8c7 	bl	8006422 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d03a      	beq.n	8005314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff fe42 	bl	8004f28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80052ac:	e032      	b.n	8005314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80052ae:	7afb      	ldrb	r3, [r7, #11]
 80052b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	4619      	mov	r1, r3
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f985 	bl	80055c8 <USBD_CoreFindEP>
 80052be:	4603      	mov	r3, r0
 80052c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2bff      	cmp	r3, #255	@ 0xff
 80052c6:	d025      	beq.n	8005314 <USBD_LL_DataInStage+0x15a>
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d122      	bne.n	8005314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d11c      	bne.n	8005314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80052da:	7dfa      	ldrb	r2, [r7, #23]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	32ae      	adds	r2, #174	@ 0xae
 80052e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d014      	beq.n	8005314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80052ea:	7dfa      	ldrb	r2, [r7, #23]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80052f2:	7dfa      	ldrb	r2, [r7, #23]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	32ae      	adds	r2, #174	@ 0xae
 80052f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	7afa      	ldrb	r2, [r7, #11]
 8005300:	4611      	mov	r1, r2
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	4798      	blx	r3
 8005306:	4603      	mov	r3, r0
 8005308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800530a:	7dbb      	ldrb	r3, [r7, #22]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005310:	7dbb      	ldrb	r3, [r7, #22]
 8005312:	e000      	b.n	8005316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6852      	ldr	r2, [r2, #4]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	4611      	mov	r1, r2
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005380:	2303      	movs	r3, #3
 8005382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005384:	2340      	movs	r3, #64	@ 0x40
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fbd9 	bl	8006b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2240      	movs	r2, #64	@ 0x40
 800539c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053a0:	2340      	movs	r3, #64	@ 0x40
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	@ 0x80
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fbcb 	bl	8006b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2240      	movs	r2, #64	@ 0x40
 80053b6:	621a      	str	r2, [r3, #32]

  return ret;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d006      	beq.n	8005404 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2204      	movs	r2, #4
 8005408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b04      	cmp	r3, #4
 800542c:	d106      	bne.n	800543c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005434:	b2da      	uxtb	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d110      	bne.n	8005480 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	32ae      	adds	r2, #174	@ 0xae
 80054a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e01c      	b.n	80054e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d115      	bne.n	80054e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	32ae      	adds	r2, #174	@ 0xae
 80054c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	32ae      	adds	r2, #174	@ 0xae
 80054d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	4611      	mov	r1, r2
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32ae      	adds	r2, #174	@ 0xae
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800550c:	2303      	movs	r3, #3
 800550e:	e01c      	b.n	800554a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d115      	bne.n	8005548 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	32ae      	adds	r2, #174	@ 0xae
 8005526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	32ae      	adds	r2, #174	@ 0xae
 800553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	4611      	mov	r1, r2
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00e      	beq.n	80055a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6852      	ldr	r2, [r2, #4]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	4611      	mov	r1, r2
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80055ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80055d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	885b      	ldrh	r3, [r3, #2]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	7812      	ldrb	r2, [r2, #0]
 8005604:	4293      	cmp	r3, r2
 8005606:	d91f      	bls.n	8005648 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800560e:	e013      	b.n	8005638 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005610:	f107 030a 	add.w	r3, r7, #10
 8005614:	4619      	mov	r1, r3
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f000 f81b 	bl	8005652 <USBD_GetNextDesc>
 800561c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b05      	cmp	r3, #5
 8005624:	d108      	bne.n	8005638 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	789b      	ldrb	r3, [r3, #2]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	429a      	cmp	r2, r3
 8005632:	d008      	beq.n	8005646 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	885b      	ldrh	r3, [r3, #2]
 800563c:	b29a      	uxth	r2, r3
 800563e:	897b      	ldrh	r3, [r7, #10]
 8005640:	429a      	cmp	r2, r3
 8005642:	d8e5      	bhi.n	8005610 <USBD_GetEpDesc+0x2e>
 8005644:	e000      	b.n	8005648 <USBD_GetEpDesc+0x66>
          break;
 8005646:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005648:	693b      	ldr	r3, [r7, #16]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	4413      	add	r3, r2
 800566a:	b29a      	uxth	r2, r3
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800567c:	68fb      	ldr	r3, [r7, #12]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	3301      	adds	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80056a8:	8a3b      	ldrh	r3, [r7, #16]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b21b      	sxth	r3, r3
 80056b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80056b8:	89fb      	ldrh	r3, [r7, #14]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d005      	beq.n	80056ee <USBD_StdDevReq+0x26>
 80056e2:	2b40      	cmp	r3, #64	@ 0x40
 80056e4:	d857      	bhi.n	8005796 <USBD_StdDevReq+0xce>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00f      	beq.n	800570a <USBD_StdDevReq+0x42>
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d153      	bne.n	8005796 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	32ae      	adds	r2, #174	@ 0xae
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]
      break;
 8005708:	e04a      	b.n	80057a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b09      	cmp	r3, #9
 8005710:	d83b      	bhi.n	800578a <USBD_StdDevReq+0xc2>
 8005712:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <USBD_StdDevReq+0x50>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	0800576d 	.word	0x0800576d
 800571c:	08005781 	.word	0x08005781
 8005720:	0800578b 	.word	0x0800578b
 8005724:	08005777 	.word	0x08005777
 8005728:	0800578b 	.word	0x0800578b
 800572c:	0800574b 	.word	0x0800574b
 8005730:	08005741 	.word	0x08005741
 8005734:	0800578b 	.word	0x0800578b
 8005738:	08005763 	.word	0x08005763
 800573c:	08005755 	.word	0x08005755
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa3c 	bl	8005bc0 <USBD_GetDescriptor>
          break;
 8005748:	e024      	b.n	8005794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fba1 	bl	8005e94 <USBD_SetAddress>
          break;
 8005752:	e01f      	b.n	8005794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fbe0 	bl	8005f1c <USBD_SetConfig>
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]
          break;
 8005760:	e018      	b.n	8005794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc83 	bl	8006070 <USBD_GetConfig>
          break;
 800576a:	e013      	b.n	8005794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fcb4 	bl	80060dc <USBD_GetStatus>
          break;
 8005774:	e00e      	b.n	8005794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fce3 	bl	8006144 <USBD_SetFeature>
          break;
 800577e:	e009      	b.n	8005794 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fd07 	bl	8006196 <USBD_ClrFeature>
          break;
 8005788:	e004      	b.n	8005794 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fd5e 	bl	800624e <USBD_CtlError>
          break;
 8005792:	bf00      	nop
      }
      break;
 8005794:	e004      	b.n	80057a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fd58 	bl	800624e <USBD_CtlError>
      break;
 800579e:	bf00      	nop
  }

  return ret;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057c2:	2b40      	cmp	r3, #64	@ 0x40
 80057c4:	d005      	beq.n	80057d2 <USBD_StdItfReq+0x26>
 80057c6:	2b40      	cmp	r3, #64	@ 0x40
 80057c8:	d852      	bhi.n	8005870 <USBD_StdItfReq+0xc4>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <USBD_StdItfReq+0x26>
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d14e      	bne.n	8005870 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d840      	bhi.n	8005862 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	889b      	ldrh	r3, [r3, #4]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d836      	bhi.n	8005858 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	889b      	ldrh	r3, [r3, #4]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fedb 	bl	80055ae <USBD_CoreFindIF>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	2bff      	cmp	r3, #255	@ 0xff
 8005800:	d01d      	beq.n	800583e <USBD_StdItfReq+0x92>
 8005802:	7bbb      	ldrb	r3, [r7, #14]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11a      	bne.n	800583e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005808:	7bba      	ldrb	r2, [r7, #14]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32ae      	adds	r2, #174	@ 0xae
 800580e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00f      	beq.n	8005838 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005818:	7bba      	ldrb	r2, [r7, #14]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005820:	7bba      	ldrb	r2, [r7, #14]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	32ae      	adds	r2, #174	@ 0xae
 8005826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005836:	e004      	b.n	8005842 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005838:	2303      	movs	r3, #3
 800583a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800583c:	e001      	b.n	8005842 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800583e:	2303      	movs	r3, #3
 8005840:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	88db      	ldrh	r3, [r3, #6]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d110      	bne.n	800586c <USBD_StdItfReq+0xc0>
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10d      	bne.n	800586c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fdd3 	bl	80063fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005856:	e009      	b.n	800586c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fcf7 	bl	800624e <USBD_CtlError>
          break;
 8005860:	e004      	b.n	800586c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fcf2 	bl	800624e <USBD_CtlError>
          break;
 800586a:	e000      	b.n	800586e <USBD_StdItfReq+0xc2>
          break;
 800586c:	bf00      	nop
      }
      break;
 800586e:	e004      	b.n	800587a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fceb 	bl	800624e <USBD_CtlError>
      break;
 8005878:	bf00      	nop
  }

  return ret;
 800587a:	7bfb      	ldrb	r3, [r7, #15]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	889b      	ldrh	r3, [r3, #4]
 8005896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80058a0:	2b40      	cmp	r3, #64	@ 0x40
 80058a2:	d007      	beq.n	80058b4 <USBD_StdEPReq+0x30>
 80058a4:	2b40      	cmp	r3, #64	@ 0x40
 80058a6:	f200 817f 	bhi.w	8005ba8 <USBD_StdEPReq+0x324>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02a      	beq.n	8005904 <USBD_StdEPReq+0x80>
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	f040 817a 	bne.w	8005ba8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fe85 	bl	80055c8 <USBD_CoreFindEP>
 80058be:	4603      	mov	r3, r0
 80058c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058c2:	7b7b      	ldrb	r3, [r7, #13]
 80058c4:	2bff      	cmp	r3, #255	@ 0xff
 80058c6:	f000 8174 	beq.w	8005bb2 <USBD_StdEPReq+0x32e>
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8170 	bne.w	8005bb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80058d2:	7b7a      	ldrb	r2, [r7, #13]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80058da:	7b7a      	ldrb	r2, [r7, #13]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	32ae      	adds	r2, #174	@ 0xae
 80058e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8163 	beq.w	8005bb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80058ec:	7b7a      	ldrb	r2, [r7, #13]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	32ae      	adds	r2, #174	@ 0xae
 80058f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
 80058fe:	4603      	mov	r3, r0
 8005900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005902:	e156      	b.n	8005bb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d008      	beq.n	800591e <USBD_StdEPReq+0x9a>
 800590c:	2b03      	cmp	r3, #3
 800590e:	f300 8145 	bgt.w	8005b9c <USBD_StdEPReq+0x318>
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 809b 	beq.w	8005a4e <USBD_StdEPReq+0x1ca>
 8005918:	2b01      	cmp	r3, #1
 800591a:	d03c      	beq.n	8005996 <USBD_StdEPReq+0x112>
 800591c:	e13e      	b.n	8005b9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d002      	beq.n	8005930 <USBD_StdEPReq+0xac>
 800592a:	2b03      	cmp	r3, #3
 800592c:	d016      	beq.n	800595c <USBD_StdEPReq+0xd8>
 800592e:	e02c      	b.n	800598a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005930:	7bbb      	ldrb	r3, [r7, #14]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <USBD_StdEPReq+0xce>
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	2b80      	cmp	r3, #128	@ 0x80
 800593a:	d00a      	beq.n	8005952 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 f943 	bl	8006bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005946:	2180      	movs	r1, #128	@ 0x80
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 f93f 	bl	8006bcc <USBD_LL_StallEP>
 800594e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005950:	e020      	b.n	8005994 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fc7a 	bl	800624e <USBD_CtlError>
              break;
 800595a:	e01b      	b.n	8005994 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	885b      	ldrh	r3, [r3, #2]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10e      	bne.n	8005982 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <USBD_StdEPReq+0xfe>
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	2b80      	cmp	r3, #128	@ 0x80
 800596e:	d008      	beq.n	8005982 <USBD_StdEPReq+0xfe>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	88db      	ldrh	r3, [r3, #6]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 f925 	bl	8006bcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fd3a 	bl	80063fc <USBD_CtlSendStatus>

              break;
 8005988:	e004      	b.n	8005994 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fc5e 	bl	800624e <USBD_CtlError>
              break;
 8005992:	bf00      	nop
          }
          break;
 8005994:	e107      	b.n	8005ba6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d002      	beq.n	80059a8 <USBD_StdEPReq+0x124>
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d016      	beq.n	80059d4 <USBD_StdEPReq+0x150>
 80059a6:	e04b      	b.n	8005a40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <USBD_StdEPReq+0x146>
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	2b80      	cmp	r3, #128	@ 0x80
 80059b2:	d00a      	beq.n	80059ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 f907 	bl	8006bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059be:	2180      	movs	r1, #128	@ 0x80
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 f903 	bl	8006bcc <USBD_LL_StallEP>
 80059c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059c8:	e040      	b.n	8005a4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fc3e 	bl	800624e <USBD_CtlError>
              break;
 80059d2:	e03b      	b.n	8005a4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	885b      	ldrh	r3, [r3, #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d136      	bne.n	8005a4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d004      	beq.n	80059f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 f90d 	bl	8006c0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fd03 	bl	80063fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fde4 	bl	80055c8 <USBD_CoreFindEP>
 8005a00:	4603      	mov	r3, r0
 8005a02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a04:	7b7b      	ldrb	r3, [r7, #13]
 8005a06:	2bff      	cmp	r3, #255	@ 0xff
 8005a08:	d01f      	beq.n	8005a4a <USBD_StdEPReq+0x1c6>
 8005a0a:	7b7b      	ldrb	r3, [r7, #13]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11c      	bne.n	8005a4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005a10:	7b7a      	ldrb	r2, [r7, #13]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a18:	7b7a      	ldrb	r2, [r7, #13]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32ae      	adds	r2, #174	@ 0xae
 8005a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a28:	7b7a      	ldrb	r2, [r7, #13]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	32ae      	adds	r2, #174	@ 0xae
 8005a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005a3e:	e004      	b.n	8005a4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fc03 	bl	800624e <USBD_CtlError>
              break;
 8005a48:	e000      	b.n	8005a4c <USBD_StdEPReq+0x1c8>
              break;
 8005a4a:	bf00      	nop
          }
          break;
 8005a4c:	e0ab      	b.n	8005ba6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d002      	beq.n	8005a60 <USBD_StdEPReq+0x1dc>
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d032      	beq.n	8005ac4 <USBD_StdEPReq+0x240>
 8005a5e:	e097      	b.n	8005b90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <USBD_StdEPReq+0x1f2>
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	2b80      	cmp	r3, #128	@ 0x80
 8005a6a:	d004      	beq.n	8005a76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fbed 	bl	800624e <USBD_CtlError>
                break;
 8005a74:	e091      	b.n	8005b9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da0b      	bge.n	8005a96 <USBD_StdEPReq+0x212>
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	e00b      	b.n	8005aae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	3304      	adds	r3, #4
 8005aae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fc43 	bl	8006348 <USBD_CtlSendData>
              break;
 8005ac2:	e06a      	b.n	8005b9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da11      	bge.n	8005af0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	3324      	adds	r3, #36	@ 0x24
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d117      	bne.n	8005b16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fbb0 	bl	800624e <USBD_CtlError>
                  break;
 8005aee:	e054      	b.n	8005b9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fb9d 	bl	800624e <USBD_CtlError>
                  break;
 8005b14:	e041      	b.n	8005b9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	da0b      	bge.n	8005b36 <USBD_StdEPReq+0x2b2>
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	3310      	adds	r3, #16
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	e00b      	b.n	8005b4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <USBD_StdEPReq+0x2d8>
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b80      	cmp	r3, #128	@ 0x80
 8005b5a:	d103      	bne.n	8005b64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e00e      	b.n	8005b82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 f86d 	bl	8006c48 <USBD_LL_IsStallEP>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2202      	movs	r2, #2
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fbdd 	bl	8006348 <USBD_CtlSendData>
              break;
 8005b8e:	e004      	b.n	8005b9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb5b 	bl	800624e <USBD_CtlError>
              break;
 8005b98:	bf00      	nop
          }
          break;
 8005b9a:	e004      	b.n	8005ba6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fb55 	bl	800624e <USBD_CtlError>
          break;
 8005ba4:	bf00      	nop
      }
      break;
 8005ba6:	e005      	b.n	8005bb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fb4f 	bl	800624e <USBD_CtlError>
      break;
 8005bb0:	e000      	b.n	8005bb4 <USBD_StdEPReq+0x330>
      break;
 8005bb2:	bf00      	nop
  }

  return ret;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	885b      	ldrh	r3, [r3, #2]
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	f200 8128 	bhi.w	8005e36 <USBD_GetDescriptor+0x276>
 8005be6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <USBD_GetDescriptor+0x2c>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	08005c21 	.word	0x08005c21
 8005bf4:	08005c61 	.word	0x08005c61
 8005bf8:	08005e37 	.word	0x08005e37
 8005bfc:	08005e37 	.word	0x08005e37
 8005c00:	08005dd7 	.word	0x08005dd7
 8005c04:	08005e03 	.word	0x08005e03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	7c12      	ldrb	r2, [r2, #16]
 8005c14:	f107 0108 	add.w	r1, r7, #8
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
 8005c1c:	60f8      	str	r0, [r7, #12]
      break;
 8005c1e:	e112      	b.n	8005e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	7c1b      	ldrb	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10d      	bne.n	8005c44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	f107 0208 	add.w	r2, r7, #8
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
 8005c38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	2202      	movs	r2, #2
 8005c40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c42:	e100      	b.n	8005e46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	f107 0208 	add.w	r2, r7, #8
 8005c50:	4610      	mov	r0, r2
 8005c52:	4798      	blx	r3
 8005c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	701a      	strb	r2, [r3, #0]
      break;
 8005c5e:	e0f2      	b.n	8005e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	885b      	ldrh	r3, [r3, #2]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	f200 80ac 	bhi.w	8005dc4 <USBD_GetDescriptor+0x204>
 8005c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <USBD_GetDescriptor+0xb4>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005cc1 	.word	0x08005cc1
 8005c7c:	08005cf5 	.word	0x08005cf5
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d5d 	.word	0x08005d5d
 8005c88:	08005d91 	.word	0x08005d91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	7c12      	ldrb	r2, [r2, #16]
 8005ca4:	f107 0108 	add.w	r1, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cae:	e091      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 facb 	bl	800624e <USBD_CtlError>
            err++;
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cbe:	e089      	b.n	8005dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	7c12      	ldrb	r2, [r2, #16]
 8005cd8:	f107 0108 	add.w	r1, r7, #8
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ce2:	e077      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fab1 	bl	800624e <USBD_CtlError>
            err++;
 8005cec:	7afb      	ldrb	r3, [r7, #11]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8005cf2:	e06f      	b.n	8005dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	7c12      	ldrb	r2, [r2, #16]
 8005d0c:	f107 0108 	add.w	r1, r7, #8
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d16:	e05d      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa97 	bl	800624e <USBD_CtlError>
            err++;
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	3301      	adds	r3, #1
 8005d24:	72fb      	strb	r3, [r7, #11]
          break;
 8005d26:	e055      	b.n	8005dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	7c12      	ldrb	r2, [r2, #16]
 8005d40:	f107 0108 	add.w	r1, r7, #8
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
 8005d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d4a:	e043      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa7d 	bl	800624e <USBD_CtlError>
            err++;
 8005d54:	7afb      	ldrb	r3, [r7, #11]
 8005d56:	3301      	adds	r3, #1
 8005d58:	72fb      	strb	r3, [r7, #11]
          break;
 8005d5a:	e03b      	b.n	8005dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	7c12      	ldrb	r2, [r2, #16]
 8005d74:	f107 0108 	add.w	r1, r7, #8
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d7e:	e029      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa63 	bl	800624e <USBD_CtlError>
            err++;
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d8e:	e021      	b.n	8005dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7c12      	ldrb	r2, [r2, #16]
 8005da8:	f107 0108 	add.w	r1, r7, #8
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db2:	e00f      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa49 	bl	800624e <USBD_CtlError>
            err++;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc2:	e007      	b.n	8005dd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa41 	bl	800624e <USBD_CtlError>
          err++;
 8005dcc:	7afb      	ldrb	r3, [r7, #11]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005dd2:	bf00      	nop
      }
      break;
 8005dd4:	e037      	b.n	8005e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7c1b      	ldrb	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de6:	f107 0208 	add.w	r2, r7, #8
 8005dea:	4610      	mov	r0, r2
 8005dec:	4798      	blx	r3
 8005dee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005df0:	e029      	b.n	8005e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa2a 	bl	800624e <USBD_CtlError>
        err++;
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8005e00:	e021      	b.n	8005e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	7c1b      	ldrb	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10d      	bne.n	8005e26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	f107 0208 	add.w	r2, r7, #8
 8005e16:	4610      	mov	r0, r2
 8005e18:	4798      	blx	r3
 8005e1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	2207      	movs	r2, #7
 8005e22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e24:	e00f      	b.n	8005e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa10 	bl	800624e <USBD_CtlError>
        err++;
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	3301      	adds	r3, #1
 8005e32:	72fb      	strb	r3, [r7, #11]
      break;
 8005e34:	e007      	b.n	8005e46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa08 	bl	800624e <USBD_CtlError>
      err++;
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	3301      	adds	r3, #1
 8005e42:	72fb      	strb	r3, [r7, #11]
      break;
 8005e44:	bf00      	nop
  }

  if (err != 0U)
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11e      	bne.n	8005e8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	88db      	ldrh	r3, [r3, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d016      	beq.n	8005e82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00e      	beq.n	8005e78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	88da      	ldrh	r2, [r3, #6]
 8005e5e:	893b      	ldrh	r3, [r7, #8]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	bf28      	it	cs
 8005e64:	4613      	movcs	r3, r2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e6a:	893b      	ldrh	r3, [r7, #8]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa69 	bl	8006348 <USBD_CtlSendData>
 8005e76:	e009      	b.n	8005e8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f9e7 	bl	800624e <USBD_CtlError>
 8005e80:	e004      	b.n	8005e8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 faba 	bl	80063fc <USBD_CtlSendStatus>
 8005e88:	e000      	b.n	8005e8c <USBD_GetDescriptor+0x2cc>
    return;
 8005e8a:	bf00      	nop
  }
}
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop

08005e94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	889b      	ldrh	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d131      	bne.n	8005f0a <USBD_SetAddress+0x76>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	88db      	ldrh	r3, [r3, #6]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d12d      	bne.n	8005f0a <USBD_SetAddress+0x76>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	885b      	ldrh	r3, [r3, #2]
 8005eb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eb4:	d829      	bhi.n	8005f0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	885b      	ldrh	r3, [r3, #2]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d104      	bne.n	8005ed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9bc 	bl	800624e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed6:	e01d      	b.n	8005f14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fedb 	bl	8006ca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa86 	bl	80063fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efe:	e009      	b.n	8005f14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f08:	e004      	b.n	8005f14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f99e 	bl	800624e <USBD_CtlError>
  }
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	4b4e      	ldr	r3, [pc, #312]	@ (800606c <USBD_SetConfig+0x150>)
 8005f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f34:	4b4d      	ldr	r3, [pc, #308]	@ (800606c <USBD_SetConfig+0x150>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d905      	bls.n	8005f48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f985 	bl	800624e <USBD_CtlError>
    return USBD_FAIL;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e08c      	b.n	8006062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d002      	beq.n	8005f5a <USBD_SetConfig+0x3e>
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d029      	beq.n	8005fac <USBD_SetConfig+0x90>
 8005f58:	e075      	b.n	8006046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005f5a:	4b44      	ldr	r3, [pc, #272]	@ (800606c <USBD_SetConfig+0x150>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005f62:	4b42      	ldr	r3, [pc, #264]	@ (800606c <USBD_SetConfig+0x150>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800606c <USBD_SetConfig+0x150>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fe ffe3 	bl	8004f3e <USBD_SetClassConfig>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f962 	bl	800624e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f92:	e065      	b.n	8006060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fa31 	bl	80063fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005fa2:	e05d      	b.n	8006060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa29 	bl	80063fc <USBD_CtlSendStatus>
      break;
 8005faa:	e059      	b.n	8006060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005fac:	4b2f      	ldr	r3, [pc, #188]	@ (800606c <USBD_SetConfig+0x150>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d112      	bne.n	8005fda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800606c <USBD_SetConfig+0x150>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fc6:	4b29      	ldr	r3, [pc, #164]	@ (800606c <USBD_SetConfig+0x150>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fe ffd2 	bl	8004f76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa12 	bl	80063fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005fd8:	e042      	b.n	8006060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005fda:	4b24      	ldr	r3, [pc, #144]	@ (800606c <USBD_SetConfig+0x150>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d02a      	beq.n	800603e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fe ffc0 	bl	8004f76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800606c <USBD_SetConfig+0x150>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006000:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <USBD_SetConfig+0x150>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fe ff99 	bl	8004f3e <USBD_SetClassConfig>
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00f      	beq.n	8006036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f918 	bl	800624e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fe ffa5 	bl	8004f76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006034:	e014      	b.n	8006060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9e0 	bl	80063fc <USBD_CtlSendStatus>
      break;
 800603c:	e010      	b.n	8006060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9dc 	bl	80063fc <USBD_CtlSendStatus>
      break;
 8006044:	e00c      	b.n	8006060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f900 	bl	800624e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800604e:	4b07      	ldr	r3, [pc, #28]	@ (800606c <USBD_SetConfig+0x150>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fe ff8e 	bl	8004f76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800605a:	2303      	movs	r3, #3
 800605c:	73fb      	strb	r3, [r7, #15]
      break;
 800605e:	bf00      	nop
  }

  return ret;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	2000011c 	.word	0x2000011c

08006070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	88db      	ldrh	r3, [r3, #6]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d004      	beq.n	800608c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f8e2 	bl	800624e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800608a:	e023      	b.n	80060d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	dc02      	bgt.n	800609e <USBD_GetConfig+0x2e>
 8006098:	2b00      	cmp	r3, #0
 800609a:	dc03      	bgt.n	80060a4 <USBD_GetConfig+0x34>
 800609c:	e015      	b.n	80060ca <USBD_GetConfig+0x5a>
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d00b      	beq.n	80060ba <USBD_GetConfig+0x4a>
 80060a2:	e012      	b.n	80060ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3308      	adds	r3, #8
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f948 	bl	8006348 <USBD_CtlSendData>
        break;
 80060b8:	e00c      	b.n	80060d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	2201      	movs	r2, #1
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f940 	bl	8006348 <USBD_CtlSendData>
        break;
 80060c8:	e004      	b.n	80060d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8be 	bl	800624e <USBD_CtlError>
        break;
 80060d2:	bf00      	nop
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d81e      	bhi.n	8006132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	88db      	ldrh	r3, [r3, #6]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d004      	beq.n	8006106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f8a5 	bl	800624e <USBD_CtlError>
        break;
 8006104:	e01a      	b.n	800613c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	330c      	adds	r3, #12
 8006126:	2202      	movs	r2, #2
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f90c 	bl	8006348 <USBD_CtlSendData>
      break;
 8006130:	e004      	b.n	800613c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f88a 	bl	800624e <USBD_CtlError>
      break;
 800613a:	bf00      	nop
  }
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f94c 	bl	80063fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006164:	e013      	b.n	800618e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	885b      	ldrh	r3, [r3, #2]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d10b      	bne.n	8006186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	889b      	ldrh	r3, [r3, #4]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	b29b      	uxth	r3, r3
 8006176:	b2da      	uxtb	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f93c 	bl	80063fc <USBD_CtlSendStatus>
}
 8006184:	e003      	b.n	800618e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f860 	bl	800624e <USBD_CtlError>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d80b      	bhi.n	80061c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	885b      	ldrh	r3, [r3, #2]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10c      	bne.n	80061d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f91c 	bl	80063fc <USBD_CtlSendStatus>
      }
      break;
 80061c4:	e004      	b.n	80061d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f840 	bl	800624e <USBD_CtlError>
      break;
 80061ce:	e000      	b.n	80061d2 <USBD_ClrFeature+0x3c>
      break;
 80061d0:	bf00      	nop
  }
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fa40 	bl	800568a <SWAPBYTE>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3301      	adds	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff fa33 	bl	800568a <SWAPBYTE>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff fa26 	bl	800568a <SWAPBYTE>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	80da      	strh	r2, [r3, #6]
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006258:	2180      	movs	r1, #128	@ 0x80
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fcb6 	bl	8006bcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fcb2 	bl	8006bcc <USBD_LL_StallEP>
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d042      	beq.n	800630c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f000 f842 	bl	8006314 <USBD_GetLen>
 8006290:	4603      	mov	r3, r0
 8006292:	3301      	adds	r3, #1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629a:	d808      	bhi.n	80062ae <USBD_GetString+0x3e>
 800629c:	6938      	ldr	r0, [r7, #16]
 800629e:	f000 f839 	bl	8006314 <USBD_GetLen>
 80062a2:	4603      	mov	r3, r0
 80062a4:	3301      	adds	r3, #1
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	e001      	b.n	80062b2 <USBD_GetString+0x42>
 80062ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	4413      	add	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	7812      	ldrb	r2, [r2, #0]
 80062c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	3301      	adds	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	2203      	movs	r2, #3
 80062d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	3301      	adds	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80062d8:	e013      	b.n	8006302 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4413      	add	r3, r2
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3301      	adds	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]
    idx++;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	3301      	adds	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4413      	add	r3, r2
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	3301      	adds	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e7      	bne.n	80062da <USBD_GetString+0x6a>
 800630a:	e000      	b.n	800630e <USBD_GetString+0x9e>
    return;
 800630c:	bf00      	nop
  }
}
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006324:	e005      	b.n	8006332 <USBD_GetLen+0x1e>
  {
    len++;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	3301      	adds	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	3301      	adds	r3, #1
 8006330:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f5      	bne.n	8006326 <USBD_GetLen+0x12>
  }

  return len;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2202      	movs	r2, #2
 8006358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	2100      	movs	r1, #0
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fcb5 	bl	8006cde <USBD_LL_Transmit>

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	2100      	movs	r1, #0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fca4 	bl	8006cde <USBD_LL_Transmit>

  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2203      	movs	r2, #3
 80063b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	2100      	movs	r1, #0
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fca8 	bl	8006d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	2100      	movs	r1, #0
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fc97 	bl	8006d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2204      	movs	r2, #4
 8006408:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800640c:	2300      	movs	r3, #0
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fc63 	bl	8006cde <USBD_LL_Transmit>

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2205      	movs	r2, #5
 800642e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc71 	bl	8006d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800644c:	2200      	movs	r2, #0
 800644e:	4912      	ldr	r1, [pc, #72]	@ (8006498 <MX_USB_DEVICE_Init+0x50>)
 8006450:	4812      	ldr	r0, [pc, #72]	@ (800649c <MX_USB_DEVICE_Init+0x54>)
 8006452:	f7fe fcf7 	bl	8004e44 <USBD_Init>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800645c:	f7fa f938 	bl	80006d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006460:	490f      	ldr	r1, [pc, #60]	@ (80064a0 <MX_USB_DEVICE_Init+0x58>)
 8006462:	480e      	ldr	r0, [pc, #56]	@ (800649c <MX_USB_DEVICE_Init+0x54>)
 8006464:	f7fe fd1e 	bl	8004ea4 <USBD_RegisterClass>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800646e:	f7fa f92f 	bl	80006d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006472:	490c      	ldr	r1, [pc, #48]	@ (80064a4 <MX_USB_DEVICE_Init+0x5c>)
 8006474:	4809      	ldr	r0, [pc, #36]	@ (800649c <MX_USB_DEVICE_Init+0x54>)
 8006476:	f7fe fc55 	bl	8004d24 <USBD_CDC_RegisterInterface>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006480:	f7fa f926 	bl	80006d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006484:	4805      	ldr	r0, [pc, #20]	@ (800649c <MX_USB_DEVICE_Init+0x54>)
 8006486:	f7fe fd43 	bl	8004f10 <USBD_Start>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006490:	f7fa f91e 	bl	80006d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}
 8006498:	200000ac 	.word	0x200000ac
 800649c:	20000120 	.word	0x20000120
 80064a0:	20000018 	.word	0x20000018
 80064a4:	20000098 	.word	0x20000098

080064a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064ac:	2200      	movs	r2, #0
 80064ae:	4905      	ldr	r1, [pc, #20]	@ (80064c4 <CDC_Init_FS+0x1c>)
 80064b0:	4805      	ldr	r0, [pc, #20]	@ (80064c8 <CDC_Init_FS+0x20>)
 80064b2:	f7fe fc51 	bl	8004d58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064b6:	4905      	ldr	r1, [pc, #20]	@ (80064cc <CDC_Init_FS+0x24>)
 80064b8:	4803      	ldr	r0, [pc, #12]	@ (80064c8 <CDC_Init_FS+0x20>)
 80064ba:	f7fe fc6f 	bl	8004d9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000bfc 	.word	0x20000bfc
 80064c8:	20000120 	.word	0x20000120
 80064cc:	200003fc 	.word	0x200003fc

080064d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80064d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	6039      	str	r1, [r7, #0]
 80064ea:	71fb      	strb	r3, [r7, #7]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b23      	cmp	r3, #35	@ 0x23
 80064f4:	d84a      	bhi.n	800658c <CDC_Control_FS+0xac>
 80064f6:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <CDC_Control_FS+0x1c>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800658d 	.word	0x0800658d
 8006500:	0800658d 	.word	0x0800658d
 8006504:	0800658d 	.word	0x0800658d
 8006508:	0800658d 	.word	0x0800658d
 800650c:	0800658d 	.word	0x0800658d
 8006510:	0800658d 	.word	0x0800658d
 8006514:	0800658d 	.word	0x0800658d
 8006518:	0800658d 	.word	0x0800658d
 800651c:	0800658d 	.word	0x0800658d
 8006520:	0800658d 	.word	0x0800658d
 8006524:	0800658d 	.word	0x0800658d
 8006528:	0800658d 	.word	0x0800658d
 800652c:	0800658d 	.word	0x0800658d
 8006530:	0800658d 	.word	0x0800658d
 8006534:	0800658d 	.word	0x0800658d
 8006538:	0800658d 	.word	0x0800658d
 800653c:	0800658d 	.word	0x0800658d
 8006540:	0800658d 	.word	0x0800658d
 8006544:	0800658d 	.word	0x0800658d
 8006548:	0800658d 	.word	0x0800658d
 800654c:	0800658d 	.word	0x0800658d
 8006550:	0800658d 	.word	0x0800658d
 8006554:	0800658d 	.word	0x0800658d
 8006558:	0800658d 	.word	0x0800658d
 800655c:	0800658d 	.word	0x0800658d
 8006560:	0800658d 	.word	0x0800658d
 8006564:	0800658d 	.word	0x0800658d
 8006568:	0800658d 	.word	0x0800658d
 800656c:	0800658d 	.word	0x0800658d
 8006570:	0800658d 	.word	0x0800658d
 8006574:	0800658d 	.word	0x0800658d
 8006578:	0800658d 	.word	0x0800658d
 800657c:	0800658d 	.word	0x0800658d
 8006580:	0800658d 	.word	0x0800658d
 8006584:	0800658d 	.word	0x0800658d
 8006588:	0800658d 	.word	0x0800658d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800658c:	bf00      	nop
  }

  return (USBD_OK);
 800658e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4805      	ldr	r0, [pc, #20]	@ (80065c0 <CDC_Receive_FS+0x24>)
 80065aa:	f7fe fbf7 	bl	8004d9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065ae:	4804      	ldr	r0, [pc, #16]	@ (80065c0 <CDC_Receive_FS+0x24>)
 80065b0:	f7fe fc12 	bl	8004dd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000120 	.word	0x20000120

080065c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80065d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	6039      	str	r1, [r7, #0]
 80065f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2212      	movs	r2, #18
 80065f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	@ (8006608 <USBD_FS_DeviceDescriptor+0x20>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	200000c8 	.word	0x200000c8

0800660c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2204      	movs	r2, #4
 800661c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800661e:	4b03      	ldr	r3, [pc, #12]	@ (800662c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	200000dc 	.word	0x200000dc

08006630 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	6039      	str	r1, [r7, #0]
 800663a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	4907      	ldr	r1, [pc, #28]	@ (8006664 <USBD_FS_ProductStrDescriptor+0x34>)
 8006646:	4808      	ldr	r0, [pc, #32]	@ (8006668 <USBD_FS_ProductStrDescriptor+0x38>)
 8006648:	f7ff fe12 	bl	8006270 <USBD_GetString>
 800664c:	e004      	b.n	8006658 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4904      	ldr	r1, [pc, #16]	@ (8006664 <USBD_FS_ProductStrDescriptor+0x34>)
 8006652:	4805      	ldr	r0, [pc, #20]	@ (8006668 <USBD_FS_ProductStrDescriptor+0x38>)
 8006654:	f7ff fe0c 	bl	8006270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006658:	4b02      	ldr	r3, [pc, #8]	@ (8006664 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	200013fc 	.word	0x200013fc
 8006668:	08006e80 	.word	0x08006e80

0800666c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4904      	ldr	r1, [pc, #16]	@ (800668c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800667c:	4804      	ldr	r0, [pc, #16]	@ (8006690 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800667e:	f7ff fdf7 	bl	8006270 <USBD_GetString>
  return USBD_StrDesc;
 8006682:	4b02      	ldr	r3, [pc, #8]	@ (800668c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	200013fc 	.word	0x200013fc
 8006690:	08006e98 	.word	0x08006e98

08006694 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	221a      	movs	r2, #26
 80066a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066a6:	f000 f843 	bl	8006730 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066aa:	4b02      	ldr	r3, [pc, #8]	@ (80066b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	200000e0 	.word	0x200000e0

080066b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d105      	bne.n	80066d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	4907      	ldr	r1, [pc, #28]	@ (80066ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80066ce:	4808      	ldr	r0, [pc, #32]	@ (80066f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066d0:	f7ff fdce 	bl	8006270 <USBD_GetString>
 80066d4:	e004      	b.n	80066e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4904      	ldr	r1, [pc, #16]	@ (80066ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80066da:	4805      	ldr	r0, [pc, #20]	@ (80066f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066dc:	f7ff fdc8 	bl	8006270 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066e0:	4b02      	ldr	r3, [pc, #8]	@ (80066ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200013fc 	.word	0x200013fc
 80066f0:	08006eac 	.word	0x08006eac

080066f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	6039      	str	r1, [r7, #0]
 80066fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d105      	bne.n	8006712 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	4907      	ldr	r1, [pc, #28]	@ (8006728 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800670a:	4808      	ldr	r0, [pc, #32]	@ (800672c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800670c:	f7ff fdb0 	bl	8006270 <USBD_GetString>
 8006710:	e004      	b.n	800671c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	4904      	ldr	r1, [pc, #16]	@ (8006728 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006716:	4805      	ldr	r0, [pc, #20]	@ (800672c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006718:	f7ff fdaa 	bl	8006270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800671c:	4b02      	ldr	r3, [pc, #8]	@ (8006728 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	200013fc 	.word	0x200013fc
 800672c:	08006eb8 	.word	0x08006eb8

08006730 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4413      	add	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006744:	2208      	movs	r2, #8
 8006746:	4906      	ldr	r1, [pc, #24]	@ (8006760 <Get_SerialNum+0x30>)
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f80d 	bl	8006768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800674e:	2204      	movs	r2, #4
 8006750:	4904      	ldr	r1, [pc, #16]	@ (8006764 <Get_SerialNum+0x34>)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f808 	bl	8006768 <IntToUnicode>
  }
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200000e2 	.word	0x200000e2
 8006764:	200000f2 	.word	0x200000f2

08006768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
 800677e:	e027      	b.n	80067d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	0f1b      	lsrs	r3, r3, #28
 8006784:	2b09      	cmp	r3, #9
 8006786:	d80b      	bhi.n	80067a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	0f1b      	lsrs	r3, r3, #28
 800678c:	b2da      	uxtb	r2, r3
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4619      	mov	r1, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	440b      	add	r3, r1
 8006798:	3230      	adds	r2, #48	@ 0x30
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e00a      	b.n	80067b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4619      	mov	r1, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	440b      	add	r3, r1
 80067b0:	3237      	adds	r2, #55	@ 0x37
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	3301      	adds	r3, #1
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	4413      	add	r3, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	3301      	adds	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
 80067d0:	7dfa      	ldrb	r2, [r7, #23]
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3d3      	bcc.n	8006780 <IntToUnicode+0x18>
  }
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	@ 0x28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	60da      	str	r2, [r3, #12]
 80067fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006808:	d13a      	bne.n	8006880 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	4b1e      	ldr	r3, [pc, #120]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	4a1d      	ldr	r2, [pc, #116]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6313      	str	r3, [r2, #48]	@ 0x30
 800681a:	4b1b      	ldr	r3, [pc, #108]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006826:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800682a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682c:	2302      	movs	r3, #2
 800682e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006834:	2303      	movs	r3, #3
 8006836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006838:	230a      	movs	r3, #10
 800683a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800683c:	f107 0314 	add.w	r3, r7, #20
 8006840:	4619      	mov	r1, r3
 8006842:	4812      	ldr	r0, [pc, #72]	@ (800688c <HAL_PCD_MspInit+0xa4>)
 8006844:	f7fa f9c6 	bl	8000bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006848:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 800684a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684c:	4a0e      	ldr	r2, [pc, #56]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	6353      	str	r3, [r2, #52]	@ 0x34
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 800685a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685c:	4a0a      	ldr	r2, [pc, #40]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 800685e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006862:	6453      	str	r3, [r2, #68]	@ 0x44
 8006864:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <HAL_PCD_MspInit+0xa0>)
 8006866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006870:	2200      	movs	r2, #0
 8006872:	2100      	movs	r1, #0
 8006874:	2043      	movs	r0, #67	@ 0x43
 8006876:	f7fa f976 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800687a:	2043      	movs	r0, #67	@ 0x43
 800687c:	f7fa f98f 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006880:	bf00      	nop
 8006882:	3728      	adds	r7, #40	@ 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40023800 	.word	0x40023800
 800688c:	40020000 	.word	0x40020000

08006890 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe fb7f 	bl	8004faa <USBD_LL_SetupStage>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	4619      	mov	r1, r3
 80068de:	f7fe fbb9 	bl	8005054 <USBD_LL_DataOutStage>
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3320      	adds	r3, #32
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	4619      	mov	r1, r3
 8006912:	f7fe fc52 	bl	80051ba <USBD_LL_DataInStage>
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fd8c 	bl	800544a <USBD_LL_SOF>
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	79db      	ldrb	r3, [r3, #7]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
 8006952:	e008      	b.n	8006966 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	79db      	ldrb	r3, [r3, #7]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d102      	bne.n	8006962 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
 8006960:	e001      	b.n	8006966 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006962:	f7f9 feb5 	bl	80006d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800696c:	7bfa      	ldrb	r2, [r7, #15]
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fd26 	bl	80053c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fcce 	bl	800531e <USBD_LL_Reset>
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fd21 	bl	80053e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7adb      	ldrb	r3, [r3, #11]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069c0:	4b04      	ldr	r3, [pc, #16]	@ (80069d4 <HAL_PCD_SuspendCallback+0x48>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	4a03      	ldr	r2, [pc, #12]	@ (80069d4 <HAL_PCD_SuspendCallback+0x48>)
 80069c6:	f043 0306 	orr.w	r3, r3, #6
 80069ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	e000ed00 	.word	0xe000ed00

080069d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fd17 	bl	800541a <USBD_LL_Resume>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fd6f 	bl	80054ee <USBD_LL_IsoOUTIncomplete>
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fd2b 	bl	800548a <USBD_LL_IsoINIncomplete>
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fd81 	bl	8005552 <USBD_LL_DevConnected>
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fd7e 	bl	8005568 <USBD_LL_DevDisconnected>
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13c      	bne.n	8006afe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006a84:	4a20      	ldr	r2, [pc, #128]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006a90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a94:	4b1c      	ldr	r3, [pc, #112]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006a96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006aa2:	4b19      	ldr	r3, [pc, #100]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006aa8:	4b17      	ldr	r3, [pc, #92]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006aae:	4b16      	ldr	r3, [pc, #88]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ab4:	4b14      	ldr	r3, [pc, #80]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006aba:	4b13      	ldr	r3, [pc, #76]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ac0:	4b11      	ldr	r3, [pc, #68]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006ac6:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006acc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ad2:	480d      	ldr	r0, [pc, #52]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ad4:	f7fa fa4d 	bl	8000f72 <HAL_PCD_Init>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ade:	f7f9 fdf7 	bl	80006d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ae2:	2180      	movs	r1, #128	@ 0x80
 8006ae4:	4808      	ldr	r0, [pc, #32]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006ae6:	f7fb fc7a 	bl	80023de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006aea:	2240      	movs	r2, #64	@ 0x40
 8006aec:	2100      	movs	r1, #0
 8006aee:	4806      	ldr	r0, [pc, #24]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006af0:	f7fb fc2e 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006af4:	2280      	movs	r2, #128	@ 0x80
 8006af6:	2101      	movs	r1, #1
 8006af8:	4803      	ldr	r0, [pc, #12]	@ (8006b08 <USBD_LL_Init+0x94>)
 8006afa:	f7fb fc29 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	200015fc 	.word	0x200015fc

08006b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa fb34 	bl	8001190 <HAL_PCD_Start>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f942 	bl	8006db8 <USBD_Get_USB_Status>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4603      	mov	r3, r0
 8006b52:	70fb      	strb	r3, [r7, #3]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70bb      	strb	r3, [r7, #2]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b6a:	78bb      	ldrb	r3, [r7, #2]
 8006b6c:	883a      	ldrh	r2, [r7, #0]
 8006b6e:	78f9      	ldrb	r1, [r7, #3]
 8006b70:	f7fb f808 	bl	8001b84 <HAL_PCD_EP_Open>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f91c 	bl	8006db8 <USBD_Get_USB_Status>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	4611      	mov	r1, r2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fb f853 	bl	8001c58 <HAL_PCD_EP_Close>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f8fd 	bl	8006db8 <USBD_Get_USB_Status>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fb f90b 	bl	8001e06 <HAL_PCD_EP_SetStall>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 f8de 	bl	8006db8 <USBD_Get_USB_Status>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fb f94f 	bl	8001ecc <HAL_PCD_EP_ClrStall>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 f8bf 	bl	8006db8 <USBD_Get_USB_Status>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da0b      	bge.n	8006c7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3316      	adds	r3, #22
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	e00b      	b.n	8006c94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fa ff3c 	bl	8001b3c <HAL_PCD_SetAddress>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f874 	bl	8006db8 <USBD_Get_USB_Status>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	460b      	mov	r3, r1
 8006cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006cfc:	7af9      	ldrb	r1, [r7, #11]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	f7fb f846 	bl	8001d92 <HAL_PCD_EP_Transmit>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f853 	bl	8006db8 <USBD_Get_USB_Status>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d16:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006d3e:	7af9      	ldrb	r1, [r7, #11]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	f7fa ffd2 	bl	8001cec <HAL_PCD_EP_Receive>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f832 	bl	8006db8 <USBD_Get_USB_Status>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fa fff2 	bl	8001d62 <HAL_PCD_EP_GetRxCount>
 8006d7e:	4603      	mov	r3, r0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d90:	4b03      	ldr	r3, [pc, #12]	@ (8006da0 <USBD_static_malloc+0x18>)
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20001ae0 	.word	0x20001ae0

08006da4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d817      	bhi.n	8006dfc <USBD_Get_USB_Status+0x44>
 8006dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <USBD_Get_USB_Status+0x1c>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006deb 	.word	0x08006deb
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006df7 	.word	0x08006df7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e00b      	b.n	8006e02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	73fb      	strb	r3, [r7, #15]
    break;
 8006dee:	e008      	b.n	8006e02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
    break;
 8006df4:	e005      	b.n	8006e02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfa:	e002      	b.n	8006e02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006e00:	bf00      	nop
  }
  return usb_status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <__libc_init_array>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	4d0d      	ldr	r5, [pc, #52]	@ (8006e58 <__libc_init_array+0x38>)
 8006e24:	4c0d      	ldr	r4, [pc, #52]	@ (8006e5c <__libc_init_array+0x3c>)
 8006e26:	1b64      	subs	r4, r4, r5
 8006e28:	10a4      	asrs	r4, r4, #2
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	42a6      	cmp	r6, r4
 8006e2e:	d109      	bne.n	8006e44 <__libc_init_array+0x24>
 8006e30:	4d0b      	ldr	r5, [pc, #44]	@ (8006e60 <__libc_init_array+0x40>)
 8006e32:	4c0c      	ldr	r4, [pc, #48]	@ (8006e64 <__libc_init_array+0x44>)
 8006e34:	f000 f818 	bl	8006e68 <_init>
 8006e38:	1b64      	subs	r4, r4, r5
 8006e3a:	10a4      	asrs	r4, r4, #2
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	42a6      	cmp	r6, r4
 8006e40:	d105      	bne.n	8006e4e <__libc_init_array+0x2e>
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e48:	4798      	blx	r3
 8006e4a:	3601      	adds	r6, #1
 8006e4c:	e7ee      	b.n	8006e2c <__libc_init_array+0xc>
 8006e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e52:	4798      	blx	r3
 8006e54:	3601      	adds	r6, #1
 8006e56:	e7f2      	b.n	8006e3e <__libc_init_array+0x1e>
 8006e58:	08006ee0 	.word	0x08006ee0
 8006e5c:	08006ee0 	.word	0x08006ee0
 8006e60:	08006ee0 	.word	0x08006ee0
 8006e64:	08006ee4 	.word	0x08006ee4

08006e68 <_init>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	bf00      	nop
 8006e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6e:	bc08      	pop	{r3}
 8006e70:	469e      	mov	lr, r3
 8006e72:	4770      	bx	lr

08006e74 <_fini>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	bf00      	nop
 8006e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7a:	bc08      	pop	{r3}
 8006e7c:	469e      	mov	lr, r3
 8006e7e:	4770      	bx	lr
